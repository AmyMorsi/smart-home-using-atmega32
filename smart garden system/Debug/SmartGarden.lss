
SmartGarden.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001058  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00001308  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000da4  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
       c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
      50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61
      60:	0e 94 1f 08 	call	0x103e	; 0x103e <main>
      64:	0c 94 2a 08 	jmp	0x1054	; 0x1054 <_exit>

00000068 <__bad_interrupt>:
      68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_Init>:
#include "DIO.h"
#include "avr/io.h"


void ADC_Init (void)
{
      6c:	df 93       	push	r29
      6e:	cf 93       	push	r28
      70:	cd b7       	in	r28, 0x3d	; 61
      72:	de b7       	in	r29, 0x3e	; 62
	// ADC Enable
	SET_BIT(ADCSRA , ADCSRA_ADEN);
      74:	a6 e2       	ldi	r26, 0x26	; 38
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e6 e2       	ldi	r30, 0x26	; 38
      7a:	f0 e0       	ldi	r31, 0x00	; 0
      7c:	80 81       	ld	r24, Z
      7e:	80 68       	ori	r24, 0x80	; 128
      80:	8c 93       	st	X, r24

	// Prescaler Configuration as 128
	SET_BIT(ADCSRA , ADCSRA_ADPS2);
      82:	a6 e2       	ldi	r26, 0x26	; 38
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e6 e2       	ldi	r30, 0x26	; 38
      88:	f0 e0       	ldi	r31, 0x00	; 0
      8a:	80 81       	ld	r24, Z
      8c:	84 60       	ori	r24, 0x04	; 4
      8e:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS1);
      90:	a6 e2       	ldi	r26, 0x26	; 38
      92:	b0 e0       	ldi	r27, 0x00	; 0
      94:	e6 e2       	ldi	r30, 0x26	; 38
      96:	f0 e0       	ldi	r31, 0x00	; 0
      98:	80 81       	ld	r24, Z
      9a:	82 60       	ori	r24, 0x02	; 2
      9c:	8c 93       	st	X, r24
	SET_BIT(ADCSRA , ADCSRA_ADPS0);
      9e:	a6 e2       	ldi	r26, 0x26	; 38
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e6 e2       	ldi	r30, 0x26	; 38
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	80 81       	ld	r24, Z
      a8:	81 60       	ori	r24, 0x01	; 1
      aa:	8c 93       	st	X, r24


	// Referance Voltage as AVCC with external capacitor
	CLR_BIT (ADMUX  , ADMUX_REFS1);
      ac:	a7 e2       	ldi	r26, 0x27	; 39
      ae:	b0 e0       	ldi	r27, 0x00	; 0
      b0:	e7 e2       	ldi	r30, 0x27	; 39
      b2:	f0 e0       	ldi	r31, 0x00	; 0
      b4:	80 81       	ld	r24, Z
      b6:	8f 77       	andi	r24, 0x7F	; 127
      b8:	8c 93       	st	X, r24
	SET_BIT (ADMUX  , ADMUX_REFS0);
      ba:	a7 e2       	ldi	r26, 0x27	; 39
      bc:	b0 e0       	ldi	r27, 0x00	; 0
      be:	e7 e2       	ldi	r30, 0x27	; 39
      c0:	f0 e0       	ldi	r31, 0x00	; 0
      c2:	80 81       	ld	r24, Z
      c4:	80 64       	ori	r24, 0x40	; 64
      c6:	8c 93       	st	X, r24

	/*ADC Data Rgith Adjustment 10 bits
	CLR_BIT(ADMUX , ADMUX_ADLAR);*/

	/*Activate Left adjustment result 8 bits */
	SET_BIT(ADMUX , ADMUX_ADLAR);
      c8:	a7 e2       	ldi	r26, 0x27	; 39
      ca:	b0 e0       	ldi	r27, 0x00	; 0
      cc:	e7 e2       	ldi	r30, 0x27	; 39
      ce:	f0 e0       	ldi	r31, 0x00	; 0
      d0:	80 81       	ld	r24, Z
      d2:	80 62       	ori	r24, 0x20	; 32
      d4:	8c 93       	st	X, r24

}
      d6:	cf 91       	pop	r28
      d8:	df 91       	pop	r29
      da:	08 95       	ret

000000dc <ADC_Read>:

u8 ADC_Read (u8 channel)
{
      dc:	df 93       	push	r29
      de:	cf 93       	push	r28
      e0:	0f 92       	push	r0
      e2:	cd b7       	in	r28, 0x3d	; 61
      e4:	de b7       	in	r29, 0x3e	; 62
      e6:	89 83       	std	Y+1, r24	; 0x01
	//step 1 : Clear MUX bits in ADMUX
	ADMUX   &= 0b11100000;
      e8:	a7 e2       	ldi	r26, 0x27	; 39
      ea:	b0 e0       	ldi	r27, 0x00	; 0
      ec:	e7 e2       	ldi	r30, 0x27	; 39
      ee:	f0 e0       	ldi	r31, 0x00	; 0
      f0:	80 81       	ld	r24, Z
      f2:	80 7e       	andi	r24, 0xE0	; 224
      f4:	8c 93       	st	X, r24


	//Step 2 : Set the required  ADC Channel Selection into the MUX bits
	ADMUX   |=channel;
      f6:	a7 e2       	ldi	r26, 0x27	; 39
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e7 e2       	ldi	r30, 0x27	; 39
      fc:	f0 e0       	ldi	r31, 0x00	; 0
      fe:	90 81       	ld	r25, Z
     100:	89 81       	ldd	r24, Y+1	; 0x01
     102:	89 2b       	or	r24, r25
     104:	8c 93       	st	X, r24


	// Step 3 : Start Single Converstion
	SET_BIT(ADCSRA , ADCSRA_ADSC );
     106:	a6 e2       	ldi	r26, 0x26	; 38
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	e6 e2       	ldi	r30, 0x26	; 38
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	80 64       	ori	r24, 0x40	; 64
     112:	8c 93       	st	X, r24


	// Step 4 :  Polling (busy wait ) until the conversion complete flag is set
	while((GET_BIT(ADCSRA , ADCSRA_ADIF)) == 0);
     114:	e6 e2       	ldi	r30, 0x26	; 38
     116:	f0 e0       	ldi	r31, 0x00	; 0
     118:	80 81       	ld	r24, Z
     11a:	82 95       	swap	r24
     11c:	8f 70       	andi	r24, 0x0F	; 15
     11e:	88 2f       	mov	r24, r24
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	81 70       	andi	r24, 0x01	; 1
     124:	90 70       	andi	r25, 0x00	; 0
     126:	00 97       	sbiw	r24, 0x00	; 0
     128:	a9 f3       	breq	.-22     	; 0x114 <ADC_Read+0x38>


	// Step 5 :  Clear Conversion Complete Flag
	SET_BIT(ADCSRA,ADCSRA_ADIF);
     12a:	a6 e2       	ldi	r26, 0x26	; 38
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	e6 e2       	ldi	r30, 0x26	; 38
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	80 81       	ld	r24, Z
     134:	80 61       	ori	r24, 0x10	; 16
     136:	8c 93       	st	X, r24

	// Step 7 :   return value in ADCH (Left adjustment result 8 bits)

	return ADCH;
     138:	e5 e2       	ldi	r30, 0x25	; 37
     13a:	f0 e0       	ldi	r31, 0x00	; 0
     13c:	80 81       	ld	r24, Z
}
     13e:	0f 90       	pop	r0
     140:	cf 91       	pop	r28
     142:	df 91       	pop	r29
     144:	08 95       	ret

00000146 <MOTOR_Init>:
 */

#include "DC_MOTOR.h"

void MOTOR_Init(void)
{
     146:	df 93       	push	r29
     148:	cf 93       	push	r28
     14a:	cd b7       	in	r28, 0x3d	; 61
     14c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(MOTOR_PORT, MOTOR_ENA, DIO_OUTPUT);
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	65 e0       	ldi	r22, 0x05	; 5
     152:	41 e0       	ldi	r20, 0x01	; 1
     154:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT, MOTOR_IN1, DIO_OUTPUT);
     158:	80 e0       	ldi	r24, 0x00	; 0
     15a:	66 e0       	ldi	r22, 0x06	; 6
     15c:	41 e0       	ldi	r20, 0x01	; 1
     15e:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinDirection>
	DIO_SetPinDirection(MOTOR_PORT, MOTOR_IN2, DIO_OUTPUT);
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	67 e0       	ldi	r22, 0x07	; 7
     166:	41 e0       	ldi	r20, 0x01	; 1
     168:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinDirection>

	DIO_SetPinValue(MOTOR_PORT, MOTOR_ENA, DIO_HIGH);
     16c:	80 e0       	ldi	r24, 0x00	; 0
     16e:	65 e0       	ldi	r22, 0x05	; 5
     170:	41 e0       	ldi	r20, 0x01	; 1
     172:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
}
     176:	cf 91       	pop	r28
     178:	df 91       	pop	r29
     17a:	08 95       	ret

0000017c <MOTOR_CWMotion>:

void MOTOR_CWMotion(void)
{
     17c:	df 93       	push	r29
     17e:	cf 93       	push	r28
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN2, DIO_LOW);
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	67 e0       	ldi	r22, 0x07	; 7
     188:	40 e0       	ldi	r20, 0x00	; 0
     18a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN1, DIO_HIGH);
     18e:	80 e0       	ldi	r24, 0x00	; 0
     190:	66 e0       	ldi	r22, 0x06	; 6
     192:	41 e0       	ldi	r20, 0x01	; 1
     194:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
}
     198:	cf 91       	pop	r28
     19a:	df 91       	pop	r29
     19c:	08 95       	ret

0000019e <MOTOR_CCWMotion>:

void MOTOR_CCWMotion(void)
{
     19e:	df 93       	push	r29
     1a0:	cf 93       	push	r28
     1a2:	cd b7       	in	r28, 0x3d	; 61
     1a4:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN1, DIO_LOW);
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	66 e0       	ldi	r22, 0x06	; 6
     1aa:	40 e0       	ldi	r20, 0x00	; 0
     1ac:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN2, DIO_HIGH);
     1b0:	80 e0       	ldi	r24, 0x00	; 0
     1b2:	67 e0       	ldi	r22, 0x07	; 7
     1b4:	41 e0       	ldi	r20, 0x01	; 1
     1b6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
}
     1ba:	cf 91       	pop	r28
     1bc:	df 91       	pop	r29
     1be:	08 95       	ret

000001c0 <MOTOR_StopMotion>:

void MOTOR_StopMotion(void)
{
     1c0:	df 93       	push	r29
     1c2:	cf 93       	push	r28
     1c4:	cd b7       	in	r28, 0x3d	; 61
     1c6:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN1, DIO_LOW);
     1c8:	80 e0       	ldi	r24, 0x00	; 0
     1ca:	66 e0       	ldi	r22, 0x06	; 6
     1cc:	40 e0       	ldi	r20, 0x00	; 0
     1ce:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
	DIO_SetPinValue(MOTOR_PORT, MOTOR_IN2, DIO_LOW);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	67 e0       	ldi	r22, 0x07	; 7
     1d6:	40 e0       	ldi	r20, 0x00	; 0
     1d8:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
}
     1dc:	cf 91       	pop	r28
     1de:	df 91       	pop	r29
     1e0:	08 95       	ret

000001e2 <DIO_SetPinValue>:
#include"avr/io.h"
#include<util/delay.h>
#include<stdio.h>
//IO Pins
void DIO_SetPinValue(u8 U8PortIdCopy,u8 U8PinIdCopy,u8 U8PinValueCopy)
{
     1e2:	df 93       	push	r29
     1e4:	cf 93       	push	r28
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	27 97       	sbiw	r28, 0x07	; 7
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	89 83       	std	Y+1, r24	; 0x01
     1f8:	6a 83       	std	Y+2, r22	; 0x02
     1fa:	4b 83       	std	Y+3, r20	; 0x03
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
     1fc:	89 81       	ldd	r24, Y+1	; 0x01
     1fe:	84 30       	cpi	r24, 0x04	; 4
     200:	08 f0       	brcs	.+2      	; 0x204 <DIO_SetPinValue+0x22>
     202:	ee c0       	rjmp	.+476    	; 0x3e0 <DIO_SetPinValue+0x1fe>
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	88 30       	cpi	r24, 0x08	; 8
     208:	08 f0       	brcs	.+2      	; 0x20c <DIO_SetPinValue+0x2a>
     20a:	ea c0       	rjmp	.+468    	; 0x3e0 <DIO_SetPinValue+0x1fe>
	{
		if(U8PinValueCopy==DIO_HIGH)
     20c:	8b 81       	ldd	r24, Y+3	; 0x03
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	09 f0       	breq	.+2      	; 0x214 <DIO_SetPinValue+0x32>
     212:	6f c0       	rjmp	.+222    	; 0x2f2 <DIO_SetPinValue+0x110>
		{
			switch(U8PortIdCopy)
     214:	89 81       	ldd	r24, Y+1	; 0x01
     216:	28 2f       	mov	r18, r24
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	3f 83       	std	Y+7, r19	; 0x07
     21c:	2e 83       	std	Y+6, r18	; 0x06
     21e:	8e 81       	ldd	r24, Y+6	; 0x06
     220:	9f 81       	ldd	r25, Y+7	; 0x07
     222:	81 30       	cpi	r24, 0x01	; 1
     224:	91 05       	cpc	r25, r1
     226:	49 f1       	breq	.+82     	; 0x27a <DIO_SetPinValue+0x98>
     228:	2e 81       	ldd	r18, Y+6	; 0x06
     22a:	3f 81       	ldd	r19, Y+7	; 0x07
     22c:	22 30       	cpi	r18, 0x02	; 2
     22e:	31 05       	cpc	r19, r1
     230:	2c f4       	brge	.+10     	; 0x23c <DIO_SetPinValue+0x5a>
     232:	8e 81       	ldd	r24, Y+6	; 0x06
     234:	9f 81       	ldd	r25, Y+7	; 0x07
     236:	00 97       	sbiw	r24, 0x00	; 0
     238:	61 f0       	breq	.+24     	; 0x252 <DIO_SetPinValue+0x70>
     23a:	d2 c0       	rjmp	.+420    	; 0x3e0 <DIO_SetPinValue+0x1fe>
     23c:	2e 81       	ldd	r18, Y+6	; 0x06
     23e:	3f 81       	ldd	r19, Y+7	; 0x07
     240:	22 30       	cpi	r18, 0x02	; 2
     242:	31 05       	cpc	r19, r1
     244:	71 f1       	breq	.+92     	; 0x2a2 <DIO_SetPinValue+0xc0>
     246:	8e 81       	ldd	r24, Y+6	; 0x06
     248:	9f 81       	ldd	r25, Y+7	; 0x07
     24a:	83 30       	cpi	r24, 0x03	; 3
     24c:	91 05       	cpc	r25, r1
     24e:	e9 f1       	breq	.+122    	; 0x2ca <DIO_SetPinValue+0xe8>
     250:	c7 c0       	rjmp	.+398    	; 0x3e0 <DIO_SetPinValue+0x1fe>
			{
				case DIO_PORTA: SET_BIT(PORTA,U8PinIdCopy); break;
     252:	ab e3       	ldi	r26, 0x3B	; 59
     254:	b0 e0       	ldi	r27, 0x00	; 0
     256:	eb e3       	ldi	r30, 0x3B	; 59
     258:	f0 e0       	ldi	r31, 0x00	; 0
     25a:	80 81       	ld	r24, Z
     25c:	48 2f       	mov	r20, r24
     25e:	8a 81       	ldd	r24, Y+2	; 0x02
     260:	28 2f       	mov	r18, r24
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	02 2e       	mov	r0, r18
     26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinValue+0x8e>
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	0a 94       	dec	r0
     272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinValue+0x8a>
     274:	84 2b       	or	r24, r20
     276:	8c 93       	st	X, r24
     278:	b3 c0       	rjmp	.+358    	; 0x3e0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: SET_BIT(PORTB,U8PinIdCopy); break;
     27a:	a8 e3       	ldi	r26, 0x38	; 56
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	e8 e3       	ldi	r30, 0x38	; 56
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	48 2f       	mov	r20, r24
     286:	8a 81       	ldd	r24, Y+2	; 0x02
     288:	28 2f       	mov	r18, r24
     28a:	30 e0       	ldi	r19, 0x00	; 0
     28c:	81 e0       	ldi	r24, 0x01	; 1
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	02 2e       	mov	r0, r18
     292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_SetPinValue+0xb6>
     294:	88 0f       	add	r24, r24
     296:	99 1f       	adc	r25, r25
     298:	0a 94       	dec	r0
     29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_SetPinValue+0xb2>
     29c:	84 2b       	or	r24, r20
     29e:	8c 93       	st	X, r24
     2a0:	9f c0       	rjmp	.+318    	; 0x3e0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: SET_BIT(PORTC,U8PinIdCopy); break;
     2a2:	a5 e3       	ldi	r26, 0x35	; 53
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	e5 e3       	ldi	r30, 0x35	; 53
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	48 2f       	mov	r20, r24
     2ae:	8a 81       	ldd	r24, Y+2	; 0x02
     2b0:	28 2f       	mov	r18, r24
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	02 2e       	mov	r0, r18
     2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_SetPinValue+0xde>
     2bc:	88 0f       	add	r24, r24
     2be:	99 1f       	adc	r25, r25
     2c0:	0a 94       	dec	r0
     2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_SetPinValue+0xda>
     2c4:	84 2b       	or	r24, r20
     2c6:	8c 93       	st	X, r24
     2c8:	8b c0       	rjmp	.+278    	; 0x3e0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: SET_BIT(PORTD,U8PinIdCopy); break;
     2ca:	a2 e3       	ldi	r26, 0x32	; 50
     2cc:	b0 e0       	ldi	r27, 0x00	; 0
     2ce:	e2 e3       	ldi	r30, 0x32	; 50
     2d0:	f0 e0       	ldi	r31, 0x00	; 0
     2d2:	80 81       	ld	r24, Z
     2d4:	48 2f       	mov	r20, r24
     2d6:	8a 81       	ldd	r24, Y+2	; 0x02
     2d8:	28 2f       	mov	r18, r24
     2da:	30 e0       	ldi	r19, 0x00	; 0
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	02 2e       	mov	r0, r18
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DIO_SetPinValue+0x106>
     2e4:	88 0f       	add	r24, r24
     2e6:	99 1f       	adc	r25, r25
     2e8:	0a 94       	dec	r0
     2ea:	e2 f7       	brpl	.-8      	; 0x2e4 <DIO_SetPinValue+0x102>
     2ec:	84 2b       	or	r24, r20
     2ee:	8c 93       	st	X, r24
     2f0:	77 c0       	rjmp	.+238    	; 0x3e0 <DIO_SetPinValue+0x1fe>
			}
		}
		else if(U8PinValueCopy==DIO_LOW)
     2f2:	8b 81       	ldd	r24, Y+3	; 0x03
     2f4:	88 23       	and	r24, r24
     2f6:	09 f0       	breq	.+2      	; 0x2fa <DIO_SetPinValue+0x118>
     2f8:	73 c0       	rjmp	.+230    	; 0x3e0 <DIO_SetPinValue+0x1fe>
		{
			switch(U8PortIdCopy)
     2fa:	89 81       	ldd	r24, Y+1	; 0x01
     2fc:	28 2f       	mov	r18, r24
     2fe:	30 e0       	ldi	r19, 0x00	; 0
     300:	3d 83       	std	Y+5, r19	; 0x05
     302:	2c 83       	std	Y+4, r18	; 0x04
     304:	8c 81       	ldd	r24, Y+4	; 0x04
     306:	9d 81       	ldd	r25, Y+5	; 0x05
     308:	81 30       	cpi	r24, 0x01	; 1
     30a:	91 05       	cpc	r25, r1
     30c:	59 f1       	breq	.+86     	; 0x364 <DIO_SetPinValue+0x182>
     30e:	2c 81       	ldd	r18, Y+4	; 0x04
     310:	3d 81       	ldd	r19, Y+5	; 0x05
     312:	22 30       	cpi	r18, 0x02	; 2
     314:	31 05       	cpc	r19, r1
     316:	2c f4       	brge	.+10     	; 0x322 <DIO_SetPinValue+0x140>
     318:	8c 81       	ldd	r24, Y+4	; 0x04
     31a:	9d 81       	ldd	r25, Y+5	; 0x05
     31c:	00 97       	sbiw	r24, 0x00	; 0
     31e:	69 f0       	breq	.+26     	; 0x33a <DIO_SetPinValue+0x158>
     320:	5f c0       	rjmp	.+190    	; 0x3e0 <DIO_SetPinValue+0x1fe>
     322:	2c 81       	ldd	r18, Y+4	; 0x04
     324:	3d 81       	ldd	r19, Y+5	; 0x05
     326:	22 30       	cpi	r18, 0x02	; 2
     328:	31 05       	cpc	r19, r1
     32a:	89 f1       	breq	.+98     	; 0x38e <DIO_SetPinValue+0x1ac>
     32c:	8c 81       	ldd	r24, Y+4	; 0x04
     32e:	9d 81       	ldd	r25, Y+5	; 0x05
     330:	83 30       	cpi	r24, 0x03	; 3
     332:	91 05       	cpc	r25, r1
     334:	09 f4       	brne	.+2      	; 0x338 <DIO_SetPinValue+0x156>
     336:	40 c0       	rjmp	.+128    	; 0x3b8 <DIO_SetPinValue+0x1d6>
     338:	53 c0       	rjmp	.+166    	; 0x3e0 <DIO_SetPinValue+0x1fe>
			{
				case DIO_PORTA: CLR_BIT(PORTA,U8PinIdCopy); break;
     33a:	ab e3       	ldi	r26, 0x3B	; 59
     33c:	b0 e0       	ldi	r27, 0x00	; 0
     33e:	eb e3       	ldi	r30, 0x3B	; 59
     340:	f0 e0       	ldi	r31, 0x00	; 0
     342:	80 81       	ld	r24, Z
     344:	48 2f       	mov	r20, r24
     346:	8a 81       	ldd	r24, Y+2	; 0x02
     348:	28 2f       	mov	r18, r24
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	02 2e       	mov	r0, r18
     352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_SetPinValue+0x176>
     354:	88 0f       	add	r24, r24
     356:	99 1f       	adc	r25, r25
     358:	0a 94       	dec	r0
     35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_SetPinValue+0x172>
     35c:	80 95       	com	r24
     35e:	84 23       	and	r24, r20
     360:	8c 93       	st	X, r24
     362:	3e c0       	rjmp	.+124    	; 0x3e0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: CLR_BIT(PORTB,U8PinIdCopy); break;
     364:	a8 e3       	ldi	r26, 0x38	; 56
     366:	b0 e0       	ldi	r27, 0x00	; 0
     368:	e8 e3       	ldi	r30, 0x38	; 56
     36a:	f0 e0       	ldi	r31, 0x00	; 0
     36c:	80 81       	ld	r24, Z
     36e:	48 2f       	mov	r20, r24
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	28 2f       	mov	r18, r24
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	02 2e       	mov	r0, r18
     37c:	02 c0       	rjmp	.+4      	; 0x382 <DIO_SetPinValue+0x1a0>
     37e:	88 0f       	add	r24, r24
     380:	99 1f       	adc	r25, r25
     382:	0a 94       	dec	r0
     384:	e2 f7       	brpl	.-8      	; 0x37e <DIO_SetPinValue+0x19c>
     386:	80 95       	com	r24
     388:	84 23       	and	r24, r20
     38a:	8c 93       	st	X, r24
     38c:	29 c0       	rjmp	.+82     	; 0x3e0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: CLR_BIT(PORTC,U8PinIdCopy); break;
     38e:	a5 e3       	ldi	r26, 0x35	; 53
     390:	b0 e0       	ldi	r27, 0x00	; 0
     392:	e5 e3       	ldi	r30, 0x35	; 53
     394:	f0 e0       	ldi	r31, 0x00	; 0
     396:	80 81       	ld	r24, Z
     398:	48 2f       	mov	r20, r24
     39a:	8a 81       	ldd	r24, Y+2	; 0x02
     39c:	28 2f       	mov	r18, r24
     39e:	30 e0       	ldi	r19, 0x00	; 0
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	90 e0       	ldi	r25, 0x00	; 0
     3a4:	02 2e       	mov	r0, r18
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <DIO_SetPinValue+0x1ca>
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	0a 94       	dec	r0
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <DIO_SetPinValue+0x1c6>
     3b0:	80 95       	com	r24
     3b2:	84 23       	and	r24, r20
     3b4:	8c 93       	st	X, r24
     3b6:	14 c0       	rjmp	.+40     	; 0x3e0 <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: CLR_BIT(PORTD,U8PinIdCopy); break;
     3b8:	a2 e3       	ldi	r26, 0x32	; 50
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	e2 e3       	ldi	r30, 0x32	; 50
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	80 81       	ld	r24, Z
     3c2:	48 2f       	mov	r20, r24
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	28 2f       	mov	r18, r24
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	02 2e       	mov	r0, r18
     3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <DIO_SetPinValue+0x1f4>
     3d2:	88 0f       	add	r24, r24
     3d4:	99 1f       	adc	r25, r25
     3d6:	0a 94       	dec	r0
     3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <DIO_SetPinValue+0x1f0>
     3da:	80 95       	com	r24
     3dc:	84 23       	and	r24, r20
     3de:	8c 93       	st	X, r24
	}
	else
	{
		//out of range
	}
}
     3e0:	27 96       	adiw	r28, 0x07	; 7
     3e2:	0f b6       	in	r0, 0x3f	; 63
     3e4:	f8 94       	cli
     3e6:	de bf       	out	0x3e, r29	; 62
     3e8:	0f be       	out	0x3f, r0	; 63
     3ea:	cd bf       	out	0x3d, r28	; 61
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <DIO_SetPinDirection>:

void DIO_SetPinDirection(u8 U8PortIdCopy,u8 U8PinIdCopy,u8 U8PinDirCopy)
{
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	27 97       	sbiw	r28, 0x07	; 7
     3fc:	0f b6       	in	r0, 0x3f	; 63
     3fe:	f8 94       	cli
     400:	de bf       	out	0x3e, r29	; 62
     402:	0f be       	out	0x3f, r0	; 63
     404:	cd bf       	out	0x3d, r28	; 61
     406:	89 83       	std	Y+1, r24	; 0x01
     408:	6a 83       	std	Y+2, r22	; 0x02
     40a:	4b 83       	std	Y+3, r20	; 0x03
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
     40c:	89 81       	ldd	r24, Y+1	; 0x01
     40e:	84 30       	cpi	r24, 0x04	; 4
     410:	08 f0       	brcs	.+2      	; 0x414 <DIO_SetPinDirection+0x22>
     412:	ee c0       	rjmp	.+476    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	88 30       	cpi	r24, 0x08	; 8
     418:	08 f0       	brcs	.+2      	; 0x41c <DIO_SetPinDirection+0x2a>
     41a:	ea c0       	rjmp	.+468    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
		{
			if(U8PinDirCopy==DIO_OUTPUT)
     41c:	8b 81       	ldd	r24, Y+3	; 0x03
     41e:	81 30       	cpi	r24, 0x01	; 1
     420:	09 f0       	breq	.+2      	; 0x424 <DIO_SetPinDirection+0x32>
     422:	6f c0       	rjmp	.+222    	; 0x502 <DIO_SetPinDirection+0x110>
			{
				switch(U8PortIdCopy)
     424:	89 81       	ldd	r24, Y+1	; 0x01
     426:	28 2f       	mov	r18, r24
     428:	30 e0       	ldi	r19, 0x00	; 0
     42a:	3f 83       	std	Y+7, r19	; 0x07
     42c:	2e 83       	std	Y+6, r18	; 0x06
     42e:	8e 81       	ldd	r24, Y+6	; 0x06
     430:	9f 81       	ldd	r25, Y+7	; 0x07
     432:	81 30       	cpi	r24, 0x01	; 1
     434:	91 05       	cpc	r25, r1
     436:	49 f1       	breq	.+82     	; 0x48a <DIO_SetPinDirection+0x98>
     438:	2e 81       	ldd	r18, Y+6	; 0x06
     43a:	3f 81       	ldd	r19, Y+7	; 0x07
     43c:	22 30       	cpi	r18, 0x02	; 2
     43e:	31 05       	cpc	r19, r1
     440:	2c f4       	brge	.+10     	; 0x44c <DIO_SetPinDirection+0x5a>
     442:	8e 81       	ldd	r24, Y+6	; 0x06
     444:	9f 81       	ldd	r25, Y+7	; 0x07
     446:	00 97       	sbiw	r24, 0x00	; 0
     448:	61 f0       	breq	.+24     	; 0x462 <DIO_SetPinDirection+0x70>
     44a:	d2 c0       	rjmp	.+420    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
     44c:	2e 81       	ldd	r18, Y+6	; 0x06
     44e:	3f 81       	ldd	r19, Y+7	; 0x07
     450:	22 30       	cpi	r18, 0x02	; 2
     452:	31 05       	cpc	r19, r1
     454:	71 f1       	breq	.+92     	; 0x4b2 <DIO_SetPinDirection+0xc0>
     456:	8e 81       	ldd	r24, Y+6	; 0x06
     458:	9f 81       	ldd	r25, Y+7	; 0x07
     45a:	83 30       	cpi	r24, 0x03	; 3
     45c:	91 05       	cpc	r25, r1
     45e:	e9 f1       	breq	.+122    	; 0x4da <DIO_SetPinDirection+0xe8>
     460:	c7 c0       	rjmp	.+398    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
				{
					case DIO_PORTA: SET_BIT(DDRA,U8PinIdCopy); break;
     462:	aa e3       	ldi	r26, 0x3A	; 58
     464:	b0 e0       	ldi	r27, 0x00	; 0
     466:	ea e3       	ldi	r30, 0x3A	; 58
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 81       	ld	r24, Z
     46c:	48 2f       	mov	r20, r24
     46e:	8a 81       	ldd	r24, Y+2	; 0x02
     470:	28 2f       	mov	r18, r24
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	02 2e       	mov	r0, r18
     47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_SetPinDirection+0x8e>
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	0a 94       	dec	r0
     482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_SetPinDirection+0x8a>
     484:	84 2b       	or	r24, r20
     486:	8c 93       	st	X, r24
     488:	b3 c0       	rjmp	.+358    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTB: SET_BIT(DDRB,U8PinIdCopy); break;
     48a:	a7 e3       	ldi	r26, 0x37	; 55
     48c:	b0 e0       	ldi	r27, 0x00	; 0
     48e:	e7 e3       	ldi	r30, 0x37	; 55
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	80 81       	ld	r24, Z
     494:	48 2f       	mov	r20, r24
     496:	8a 81       	ldd	r24, Y+2	; 0x02
     498:	28 2f       	mov	r18, r24
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	02 2e       	mov	r0, r18
     4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_SetPinDirection+0xb6>
     4a4:	88 0f       	add	r24, r24
     4a6:	99 1f       	adc	r25, r25
     4a8:	0a 94       	dec	r0
     4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_SetPinDirection+0xb2>
     4ac:	84 2b       	or	r24, r20
     4ae:	8c 93       	st	X, r24
     4b0:	9f c0       	rjmp	.+318    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTC: SET_BIT(DDRC,U8PinIdCopy); break;
     4b2:	a4 e3       	ldi	r26, 0x34	; 52
     4b4:	b0 e0       	ldi	r27, 0x00	; 0
     4b6:	e4 e3       	ldi	r30, 0x34	; 52
     4b8:	f0 e0       	ldi	r31, 0x00	; 0
     4ba:	80 81       	ld	r24, Z
     4bc:	48 2f       	mov	r20, r24
     4be:	8a 81       	ldd	r24, Y+2	; 0x02
     4c0:	28 2f       	mov	r18, r24
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	81 e0       	ldi	r24, 0x01	; 1
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	02 2e       	mov	r0, r18
     4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_SetPinDirection+0xde>
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	0a 94       	dec	r0
     4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_SetPinDirection+0xda>
     4d4:	84 2b       	or	r24, r20
     4d6:	8c 93       	st	X, r24
     4d8:	8b c0       	rjmp	.+278    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTD: SET_BIT(DDRD,U8PinIdCopy); break;
     4da:	a1 e3       	ldi	r26, 0x31	; 49
     4dc:	b0 e0       	ldi	r27, 0x00	; 0
     4de:	e1 e3       	ldi	r30, 0x31	; 49
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	48 2f       	mov	r20, r24
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	28 2f       	mov	r18, r24
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	02 2e       	mov	r0, r18
     4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_SetPinDirection+0x106>
     4f4:	88 0f       	add	r24, r24
     4f6:	99 1f       	adc	r25, r25
     4f8:	0a 94       	dec	r0
     4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_SetPinDirection+0x102>
     4fc:	84 2b       	or	r24, r20
     4fe:	8c 93       	st	X, r24
     500:	77 c0       	rjmp	.+238    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
				}
			}
			else if(U8PinDirCopy==DIO_INPUT)
     502:	8b 81       	ldd	r24, Y+3	; 0x03
     504:	88 23       	and	r24, r24
     506:	09 f0       	breq	.+2      	; 0x50a <DIO_SetPinDirection+0x118>
     508:	73 c0       	rjmp	.+230    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
			{
				switch(U8PortIdCopy)
     50a:	89 81       	ldd	r24, Y+1	; 0x01
     50c:	28 2f       	mov	r18, r24
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	3d 83       	std	Y+5, r19	; 0x05
     512:	2c 83       	std	Y+4, r18	; 0x04
     514:	8c 81       	ldd	r24, Y+4	; 0x04
     516:	9d 81       	ldd	r25, Y+5	; 0x05
     518:	81 30       	cpi	r24, 0x01	; 1
     51a:	91 05       	cpc	r25, r1
     51c:	59 f1       	breq	.+86     	; 0x574 <DIO_SetPinDirection+0x182>
     51e:	2c 81       	ldd	r18, Y+4	; 0x04
     520:	3d 81       	ldd	r19, Y+5	; 0x05
     522:	22 30       	cpi	r18, 0x02	; 2
     524:	31 05       	cpc	r19, r1
     526:	2c f4       	brge	.+10     	; 0x532 <DIO_SetPinDirection+0x140>
     528:	8c 81       	ldd	r24, Y+4	; 0x04
     52a:	9d 81       	ldd	r25, Y+5	; 0x05
     52c:	00 97       	sbiw	r24, 0x00	; 0
     52e:	69 f0       	breq	.+26     	; 0x54a <DIO_SetPinDirection+0x158>
     530:	5f c0       	rjmp	.+190    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
     532:	2c 81       	ldd	r18, Y+4	; 0x04
     534:	3d 81       	ldd	r19, Y+5	; 0x05
     536:	22 30       	cpi	r18, 0x02	; 2
     538:	31 05       	cpc	r19, r1
     53a:	89 f1       	breq	.+98     	; 0x59e <DIO_SetPinDirection+0x1ac>
     53c:	8c 81       	ldd	r24, Y+4	; 0x04
     53e:	9d 81       	ldd	r25, Y+5	; 0x05
     540:	83 30       	cpi	r24, 0x03	; 3
     542:	91 05       	cpc	r25, r1
     544:	09 f4       	brne	.+2      	; 0x548 <DIO_SetPinDirection+0x156>
     546:	40 c0       	rjmp	.+128    	; 0x5c8 <DIO_SetPinDirection+0x1d6>
     548:	53 c0       	rjmp	.+166    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
				{
					case DIO_PORTA: CLR_BIT(DDRA,U8PinIdCopy); break;
     54a:	aa e3       	ldi	r26, 0x3A	; 58
     54c:	b0 e0       	ldi	r27, 0x00	; 0
     54e:	ea e3       	ldi	r30, 0x3A	; 58
     550:	f0 e0       	ldi	r31, 0x00	; 0
     552:	80 81       	ld	r24, Z
     554:	48 2f       	mov	r20, r24
     556:	8a 81       	ldd	r24, Y+2	; 0x02
     558:	28 2f       	mov	r18, r24
     55a:	30 e0       	ldi	r19, 0x00	; 0
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	02 2e       	mov	r0, r18
     562:	02 c0       	rjmp	.+4      	; 0x568 <DIO_SetPinDirection+0x176>
     564:	88 0f       	add	r24, r24
     566:	99 1f       	adc	r25, r25
     568:	0a 94       	dec	r0
     56a:	e2 f7       	brpl	.-8      	; 0x564 <DIO_SetPinDirection+0x172>
     56c:	80 95       	com	r24
     56e:	84 23       	and	r24, r20
     570:	8c 93       	st	X, r24
     572:	3e c0       	rjmp	.+124    	; 0x5f0 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTB: CLR_BIT(DDRB,U8PinIdCopy); break;
     574:	a7 e3       	ldi	r26, 0x37	; 55
     576:	b0 e0       	ldi	r27, 0x00	; 0
     578:	e7 e3       	ldi	r30, 0x37	; 55
     57a:	f0 e0       	ldi	r31, 0x00	; 0
     57c:	80 81       	ld	r24, Z
     57e:	48 2f       	mov	r20, r24
     580:	8a 81       	ldd	r24, Y+2	; 0x02
     582:	28 2f       	mov	r18, r24
     584:	30 e0       	ldi	r19, 0x00	; 0
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	02 2e       	mov	r0, r18
     58c:	02 c0       	rjmp	.+4      	; 0x592 <DIO_SetPinDirection+0x1a0>
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	0a 94       	dec	r0
     594:	e2 f7       	brpl	.-8      	; 0x58e <DIO_SetPinDirection+0x19c>
     596:	80 95       	com	r24
     598:	84 23       	and	r24, r20
     59a:	8c 93       	st	X, r24
     59c:	29 c0       	rjmp	.+82     	; 0x5f0 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTC: CLR_BIT(DDRC,U8PinIdCopy); break;
     59e:	a4 e3       	ldi	r26, 0x34	; 52
     5a0:	b0 e0       	ldi	r27, 0x00	; 0
     5a2:	e4 e3       	ldi	r30, 0x34	; 52
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	80 81       	ld	r24, Z
     5a8:	48 2f       	mov	r20, r24
     5aa:	8a 81       	ldd	r24, Y+2	; 0x02
     5ac:	28 2f       	mov	r18, r24
     5ae:	30 e0       	ldi	r19, 0x00	; 0
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	02 2e       	mov	r0, r18
     5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_SetPinDirection+0x1ca>
     5b8:	88 0f       	add	r24, r24
     5ba:	99 1f       	adc	r25, r25
     5bc:	0a 94       	dec	r0
     5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_SetPinDirection+0x1c6>
     5c0:	80 95       	com	r24
     5c2:	84 23       	and	r24, r20
     5c4:	8c 93       	st	X, r24
     5c6:	14 c0       	rjmp	.+40     	; 0x5f0 <DIO_SetPinDirection+0x1fe>
					case DIO_PORTD: CLR_BIT(DDRD,U8PinIdCopy); break;
     5c8:	a1 e3       	ldi	r26, 0x31	; 49
     5ca:	b0 e0       	ldi	r27, 0x00	; 0
     5cc:	e1 e3       	ldi	r30, 0x31	; 49
     5ce:	f0 e0       	ldi	r31, 0x00	; 0
     5d0:	80 81       	ld	r24, Z
     5d2:	48 2f       	mov	r20, r24
     5d4:	8a 81       	ldd	r24, Y+2	; 0x02
     5d6:	28 2f       	mov	r18, r24
     5d8:	30 e0       	ldi	r19, 0x00	; 0
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	02 2e       	mov	r0, r18
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <DIO_SetPinDirection+0x1f4>
     5e2:	88 0f       	add	r24, r24
     5e4:	99 1f       	adc	r25, r25
     5e6:	0a 94       	dec	r0
     5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <DIO_SetPinDirection+0x1f0>
     5ea:	80 95       	com	r24
     5ec:	84 23       	and	r24, r20
     5ee:	8c 93       	st	X, r24

				}
			}

		}
}
     5f0:	27 96       	adiw	r28, 0x07	; 7
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	cf 91       	pop	r28
     5fe:	df 91       	pop	r29
     600:	08 95       	ret

00000602 <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 U8PortIdCopy,u8 U8PinIdCopy)
{
     602:	df 93       	push	r29
     604:	cf 93       	push	r28
     606:	00 d0       	rcall	.+0      	; 0x608 <DIO_GetPinValue+0x6>
     608:	00 d0       	rcall	.+0      	; 0x60a <DIO_GetPinValue+0x8>
     60a:	0f 92       	push	r0
     60c:	cd b7       	in	r28, 0x3d	; 61
     60e:	de b7       	in	r29, 0x3e	; 62
     610:	89 83       	std	Y+1, r24	; 0x01
     612:	6a 83       	std	Y+2, r22	; 0x02
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
     614:	89 81       	ldd	r24, Y+1	; 0x01
     616:	84 30       	cpi	r24, 0x04	; 4
     618:	08 f0       	brcs	.+2      	; 0x61c <DIO_GetPinValue+0x1a>
     61a:	70 c0       	rjmp	.+224    	; 0x6fc <DIO_GetPinValue+0xfa>
     61c:	8a 81       	ldd	r24, Y+2	; 0x02
     61e:	88 30       	cpi	r24, 0x08	; 8
     620:	08 f0       	brcs	.+2      	; 0x624 <DIO_GetPinValue+0x22>
     622:	6c c0       	rjmp	.+216    	; 0x6fc <DIO_GetPinValue+0xfa>
	{
		switch(U8PortIdCopy)
     624:	89 81       	ldd	r24, Y+1	; 0x01
     626:	28 2f       	mov	r18, r24
     628:	30 e0       	ldi	r19, 0x00	; 0
     62a:	3d 83       	std	Y+5, r19	; 0x05
     62c:	2c 83       	std	Y+4, r18	; 0x04
     62e:	4c 81       	ldd	r20, Y+4	; 0x04
     630:	5d 81       	ldd	r21, Y+5	; 0x05
     632:	41 30       	cpi	r20, 0x01	; 1
     634:	51 05       	cpc	r21, r1
     636:	49 f1       	breq	.+82     	; 0x68a <DIO_GetPinValue+0x88>
     638:	8c 81       	ldd	r24, Y+4	; 0x04
     63a:	9d 81       	ldd	r25, Y+5	; 0x05
     63c:	82 30       	cpi	r24, 0x02	; 2
     63e:	91 05       	cpc	r25, r1
     640:	34 f4       	brge	.+12     	; 0x64e <DIO_GetPinValue+0x4c>
     642:	2c 81       	ldd	r18, Y+4	; 0x04
     644:	3d 81       	ldd	r19, Y+5	; 0x05
     646:	21 15       	cp	r18, r1
     648:	31 05       	cpc	r19, r1
     64a:	61 f0       	breq	.+24     	; 0x664 <DIO_GetPinValue+0x62>
     64c:	57 c0       	rjmp	.+174    	; 0x6fc <DIO_GetPinValue+0xfa>
     64e:	4c 81       	ldd	r20, Y+4	; 0x04
     650:	5d 81       	ldd	r21, Y+5	; 0x05
     652:	42 30       	cpi	r20, 0x02	; 2
     654:	51 05       	cpc	r21, r1
     656:	61 f1       	breq	.+88     	; 0x6b0 <DIO_GetPinValue+0xae>
     658:	8c 81       	ldd	r24, Y+4	; 0x04
     65a:	9d 81       	ldd	r25, Y+5	; 0x05
     65c:	83 30       	cpi	r24, 0x03	; 3
     65e:	91 05       	cpc	r25, r1
     660:	d1 f1       	breq	.+116    	; 0x6d6 <DIO_GetPinValue+0xd4>
     662:	4c c0       	rjmp	.+152    	; 0x6fc <DIO_GetPinValue+0xfa>
		{
			case DIO_PORTA: return GET_BIT(PINA,U8PinIdCopy); break;
     664:	e9 e3       	ldi	r30, 0x39	; 57
     666:	f0 e0       	ldi	r31, 0x00	; 0
     668:	80 81       	ld	r24, Z
     66a:	28 2f       	mov	r18, r24
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	8a 81       	ldd	r24, Y+2	; 0x02
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	a9 01       	movw	r20, r18
     676:	02 c0       	rjmp	.+4      	; 0x67c <DIO_GetPinValue+0x7a>
     678:	55 95       	asr	r21
     67a:	47 95       	ror	r20
     67c:	8a 95       	dec	r24
     67e:	e2 f7       	brpl	.-8      	; 0x678 <DIO_GetPinValue+0x76>
     680:	ca 01       	movw	r24, r20
     682:	58 2f       	mov	r21, r24
     684:	51 70       	andi	r21, 0x01	; 1
     686:	5b 83       	std	Y+3, r21	; 0x03
     688:	3b c0       	rjmp	.+118    	; 0x700 <DIO_GetPinValue+0xfe>
			case DIO_PORTB: return GET_BIT(PINB,U8PinIdCopy); break;
     68a:	e6 e3       	ldi	r30, 0x36	; 54
     68c:	f0 e0       	ldi	r31, 0x00	; 0
     68e:	80 81       	ld	r24, Z
     690:	28 2f       	mov	r18, r24
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	88 2f       	mov	r24, r24
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	a9 01       	movw	r20, r18
     69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_GetPinValue+0xa0>
     69e:	55 95       	asr	r21
     6a0:	47 95       	ror	r20
     6a2:	8a 95       	dec	r24
     6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_GetPinValue+0x9c>
     6a6:	ca 01       	movw	r24, r20
     6a8:	58 2f       	mov	r21, r24
     6aa:	51 70       	andi	r21, 0x01	; 1
     6ac:	5b 83       	std	Y+3, r21	; 0x03
     6ae:	28 c0       	rjmp	.+80     	; 0x700 <DIO_GetPinValue+0xfe>
			case DIO_PORTC: return GET_BIT(PINC,U8PinIdCopy); break;
     6b0:	e3 e3       	ldi	r30, 0x33	; 51
     6b2:	f0 e0       	ldi	r31, 0x00	; 0
     6b4:	80 81       	ld	r24, Z
     6b6:	28 2f       	mov	r18, r24
     6b8:	30 e0       	ldi	r19, 0x00	; 0
     6ba:	8a 81       	ldd	r24, Y+2	; 0x02
     6bc:	88 2f       	mov	r24, r24
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	a9 01       	movw	r20, r18
     6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_GetPinValue+0xc6>
     6c4:	55 95       	asr	r21
     6c6:	47 95       	ror	r20
     6c8:	8a 95       	dec	r24
     6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_GetPinValue+0xc2>
     6cc:	ca 01       	movw	r24, r20
     6ce:	58 2f       	mov	r21, r24
     6d0:	51 70       	andi	r21, 0x01	; 1
     6d2:	5b 83       	std	Y+3, r21	; 0x03
     6d4:	15 c0       	rjmp	.+42     	; 0x700 <DIO_GetPinValue+0xfe>
			case DIO_PORTD: return GET_BIT(PIND,U8PinIdCopy); break;
     6d6:	e0 e3       	ldi	r30, 0x30	; 48
     6d8:	f0 e0       	ldi	r31, 0x00	; 0
     6da:	80 81       	ld	r24, Z
     6dc:	28 2f       	mov	r18, r24
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	8a 81       	ldd	r24, Y+2	; 0x02
     6e2:	88 2f       	mov	r24, r24
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	a9 01       	movw	r20, r18
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_GetPinValue+0xec>
     6ea:	55 95       	asr	r21
     6ec:	47 95       	ror	r20
     6ee:	8a 95       	dec	r24
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_GetPinValue+0xe8>
     6f2:	ca 01       	movw	r24, r20
     6f4:	58 2f       	mov	r21, r24
     6f6:	51 70       	andi	r21, 0x01	; 1
     6f8:	5b 83       	std	Y+3, r21	; 0x03
     6fa:	02 c0       	rjmp	.+4      	; 0x700 <DIO_GetPinValue+0xfe>
		}
	}

	return 0xFF;
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	8b 83       	std	Y+3, r24	; 0x03
     700:	8b 81       	ldd	r24, Y+3	; 0x03
}
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	cf 91       	pop	r28
     70e:	df 91       	pop	r29
     710:	08 95       	ret

00000712 <DIO_GetInputPinValue>:


u8 DIO_GetInputPinValue(u8 U8PortIdCopy,u8 U8PinIdCopy)
{
     712:	df 93       	push	r29
     714:	cf 93       	push	r28
     716:	00 d0       	rcall	.+0      	; 0x718 <DIO_GetInputPinValue+0x6>
     718:	00 d0       	rcall	.+0      	; 0x71a <DIO_GetInputPinValue+0x8>
     71a:	0f 92       	push	r0
     71c:	cd b7       	in	r28, 0x3d	; 61
     71e:	de b7       	in	r29, 0x3e	; 62
     720:	89 83       	std	Y+1, r24	; 0x01
     722:	6a 83       	std	Y+2, r22	; 0x02
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
     724:	89 81       	ldd	r24, Y+1	; 0x01
     726:	84 30       	cpi	r24, 0x04	; 4
     728:	08 f0       	brcs	.+2      	; 0x72c <DIO_GetInputPinValue+0x1a>
     72a:	70 c0       	rjmp	.+224    	; 0x80c <DIO_GetInputPinValue+0xfa>
     72c:	8a 81       	ldd	r24, Y+2	; 0x02
     72e:	88 30       	cpi	r24, 0x08	; 8
     730:	08 f0       	brcs	.+2      	; 0x734 <DIO_GetInputPinValue+0x22>
     732:	6c c0       	rjmp	.+216    	; 0x80c <DIO_GetInputPinValue+0xfa>
	{
		switch(U8PortIdCopy)
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	28 2f       	mov	r18, r24
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	3d 83       	std	Y+5, r19	; 0x05
     73c:	2c 83       	std	Y+4, r18	; 0x04
     73e:	4c 81       	ldd	r20, Y+4	; 0x04
     740:	5d 81       	ldd	r21, Y+5	; 0x05
     742:	41 30       	cpi	r20, 0x01	; 1
     744:	51 05       	cpc	r21, r1
     746:	49 f1       	breq	.+82     	; 0x79a <DIO_GetInputPinValue+0x88>
     748:	8c 81       	ldd	r24, Y+4	; 0x04
     74a:	9d 81       	ldd	r25, Y+5	; 0x05
     74c:	82 30       	cpi	r24, 0x02	; 2
     74e:	91 05       	cpc	r25, r1
     750:	34 f4       	brge	.+12     	; 0x75e <DIO_GetInputPinValue+0x4c>
     752:	2c 81       	ldd	r18, Y+4	; 0x04
     754:	3d 81       	ldd	r19, Y+5	; 0x05
     756:	21 15       	cp	r18, r1
     758:	31 05       	cpc	r19, r1
     75a:	61 f0       	breq	.+24     	; 0x774 <DIO_GetInputPinValue+0x62>
     75c:	57 c0       	rjmp	.+174    	; 0x80c <DIO_GetInputPinValue+0xfa>
     75e:	4c 81       	ldd	r20, Y+4	; 0x04
     760:	5d 81       	ldd	r21, Y+5	; 0x05
     762:	42 30       	cpi	r20, 0x02	; 2
     764:	51 05       	cpc	r21, r1
     766:	61 f1       	breq	.+88     	; 0x7c0 <DIO_GetInputPinValue+0xae>
     768:	8c 81       	ldd	r24, Y+4	; 0x04
     76a:	9d 81       	ldd	r25, Y+5	; 0x05
     76c:	83 30       	cpi	r24, 0x03	; 3
     76e:	91 05       	cpc	r25, r1
     770:	d1 f1       	breq	.+116    	; 0x7e6 <DIO_GetInputPinValue+0xd4>
     772:	4c c0       	rjmp	.+152    	; 0x80c <DIO_GetInputPinValue+0xfa>
		{
			case DIO_PORTA: return GET_BIT(PINA,U8PinIdCopy); break;
     774:	e9 e3       	ldi	r30, 0x39	; 57
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	28 2f       	mov	r18, r24
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	8a 81       	ldd	r24, Y+2	; 0x02
     780:	88 2f       	mov	r24, r24
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	a9 01       	movw	r20, r18
     786:	02 c0       	rjmp	.+4      	; 0x78c <DIO_GetInputPinValue+0x7a>
     788:	55 95       	asr	r21
     78a:	47 95       	ror	r20
     78c:	8a 95       	dec	r24
     78e:	e2 f7       	brpl	.-8      	; 0x788 <DIO_GetInputPinValue+0x76>
     790:	ca 01       	movw	r24, r20
     792:	58 2f       	mov	r21, r24
     794:	51 70       	andi	r21, 0x01	; 1
     796:	5b 83       	std	Y+3, r21	; 0x03
     798:	3b c0       	rjmp	.+118    	; 0x810 <DIO_GetInputPinValue+0xfe>
			case DIO_PORTB: return GET_BIT(PINB,U8PinIdCopy); break;
     79a:	e6 e3       	ldi	r30, 0x36	; 54
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	28 2f       	mov	r18, r24
     7a2:	30 e0       	ldi	r19, 0x00	; 0
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	88 2f       	mov	r24, r24
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	a9 01       	movw	r20, r18
     7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <DIO_GetInputPinValue+0xa0>
     7ae:	55 95       	asr	r21
     7b0:	47 95       	ror	r20
     7b2:	8a 95       	dec	r24
     7b4:	e2 f7       	brpl	.-8      	; 0x7ae <DIO_GetInputPinValue+0x9c>
     7b6:	ca 01       	movw	r24, r20
     7b8:	58 2f       	mov	r21, r24
     7ba:	51 70       	andi	r21, 0x01	; 1
     7bc:	5b 83       	std	Y+3, r21	; 0x03
     7be:	28 c0       	rjmp	.+80     	; 0x810 <DIO_GetInputPinValue+0xfe>
			case DIO_PORTC: return GET_BIT(PINC,U8PinIdCopy); break;
     7c0:	e3 e3       	ldi	r30, 0x33	; 51
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	28 2f       	mov	r18, r24
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	8a 81       	ldd	r24, Y+2	; 0x02
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	a9 01       	movw	r20, r18
     7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_GetInputPinValue+0xc6>
     7d4:	55 95       	asr	r21
     7d6:	47 95       	ror	r20
     7d8:	8a 95       	dec	r24
     7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_GetInputPinValue+0xc2>
     7dc:	ca 01       	movw	r24, r20
     7de:	58 2f       	mov	r21, r24
     7e0:	51 70       	andi	r21, 0x01	; 1
     7e2:	5b 83       	std	Y+3, r21	; 0x03
     7e4:	15 c0       	rjmp	.+42     	; 0x810 <DIO_GetInputPinValue+0xfe>
			case DIO_PORTD: return GET_BIT(PIND,U8PinIdCopy); break;
     7e6:	e0 e3       	ldi	r30, 0x30	; 48
     7e8:	f0 e0       	ldi	r31, 0x00	; 0
     7ea:	80 81       	ld	r24, Z
     7ec:	28 2f       	mov	r18, r24
     7ee:	30 e0       	ldi	r19, 0x00	; 0
     7f0:	8a 81       	ldd	r24, Y+2	; 0x02
     7f2:	88 2f       	mov	r24, r24
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	a9 01       	movw	r20, r18
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <DIO_GetInputPinValue+0xec>
     7fa:	55 95       	asr	r21
     7fc:	47 95       	ror	r20
     7fe:	8a 95       	dec	r24
     800:	e2 f7       	brpl	.-8      	; 0x7fa <DIO_GetInputPinValue+0xe8>
     802:	ca 01       	movw	r24, r20
     804:	58 2f       	mov	r21, r24
     806:	51 70       	andi	r21, 0x01	; 1
     808:	5b 83       	std	Y+3, r21	; 0x03
     80a:	02 c0       	rjmp	.+4      	; 0x810 <DIO_GetInputPinValue+0xfe>
		}
	}
	return 0xFF;
     80c:	8f ef       	ldi	r24, 0xFF	; 255
     80e:	8b 83       	std	Y+3, r24	; 0x03
     810:	8b 81       	ldd	r24, Y+3	; 0x03
}
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	cf 91       	pop	r28
     81e:	df 91       	pop	r29
     820:	08 95       	ret

00000822 <DIO_TogglePinValue>:




void DIO_TogglePinValue(u8 U8PortIdCopy,u8 U8PinIdCopy)
{
     822:	df 93       	push	r29
     824:	cf 93       	push	r28
     826:	00 d0       	rcall	.+0      	; 0x828 <DIO_TogglePinValue+0x6>
     828:	00 d0       	rcall	.+0      	; 0x82a <DIO_TogglePinValue+0x8>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	89 83       	std	Y+1, r24	; 0x01
     830:	6a 83       	std	Y+2, r22	; 0x02
	//u8 PortValue;
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
     832:	89 81       	ldd	r24, Y+1	; 0x01
     834:	84 30       	cpi	r24, 0x04	; 4
     836:	08 f0       	brcs	.+2      	; 0x83a <DIO_TogglePinValue+0x18>
     838:	72 c0       	rjmp	.+228    	; 0x91e <__stack+0xbf>
     83a:	8a 81       	ldd	r24, Y+2	; 0x02
     83c:	88 30       	cpi	r24, 0x08	; 8
     83e:	08 f0       	brcs	.+2      	; 0x842 <DIO_TogglePinValue+0x20>
     840:	6e c0       	rjmp	.+220    	; 0x91e <__stack+0xbf>
	{
		//PortValue = DIO_GetPortValue(U8PortIdCopy);
		switch(U8PortIdCopy)
     842:	89 81       	ldd	r24, Y+1	; 0x01
     844:	28 2f       	mov	r18, r24
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	3c 83       	std	Y+4, r19	; 0x04
     84a:	2b 83       	std	Y+3, r18	; 0x03
     84c:	8b 81       	ldd	r24, Y+3	; 0x03
     84e:	9c 81       	ldd	r25, Y+4	; 0x04
     850:	81 30       	cpi	r24, 0x01	; 1
     852:	91 05       	cpc	r25, r1
     854:	49 f1       	breq	.+82     	; 0x8a8 <__stack+0x49>
     856:	2b 81       	ldd	r18, Y+3	; 0x03
     858:	3c 81       	ldd	r19, Y+4	; 0x04
     85a:	22 30       	cpi	r18, 0x02	; 2
     85c:	31 05       	cpc	r19, r1
     85e:	2c f4       	brge	.+10     	; 0x86a <__stack+0xb>
     860:	8b 81       	ldd	r24, Y+3	; 0x03
     862:	9c 81       	ldd	r25, Y+4	; 0x04
     864:	00 97       	sbiw	r24, 0x00	; 0
     866:	61 f0       	breq	.+24     	; 0x880 <__stack+0x21>
     868:	5a c0       	rjmp	.+180    	; 0x91e <__stack+0xbf>
     86a:	2b 81       	ldd	r18, Y+3	; 0x03
     86c:	3c 81       	ldd	r19, Y+4	; 0x04
     86e:	22 30       	cpi	r18, 0x02	; 2
     870:	31 05       	cpc	r19, r1
     872:	71 f1       	breq	.+92     	; 0x8d0 <__stack+0x71>
     874:	8b 81       	ldd	r24, Y+3	; 0x03
     876:	9c 81       	ldd	r25, Y+4	; 0x04
     878:	83 30       	cpi	r24, 0x03	; 3
     87a:	91 05       	cpc	r25, r1
     87c:	e9 f1       	breq	.+122    	; 0x8f8 <__stack+0x99>
     87e:	4f c0       	rjmp	.+158    	; 0x91e <__stack+0xbf>
		{
			case DIO_PORTA:TOG_BIT(PORTA,U8PinIdCopy); break;
     880:	ab e3       	ldi	r26, 0x3B	; 59
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	eb e3       	ldi	r30, 0x3B	; 59
     886:	f0 e0       	ldi	r31, 0x00	; 0
     888:	80 81       	ld	r24, Z
     88a:	48 2f       	mov	r20, r24
     88c:	8a 81       	ldd	r24, Y+2	; 0x02
     88e:	28 2f       	mov	r18, r24
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	81 e0       	ldi	r24, 0x01	; 1
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	02 2e       	mov	r0, r18
     898:	02 c0       	rjmp	.+4      	; 0x89e <__stack+0x3f>
     89a:	88 0f       	add	r24, r24
     89c:	99 1f       	adc	r25, r25
     89e:	0a 94       	dec	r0
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <__stack+0x3b>
     8a2:	84 27       	eor	r24, r20
     8a4:	8c 93       	st	X, r24
     8a6:	3b c0       	rjmp	.+118    	; 0x91e <__stack+0xbf>
			case DIO_PORTB:TOG_BIT(PORTB,U8PinIdCopy); break;
     8a8:	a8 e3       	ldi	r26, 0x38	; 56
     8aa:	b0 e0       	ldi	r27, 0x00	; 0
     8ac:	e8 e3       	ldi	r30, 0x38	; 56
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	80 81       	ld	r24, Z
     8b2:	48 2f       	mov	r20, r24
     8b4:	8a 81       	ldd	r24, Y+2	; 0x02
     8b6:	28 2f       	mov	r18, r24
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	02 2e       	mov	r0, r18
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
     8c2:	88 0f       	add	r24, r24
     8c4:	99 1f       	adc	r25, r25
     8c6:	0a 94       	dec	r0
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
     8ca:	84 27       	eor	r24, r20
     8cc:	8c 93       	st	X, r24
     8ce:	27 c0       	rjmp	.+78     	; 0x91e <__stack+0xbf>
			case DIO_PORTC:TOG_BIT(PORTC,U8PinIdCopy); break;
     8d0:	a5 e3       	ldi	r26, 0x35	; 53
     8d2:	b0 e0       	ldi	r27, 0x00	; 0
     8d4:	e5 e3       	ldi	r30, 0x35	; 53
     8d6:	f0 e0       	ldi	r31, 0x00	; 0
     8d8:	80 81       	ld	r24, Z
     8da:	48 2f       	mov	r20, r24
     8dc:	8a 81       	ldd	r24, Y+2	; 0x02
     8de:	28 2f       	mov	r18, r24
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	81 e0       	ldi	r24, 0x01	; 1
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	02 2e       	mov	r0, r18
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
     8ea:	88 0f       	add	r24, r24
     8ec:	99 1f       	adc	r25, r25
     8ee:	0a 94       	dec	r0
     8f0:	e2 f7       	brpl	.-8      	; 0x8ea <__stack+0x8b>
     8f2:	84 27       	eor	r24, r20
     8f4:	8c 93       	st	X, r24
     8f6:	13 c0       	rjmp	.+38     	; 0x91e <__stack+0xbf>
			case DIO_PORTD:TOG_BIT(PORTD,U8PinIdCopy); break;
     8f8:	a2 e3       	ldi	r26, 0x32	; 50
     8fa:	b0 e0       	ldi	r27, 0x00	; 0
     8fc:	e2 e3       	ldi	r30, 0x32	; 50
     8fe:	f0 e0       	ldi	r31, 0x00	; 0
     900:	80 81       	ld	r24, Z
     902:	48 2f       	mov	r20, r24
     904:	8a 81       	ldd	r24, Y+2	; 0x02
     906:	28 2f       	mov	r18, r24
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	81 e0       	ldi	r24, 0x01	; 1
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	02 2e       	mov	r0, r18
     910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0xb7>
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	0a 94       	dec	r0
     918:	e2 f7       	brpl	.-8      	; 0x912 <__stack+0xb3>
     91a:	84 27       	eor	r24, r20
     91c:	8c 93       	st	X, r24
		}
	//	DIO_SetPortValue(U8PortIdCopy,PortValue);
	}
}
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	cf 91       	pop	r28
     928:	df 91       	pop	r29
     92a:	08 95       	ret

0000092c <DIO_SetWordValue>:


void DIO_SetWordValue(u8 U8PortIdCopy,u8 U8FirstPinIdCopy,u8 U8WordValueCopy)
{
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
     934:	27 97       	sbiw	r28, 0x07	; 7
     936:	0f b6       	in	r0, 0x3f	; 63
     938:	f8 94       	cli
     93a:	de bf       	out	0x3e, r29	; 62
     93c:	0f be       	out	0x3f, r0	; 63
     93e:	cd bf       	out	0x3d, r28	; 61
     940:	8b 83       	std	Y+3, r24	; 0x03
     942:	6c 83       	std	Y+4, r22	; 0x04
     944:	4d 83       	std	Y+5, r20	; 0x05

	if ( (U8PortIdCopy <= DIO_PORTD) && (U8FirstPinIdCopy<(DIO_BYTE-DIO_WORD)) )
     946:	8b 81       	ldd	r24, Y+3	; 0x03
     948:	84 30       	cpi	r24, 0x04	; 4
     94a:	08 f0       	brcs	.+2      	; 0x94e <DIO_SetWordValue+0x22>
     94c:	17 c1       	rjmp	.+558    	; 0xb7c <DIO_SetWordValue+0x250>
     94e:	8c 81       	ldd	r24, Y+4	; 0x04
     950:	84 30       	cpi	r24, 0x04	; 4
     952:	08 f0       	brcs	.+2      	; 0x956 <DIO_SetWordValue+0x2a>
     954:	13 c1       	rjmp	.+550    	; 0xb7c <DIO_SetWordValue+0x250>
		{
			u8 tempWordVal,WordBit=0;
     956:	19 82       	std	Y+1, r1	; 0x01
			for(WordBit=0;WordBit<DIO_WORD;WordBit++)
     958:	19 82       	std	Y+1, r1	; 0x01
     95a:	0c c1       	rjmp	.+536    	; 0xb74 <DIO_SetWordValue+0x248>
			{
				tempWordVal=GET_BIT(U8WordValueCopy,U8FirstPinIdCopy);
     95c:	8d 81       	ldd	r24, Y+5	; 0x05
     95e:	28 2f       	mov	r18, r24
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	8c 81       	ldd	r24, Y+4	; 0x04
     964:	88 2f       	mov	r24, r24
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	a9 01       	movw	r20, r18
     96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_SetWordValue+0x44>
     96c:	55 95       	asr	r21
     96e:	47 95       	ror	r20
     970:	8a 95       	dec	r24
     972:	e2 f7       	brpl	.-8      	; 0x96c <DIO_SetWordValue+0x40>
     974:	ca 01       	movw	r24, r20
     976:	81 70       	andi	r24, 0x01	; 1
     978:	8a 83       	std	Y+2, r24	; 0x02

				switch(U8PortIdCopy)
     97a:	8b 81       	ldd	r24, Y+3	; 0x03
     97c:	28 2f       	mov	r18, r24
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	3f 83       	std	Y+7, r19	; 0x07
     982:	2e 83       	std	Y+6, r18	; 0x06
     984:	4e 81       	ldd	r20, Y+6	; 0x06
     986:	5f 81       	ldd	r21, Y+7	; 0x07
     988:	41 30       	cpi	r20, 0x01	; 1
     98a:	51 05       	cpc	r21, r1
     98c:	09 f4       	brne	.+2      	; 0x990 <DIO_SetWordValue+0x64>
     98e:	4e c0       	rjmp	.+156    	; 0xa2c <DIO_SetWordValue+0x100>
     990:	8e 81       	ldd	r24, Y+6	; 0x06
     992:	9f 81       	ldd	r25, Y+7	; 0x07
     994:	82 30       	cpi	r24, 0x02	; 2
     996:	91 05       	cpc	r25, r1
     998:	34 f4       	brge	.+12     	; 0x9a6 <DIO_SetWordValue+0x7a>
     99a:	2e 81       	ldd	r18, Y+6	; 0x06
     99c:	3f 81       	ldd	r19, Y+7	; 0x07
     99e:	21 15       	cp	r18, r1
     9a0:	31 05       	cpc	r19, r1
     9a2:	71 f0       	breq	.+28     	; 0x9c0 <DIO_SetWordValue+0x94>
     9a4:	e4 c0       	rjmp	.+456    	; 0xb6e <DIO_SetWordValue+0x242>
     9a6:	4e 81       	ldd	r20, Y+6	; 0x06
     9a8:	5f 81       	ldd	r21, Y+7	; 0x07
     9aa:	42 30       	cpi	r20, 0x02	; 2
     9ac:	51 05       	cpc	r21, r1
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <DIO_SetWordValue+0x86>
     9b0:	73 c0       	rjmp	.+230    	; 0xa98 <DIO_SetWordValue+0x16c>
     9b2:	8e 81       	ldd	r24, Y+6	; 0x06
     9b4:	9f 81       	ldd	r25, Y+7	; 0x07
     9b6:	83 30       	cpi	r24, 0x03	; 3
     9b8:	91 05       	cpc	r25, r1
     9ba:	09 f4       	brne	.+2      	; 0x9be <DIO_SetWordValue+0x92>
     9bc:	a3 c0       	rjmp	.+326    	; 0xb04 <DIO_SetWordValue+0x1d8>
     9be:	d7 c0       	rjmp	.+430    	; 0xb6e <DIO_SetWordValue+0x242>
				{
					case DIO_PORTA: {
						if(tempWordVal)
     9c0:	8a 81       	ldd	r24, Y+2	; 0x02
     9c2:	88 23       	and	r24, r24
     9c4:	c9 f0       	breq	.+50     	; 0x9f8 <DIO_SetWordValue+0xcc>
							SET_BIT(PORTA,(U8FirstPinIdCopy+WordBit));
     9c6:	ab e3       	ldi	r26, 0x3B	; 59
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	eb e3       	ldi	r30, 0x3B	; 59
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	80 81       	ld	r24, Z
     9d0:	48 2f       	mov	r20, r24
     9d2:	8c 81       	ldd	r24, Y+4	; 0x04
     9d4:	28 2f       	mov	r18, r24
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	89 81       	ldd	r24, Y+1	; 0x01
     9da:	88 2f       	mov	r24, r24
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	28 0f       	add	r18, r24
     9e0:	39 1f       	adc	r19, r25
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	02 2e       	mov	r0, r18
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <DIO_SetWordValue+0xc2>
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	0a 94       	dec	r0
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <DIO_SetWordValue+0xbe>
     9f2:	84 2b       	or	r24, r20
     9f4:	8c 93       	st	X, r24
     9f6:	bb c0       	rjmp	.+374    	; 0xb6e <DIO_SetWordValue+0x242>
						else
							CLR_BIT(PORTA,(U8FirstPinIdCopy+WordBit));
     9f8:	ab e3       	ldi	r26, 0x3B	; 59
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	eb e3       	ldi	r30, 0x3B	; 59
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	48 2f       	mov	r20, r24
     a04:	8c 81       	ldd	r24, Y+4	; 0x04
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	89 81       	ldd	r24, Y+1	; 0x01
     a0c:	88 2f       	mov	r24, r24
     a0e:	90 e0       	ldi	r25, 0x00	; 0
     a10:	28 0f       	add	r18, r24
     a12:	39 1f       	adc	r19, r25
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	02 2e       	mov	r0, r18
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <DIO_SetWordValue+0xf4>
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	0a 94       	dec	r0
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <DIO_SetWordValue+0xf0>
     a24:	80 95       	com	r24
     a26:	84 23       	and	r24, r20
     a28:	8c 93       	st	X, r24
     a2a:	a1 c0       	rjmp	.+322    	; 0xb6e <DIO_SetWordValue+0x242>
					}break;
					case DIO_PORTB: {
						if(tempWordVal)
     a2c:	8a 81       	ldd	r24, Y+2	; 0x02
     a2e:	88 23       	and	r24, r24
     a30:	c9 f0       	breq	.+50     	; 0xa64 <DIO_SetWordValue+0x138>
							SET_BIT(PORTB,(U8FirstPinIdCopy+WordBit));
     a32:	a8 e3       	ldi	r26, 0x38	; 56
     a34:	b0 e0       	ldi	r27, 0x00	; 0
     a36:	e8 e3       	ldi	r30, 0x38	; 56
     a38:	f0 e0       	ldi	r31, 0x00	; 0
     a3a:	80 81       	ld	r24, Z
     a3c:	48 2f       	mov	r20, r24
     a3e:	8c 81       	ldd	r24, Y+4	; 0x04
     a40:	28 2f       	mov	r18, r24
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	88 2f       	mov	r24, r24
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	28 0f       	add	r18, r24
     a4c:	39 1f       	adc	r19, r25
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	02 2e       	mov	r0, r18
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <DIO_SetWordValue+0x12e>
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	0a 94       	dec	r0
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <DIO_SetWordValue+0x12a>
     a5e:	84 2b       	or	r24, r20
     a60:	8c 93       	st	X, r24
     a62:	85 c0       	rjmp	.+266    	; 0xb6e <DIO_SetWordValue+0x242>
						else
							CLR_BIT(PORTB,(U8FirstPinIdCopy+WordBit));
     a64:	a8 e3       	ldi	r26, 0x38	; 56
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	e8 e3       	ldi	r30, 0x38	; 56
     a6a:	f0 e0       	ldi	r31, 0x00	; 0
     a6c:	80 81       	ld	r24, Z
     a6e:	48 2f       	mov	r20, r24
     a70:	8c 81       	ldd	r24, Y+4	; 0x04
     a72:	28 2f       	mov	r18, r24
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	89 81       	ldd	r24, Y+1	; 0x01
     a78:	88 2f       	mov	r24, r24
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	28 0f       	add	r18, r24
     a7e:	39 1f       	adc	r19, r25
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	02 2e       	mov	r0, r18
     a86:	02 c0       	rjmp	.+4      	; 0xa8c <DIO_SetWordValue+0x160>
     a88:	88 0f       	add	r24, r24
     a8a:	99 1f       	adc	r25, r25
     a8c:	0a 94       	dec	r0
     a8e:	e2 f7       	brpl	.-8      	; 0xa88 <DIO_SetWordValue+0x15c>
     a90:	80 95       	com	r24
     a92:	84 23       	and	r24, r20
     a94:	8c 93       	st	X, r24
     a96:	6b c0       	rjmp	.+214    	; 0xb6e <DIO_SetWordValue+0x242>
					}break;
					case DIO_PORTC: {
						if(tempWordVal)
     a98:	8a 81       	ldd	r24, Y+2	; 0x02
     a9a:	88 23       	and	r24, r24
     a9c:	c9 f0       	breq	.+50     	; 0xad0 <DIO_SetWordValue+0x1a4>
							SET_BIT(PORTC,(U8FirstPinIdCopy+WordBit));
     a9e:	a5 e3       	ldi	r26, 0x35	; 53
     aa0:	b0 e0       	ldi	r27, 0x00	; 0
     aa2:	e5 e3       	ldi	r30, 0x35	; 53
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	80 81       	ld	r24, Z
     aa8:	48 2f       	mov	r20, r24
     aaa:	8c 81       	ldd	r24, Y+4	; 0x04
     aac:	28 2f       	mov	r18, r24
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
     ab2:	88 2f       	mov	r24, r24
     ab4:	90 e0       	ldi	r25, 0x00	; 0
     ab6:	28 0f       	add	r18, r24
     ab8:	39 1f       	adc	r19, r25
     aba:	81 e0       	ldi	r24, 0x01	; 1
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	02 2e       	mov	r0, r18
     ac0:	02 c0       	rjmp	.+4      	; 0xac6 <DIO_SetWordValue+0x19a>
     ac2:	88 0f       	add	r24, r24
     ac4:	99 1f       	adc	r25, r25
     ac6:	0a 94       	dec	r0
     ac8:	e2 f7       	brpl	.-8      	; 0xac2 <DIO_SetWordValue+0x196>
     aca:	84 2b       	or	r24, r20
     acc:	8c 93       	st	X, r24
     ace:	4f c0       	rjmp	.+158    	; 0xb6e <DIO_SetWordValue+0x242>
						else
							CLR_BIT(PORTC,(U8FirstPinIdCopy+WordBit));
     ad0:	a5 e3       	ldi	r26, 0x35	; 53
     ad2:	b0 e0       	ldi	r27, 0x00	; 0
     ad4:	e5 e3       	ldi	r30, 0x35	; 53
     ad6:	f0 e0       	ldi	r31, 0x00	; 0
     ad8:	80 81       	ld	r24, Z
     ada:	48 2f       	mov	r20, r24
     adc:	8c 81       	ldd	r24, Y+4	; 0x04
     ade:	28 2f       	mov	r18, r24
     ae0:	30 e0       	ldi	r19, 0x00	; 0
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	88 2f       	mov	r24, r24
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	28 0f       	add	r18, r24
     aea:	39 1f       	adc	r19, r25
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	02 2e       	mov	r0, r18
     af2:	02 c0       	rjmp	.+4      	; 0xaf8 <DIO_SetWordValue+0x1cc>
     af4:	88 0f       	add	r24, r24
     af6:	99 1f       	adc	r25, r25
     af8:	0a 94       	dec	r0
     afa:	e2 f7       	brpl	.-8      	; 0xaf4 <DIO_SetWordValue+0x1c8>
     afc:	80 95       	com	r24
     afe:	84 23       	and	r24, r20
     b00:	8c 93       	st	X, r24
     b02:	35 c0       	rjmp	.+106    	; 0xb6e <DIO_SetWordValue+0x242>
					}break;
					case DIO_PORTD: {
						if(tempWordVal)
     b04:	8a 81       	ldd	r24, Y+2	; 0x02
     b06:	88 23       	and	r24, r24
     b08:	c9 f0       	breq	.+50     	; 0xb3c <DIO_SetWordValue+0x210>
							SET_BIT(PORTD,(U8FirstPinIdCopy+WordBit));
     b0a:	a2 e3       	ldi	r26, 0x32	; 50
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	e2 e3       	ldi	r30, 0x32	; 50
     b10:	f0 e0       	ldi	r31, 0x00	; 0
     b12:	80 81       	ld	r24, Z
     b14:	48 2f       	mov	r20, r24
     b16:	8c 81       	ldd	r24, Y+4	; 0x04
     b18:	28 2f       	mov	r18, r24
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	88 2f       	mov	r24, r24
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	28 0f       	add	r18, r24
     b24:	39 1f       	adc	r19, r25
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	02 2e       	mov	r0, r18
     b2c:	02 c0       	rjmp	.+4      	; 0xb32 <DIO_SetWordValue+0x206>
     b2e:	88 0f       	add	r24, r24
     b30:	99 1f       	adc	r25, r25
     b32:	0a 94       	dec	r0
     b34:	e2 f7       	brpl	.-8      	; 0xb2e <DIO_SetWordValue+0x202>
     b36:	84 2b       	or	r24, r20
     b38:	8c 93       	st	X, r24
     b3a:	19 c0       	rjmp	.+50     	; 0xb6e <DIO_SetWordValue+0x242>
						else
							CLR_BIT(PORTD,(U8FirstPinIdCopy+WordBit));
     b3c:	a2 e3       	ldi	r26, 0x32	; 50
     b3e:	b0 e0       	ldi	r27, 0x00	; 0
     b40:	e2 e3       	ldi	r30, 0x32	; 50
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	80 81       	ld	r24, Z
     b46:	48 2f       	mov	r20, r24
     b48:	8c 81       	ldd	r24, Y+4	; 0x04
     b4a:	28 2f       	mov	r18, r24
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	88 2f       	mov	r24, r24
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	28 0f       	add	r18, r24
     b56:	39 1f       	adc	r19, r25
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	02 2e       	mov	r0, r18
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <DIO_SetWordValue+0x238>
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	0a 94       	dec	r0
     b66:	e2 f7       	brpl	.-8      	; 0xb60 <DIO_SetWordValue+0x234>
     b68:	80 95       	com	r24
     b6a:	84 23       	and	r24, r20
     b6c:	8c 93       	st	X, r24
{

	if ( (U8PortIdCopy <= DIO_PORTD) && (U8FirstPinIdCopy<(DIO_BYTE-DIO_WORD)) )
		{
			u8 tempWordVal,WordBit=0;
			for(WordBit=0;WordBit<DIO_WORD;WordBit++)
     b6e:	89 81       	ldd	r24, Y+1	; 0x01
     b70:	8f 5f       	subi	r24, 0xFF	; 255
     b72:	89 83       	std	Y+1, r24	; 0x01
     b74:	89 81       	ldd	r24, Y+1	; 0x01
     b76:	84 30       	cpi	r24, 0x04	; 4
     b78:	08 f4       	brcc	.+2      	; 0xb7c <DIO_SetWordValue+0x250>
     b7a:	f0 ce       	rjmp	.-544    	; 0x95c <DIO_SetWordValue+0x30>
					}break;
				}

			}
		}
}
     b7c:	27 96       	adiw	r28, 0x07	; 7
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	de bf       	out	0x3e, r29	; 62
     b84:	0f be       	out	0x3f, r0	; 63
     b86:	cd bf       	out	0x3d, r28	; 61
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	08 95       	ret

00000b8e <DIO_SetWordDirection>:

void DIO_SetWordDirection(u8 U8PortIdCopy,u8 U8FirstPinIdCopy,u8 U8WordDirCopy)
{
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	27 97       	sbiw	r28, 0x07	; 7
     b98:	0f b6       	in	r0, 0x3f	; 63
     b9a:	f8 94       	cli
     b9c:	de bf       	out	0x3e, r29	; 62
     b9e:	0f be       	out	0x3f, r0	; 63
     ba0:	cd bf       	out	0x3d, r28	; 61
     ba2:	8b 83       	std	Y+3, r24	; 0x03
     ba4:	6c 83       	std	Y+4, r22	; 0x04
     ba6:	4d 83       	std	Y+5, r20	; 0x05

	if ( (U8PortIdCopy <= DIO_PORTD) && (U8FirstPinIdCopy<=(DIO_BYTE-DIO_WORD)) )
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	84 30       	cpi	r24, 0x04	; 4
     bac:	08 f0       	brcs	.+2      	; 0xbb0 <DIO_SetWordDirection+0x22>
     bae:	17 c1       	rjmp	.+558    	; 0xdde <DIO_SetWordDirection+0x250>
     bb0:	8c 81       	ldd	r24, Y+4	; 0x04
     bb2:	85 30       	cpi	r24, 0x05	; 5
     bb4:	08 f0       	brcs	.+2      	; 0xbb8 <DIO_SetWordDirection+0x2a>
     bb6:	13 c1       	rjmp	.+550    	; 0xdde <DIO_SetWordDirection+0x250>
		{
			u8 tempWordDirect,WordBit=0;
     bb8:	19 82       	std	Y+1, r1	; 0x01
			for(WordBit=0;WordBit<DIO_WORD;WordBit++)
     bba:	19 82       	std	Y+1, r1	; 0x01
     bbc:	0c c1       	rjmp	.+536    	; 0xdd6 <DIO_SetWordDirection+0x248>
			{
				tempWordDirect=GET_BIT(U8WordDirCopy,WordBit);
     bbe:	8d 81       	ldd	r24, Y+5	; 0x05
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	88 2f       	mov	r24, r24
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	a9 01       	movw	r20, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <DIO_SetWordDirection+0x44>
     bce:	55 95       	asr	r21
     bd0:	47 95       	ror	r20
     bd2:	8a 95       	dec	r24
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <DIO_SetWordDirection+0x40>
     bd6:	ca 01       	movw	r24, r20
     bd8:	81 70       	andi	r24, 0x01	; 1
     bda:	8a 83       	std	Y+2, r24	; 0x02
				switch(U8PortIdCopy)
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	3f 83       	std	Y+7, r19	; 0x07
     be4:	2e 83       	std	Y+6, r18	; 0x06
     be6:	4e 81       	ldd	r20, Y+6	; 0x06
     be8:	5f 81       	ldd	r21, Y+7	; 0x07
     bea:	41 30       	cpi	r20, 0x01	; 1
     bec:	51 05       	cpc	r21, r1
     bee:	09 f4       	brne	.+2      	; 0xbf2 <DIO_SetWordDirection+0x64>
     bf0:	4e c0       	rjmp	.+156    	; 0xc8e <DIO_SetWordDirection+0x100>
     bf2:	8e 81       	ldd	r24, Y+6	; 0x06
     bf4:	9f 81       	ldd	r25, Y+7	; 0x07
     bf6:	82 30       	cpi	r24, 0x02	; 2
     bf8:	91 05       	cpc	r25, r1
     bfa:	34 f4       	brge	.+12     	; 0xc08 <DIO_SetWordDirection+0x7a>
     bfc:	2e 81       	ldd	r18, Y+6	; 0x06
     bfe:	3f 81       	ldd	r19, Y+7	; 0x07
     c00:	21 15       	cp	r18, r1
     c02:	31 05       	cpc	r19, r1
     c04:	71 f0       	breq	.+28     	; 0xc22 <DIO_SetWordDirection+0x94>
     c06:	e4 c0       	rjmp	.+456    	; 0xdd0 <DIO_SetWordDirection+0x242>
     c08:	4e 81       	ldd	r20, Y+6	; 0x06
     c0a:	5f 81       	ldd	r21, Y+7	; 0x07
     c0c:	42 30       	cpi	r20, 0x02	; 2
     c0e:	51 05       	cpc	r21, r1
     c10:	09 f4       	brne	.+2      	; 0xc14 <DIO_SetWordDirection+0x86>
     c12:	73 c0       	rjmp	.+230    	; 0xcfa <DIO_SetWordDirection+0x16c>
     c14:	8e 81       	ldd	r24, Y+6	; 0x06
     c16:	9f 81       	ldd	r25, Y+7	; 0x07
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	91 05       	cpc	r25, r1
     c1c:	09 f4       	brne	.+2      	; 0xc20 <DIO_SetWordDirection+0x92>
     c1e:	a3 c0       	rjmp	.+326    	; 0xd66 <DIO_SetWordDirection+0x1d8>
     c20:	d7 c0       	rjmp	.+430    	; 0xdd0 <DIO_SetWordDirection+0x242>
				{
					case DIO_PORTA: {
						if(tempWordDirect)
     c22:	8a 81       	ldd	r24, Y+2	; 0x02
     c24:	88 23       	and	r24, r24
     c26:	c9 f0       	breq	.+50     	; 0xc5a <DIO_SetWordDirection+0xcc>
							SET_BIT(DDRA,(U8FirstPinIdCopy+WordBit));
     c28:	aa e3       	ldi	r26, 0x3A	; 58
     c2a:	b0 e0       	ldi	r27, 0x00	; 0
     c2c:	ea e3       	ldi	r30, 0x3A	; 58
     c2e:	f0 e0       	ldi	r31, 0x00	; 0
     c30:	80 81       	ld	r24, Z
     c32:	48 2f       	mov	r20, r24
     c34:	8c 81       	ldd	r24, Y+4	; 0x04
     c36:	28 2f       	mov	r18, r24
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	89 81       	ldd	r24, Y+1	; 0x01
     c3c:	88 2f       	mov	r24, r24
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	28 0f       	add	r18, r24
     c42:	39 1f       	adc	r19, r25
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	02 2e       	mov	r0, r18
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <DIO_SetWordDirection+0xc2>
     c4c:	88 0f       	add	r24, r24
     c4e:	99 1f       	adc	r25, r25
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <DIO_SetWordDirection+0xbe>
     c54:	84 2b       	or	r24, r20
     c56:	8c 93       	st	X, r24
     c58:	bb c0       	rjmp	.+374    	; 0xdd0 <DIO_SetWordDirection+0x242>
						else
							CLR_BIT(DDRA,(U8FirstPinIdCopy+WordBit));
     c5a:	aa e3       	ldi	r26, 0x3A	; 58
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	ea e3       	ldi	r30, 0x3A	; 58
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	80 81       	ld	r24, Z
     c64:	48 2f       	mov	r20, r24
     c66:	8c 81       	ldd	r24, Y+4	; 0x04
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	88 2f       	mov	r24, r24
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	28 0f       	add	r18, r24
     c74:	39 1f       	adc	r19, r25
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <DIO_SetWordDirection+0xf4>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <DIO_SetWordDirection+0xf0>
     c86:	80 95       	com	r24
     c88:	84 23       	and	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	a1 c0       	rjmp	.+322    	; 0xdd0 <DIO_SetWordDirection+0x242>
					}break;
					case DIO_PORTB: {
						if(tempWordDirect)
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	88 23       	and	r24, r24
     c92:	c9 f0       	breq	.+50     	; 0xcc6 <DIO_SetWordDirection+0x138>
							SET_BIT(DDRB,(U8FirstPinIdCopy+WordBit));
     c94:	a7 e3       	ldi	r26, 0x37	; 55
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	e7 e3       	ldi	r30, 0x37	; 55
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	48 2f       	mov	r20, r24
     ca0:	8c 81       	ldd	r24, Y+4	; 0x04
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	88 2f       	mov	r24, r24
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	28 0f       	add	r18, r24
     cae:	39 1f       	adc	r19, r25
     cb0:	81 e0       	ldi	r24, 0x01	; 1
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	02 2e       	mov	r0, r18
     cb6:	02 c0       	rjmp	.+4      	; 0xcbc <DIO_SetWordDirection+0x12e>
     cb8:	88 0f       	add	r24, r24
     cba:	99 1f       	adc	r25, r25
     cbc:	0a 94       	dec	r0
     cbe:	e2 f7       	brpl	.-8      	; 0xcb8 <DIO_SetWordDirection+0x12a>
     cc0:	84 2b       	or	r24, r20
     cc2:	8c 93       	st	X, r24
     cc4:	85 c0       	rjmp	.+266    	; 0xdd0 <DIO_SetWordDirection+0x242>
						else
							CLR_BIT(DDRB,(U8FirstPinIdCopy+WordBit));
     cc6:	a7 e3       	ldi	r26, 0x37	; 55
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e7 e3       	ldi	r30, 0x37	; 55
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	48 2f       	mov	r20, r24
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
     cd4:	28 2f       	mov	r18, r24
     cd6:	30 e0       	ldi	r19, 0x00	; 0
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	88 2f       	mov	r24, r24
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	28 0f       	add	r18, r24
     ce0:	39 1f       	adc	r19, r25
     ce2:	81 e0       	ldi	r24, 0x01	; 1
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	02 2e       	mov	r0, r18
     ce8:	02 c0       	rjmp	.+4      	; 0xcee <DIO_SetWordDirection+0x160>
     cea:	88 0f       	add	r24, r24
     cec:	99 1f       	adc	r25, r25
     cee:	0a 94       	dec	r0
     cf0:	e2 f7       	brpl	.-8      	; 0xcea <DIO_SetWordDirection+0x15c>
     cf2:	80 95       	com	r24
     cf4:	84 23       	and	r24, r20
     cf6:	8c 93       	st	X, r24
     cf8:	6b c0       	rjmp	.+214    	; 0xdd0 <DIO_SetWordDirection+0x242>
					}break;
					case DIO_PORTC: {
						if(tempWordDirect)
     cfa:	8a 81       	ldd	r24, Y+2	; 0x02
     cfc:	88 23       	and	r24, r24
     cfe:	c9 f0       	breq	.+50     	; 0xd32 <DIO_SetWordDirection+0x1a4>
							SET_BIT(DDRC,(U8FirstPinIdCopy+WordBit));
     d00:	a4 e3       	ldi	r26, 0x34	; 52
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e4 e3       	ldi	r30, 0x34	; 52
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	88 2f       	mov	r24, r24
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	28 0f       	add	r18, r24
     d1a:	39 1f       	adc	r19, r25
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	02 2e       	mov	r0, r18
     d22:	02 c0       	rjmp	.+4      	; 0xd28 <DIO_SetWordDirection+0x19a>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	0a 94       	dec	r0
     d2a:	e2 f7       	brpl	.-8      	; 0xd24 <DIO_SetWordDirection+0x196>
     d2c:	84 2b       	or	r24, r20
     d2e:	8c 93       	st	X, r24
     d30:	4f c0       	rjmp	.+158    	; 0xdd0 <DIO_SetWordDirection+0x242>
						else
							CLR_BIT(DDRC,(U8FirstPinIdCopy+WordBit));
     d32:	a4 e3       	ldi	r26, 0x34	; 52
     d34:	b0 e0       	ldi	r27, 0x00	; 0
     d36:	e4 e3       	ldi	r30, 0x34	; 52
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	8c 81       	ldd	r24, Y+4	; 0x04
     d40:	28 2f       	mov	r18, r24
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	89 81       	ldd	r24, Y+1	; 0x01
     d46:	88 2f       	mov	r24, r24
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	28 0f       	add	r18, r24
     d4c:	39 1f       	adc	r19, r25
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	02 2e       	mov	r0, r18
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_SetWordDirection+0x1cc>
     d56:	88 0f       	add	r24, r24
     d58:	99 1f       	adc	r25, r25
     d5a:	0a 94       	dec	r0
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_SetWordDirection+0x1c8>
     d5e:	80 95       	com	r24
     d60:	84 23       	and	r24, r20
     d62:	8c 93       	st	X, r24
     d64:	35 c0       	rjmp	.+106    	; 0xdd0 <DIO_SetWordDirection+0x242>
					}break;
					case DIO_PORTD: {
						if(tempWordDirect)
     d66:	8a 81       	ldd	r24, Y+2	; 0x02
     d68:	88 23       	and	r24, r24
     d6a:	c9 f0       	breq	.+50     	; 0xd9e <DIO_SetWordDirection+0x210>
							SET_BIT(DDRD,(U8FirstPinIdCopy+WordBit));
     d6c:	a1 e3       	ldi	r26, 0x31	; 49
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e1 e3       	ldi	r30, 0x31	; 49
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	8c 81       	ldd	r24, Y+4	; 0x04
     d7a:	28 2f       	mov	r18, r24
     d7c:	30 e0       	ldi	r19, 0x00	; 0
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	28 0f       	add	r18, r24
     d86:	39 1f       	adc	r19, r25
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_SetWordDirection+0x206>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_SetWordDirection+0x202>
     d98:	84 2b       	or	r24, r20
     d9a:	8c 93       	st	X, r24
     d9c:	19 c0       	rjmp	.+50     	; 0xdd0 <DIO_SetWordDirection+0x242>
						else
							CLR_BIT(DDRD,(U8FirstPinIdCopy+WordBit));
     d9e:	a1 e3       	ldi	r26, 0x31	; 49
     da0:	b0 e0       	ldi	r27, 0x00	; 0
     da2:	e1 e3       	ldi	r30, 0x31	; 49
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	80 81       	ld	r24, Z
     da8:	48 2f       	mov	r20, r24
     daa:	8c 81       	ldd	r24, Y+4	; 0x04
     dac:	28 2f       	mov	r18, r24
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	88 2f       	mov	r24, r24
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	28 0f       	add	r18, r24
     db8:	39 1f       	adc	r19, r25
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <DIO_SetWordDirection+0x238>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <DIO_SetWordDirection+0x234>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
{

	if ( (U8PortIdCopy <= DIO_PORTD) && (U8FirstPinIdCopy<=(DIO_BYTE-DIO_WORD)) )
		{
			u8 tempWordDirect,WordBit=0;
			for(WordBit=0;WordBit<DIO_WORD;WordBit++)
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	8f 5f       	subi	r24, 0xFF	; 255
     dd4:	89 83       	std	Y+1, r24	; 0x01
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	84 30       	cpi	r24, 0x04	; 4
     dda:	08 f4       	brcc	.+2      	; 0xdde <DIO_SetWordDirection+0x250>
     ddc:	f0 ce       	rjmp	.-544    	; 0xbbe <DIO_SetWordDirection+0x30>
					}break;
				}

			}
		}
}
     dde:	27 96       	adiw	r28, 0x07	; 7
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	de bf       	out	0x3e, r29	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	cd bf       	out	0x3d, r28	; 61
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <DIO_SetPortValue>:



//IO Ports
void DIO_SetPortValue(u8 U8PortIdCopy,u8 U8PortValueCopy)
{
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <DIO_SetPortValue+0x6>
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <DIO_SetPortValue+0x8>
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	89 83       	std	Y+1, r24	; 0x01
     dfe:	6a 83       	std	Y+2, r22	; 0x02
	if (U8PortIdCopy<=DIO_PORTD)
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	84 30       	cpi	r24, 0x04	; 4
     e04:	90 f5       	brcc	.+100    	; 0xe6a <DIO_SetPortValue+0x7a>
	{
		switch(U8PortIdCopy)
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	28 2f       	mov	r18, r24
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	3c 83       	std	Y+4, r19	; 0x04
     e0e:	2b 83       	std	Y+3, r18	; 0x03
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	9c 81       	ldd	r25, Y+4	; 0x04
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	91 05       	cpc	r25, r1
     e18:	d1 f0       	breq	.+52     	; 0xe4e <DIO_SetPortValue+0x5e>
     e1a:	2b 81       	ldd	r18, Y+3	; 0x03
     e1c:	3c 81       	ldd	r19, Y+4	; 0x04
     e1e:	22 30       	cpi	r18, 0x02	; 2
     e20:	31 05       	cpc	r19, r1
     e22:	2c f4       	brge	.+10     	; 0xe2e <DIO_SetPortValue+0x3e>
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	61 f0       	breq	.+24     	; 0xe44 <DIO_SetPortValue+0x54>
     e2c:	1e c0       	rjmp	.+60     	; 0xe6a <DIO_SetPortValue+0x7a>
     e2e:	2b 81       	ldd	r18, Y+3	; 0x03
     e30:	3c 81       	ldd	r19, Y+4	; 0x04
     e32:	22 30       	cpi	r18, 0x02	; 2
     e34:	31 05       	cpc	r19, r1
     e36:	81 f0       	breq	.+32     	; 0xe58 <DIO_SetPortValue+0x68>
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	83 30       	cpi	r24, 0x03	; 3
     e3e:	91 05       	cpc	r25, r1
     e40:	81 f0       	breq	.+32     	; 0xe62 <DIO_SetPortValue+0x72>
     e42:	13 c0       	rjmp	.+38     	; 0xe6a <DIO_SetPortValue+0x7a>
		{
			case DIO_PORTA: PORTA=U8PortValueCopy; break;
     e44:	eb e3       	ldi	r30, 0x3B	; 59
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	8a 81       	ldd	r24, Y+2	; 0x02
     e4a:	80 83       	st	Z, r24
     e4c:	0e c0       	rjmp	.+28     	; 0xe6a <DIO_SetPortValue+0x7a>
			case DIO_PORTB: PORTB=U8PortValueCopy; break;
     e4e:	e8 e3       	ldi	r30, 0x38	; 56
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	8a 81       	ldd	r24, Y+2	; 0x02
     e54:	80 83       	st	Z, r24
     e56:	09 c0       	rjmp	.+18     	; 0xe6a <DIO_SetPortValue+0x7a>
			case DIO_PORTC: PORTC=U8PortValueCopy; break;
     e58:	e5 e3       	ldi	r30, 0x35	; 53
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	80 83       	st	Z, r24
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <DIO_SetPortValue+0x7a>
			case DIO_PORTD: PORTD=U8PortValueCopy; break;
     e62:	e2 e3       	ldi	r30, 0x32	; 50
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	80 83       	st	Z, r24
		}
	}
}
     e6a:	0f 90       	pop	r0
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	0f 90       	pop	r0
     e72:	cf 91       	pop	r28
     e74:	df 91       	pop	r29
     e76:	08 95       	ret

00000e78 <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 U8PortIdCopy,u8 U8PortDirCopy)
{
     e78:	df 93       	push	r29
     e7a:	cf 93       	push	r28
     e7c:	00 d0       	rcall	.+0      	; 0xe7e <DIO_SetPortDirection+0x6>
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <DIO_SetPortDirection+0x8>
     e80:	cd b7       	in	r28, 0x3d	; 61
     e82:	de b7       	in	r29, 0x3e	; 62
     e84:	89 83       	std	Y+1, r24	; 0x01
     e86:	6a 83       	std	Y+2, r22	; 0x02
	if (U8PortIdCopy<=DIO_PORTD)
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	84 30       	cpi	r24, 0x04	; 4
     e8c:	90 f5       	brcc	.+100    	; 0xef2 <DIO_SetPortDirection+0x7a>
		{
			switch(U8PortIdCopy)
     e8e:	89 81       	ldd	r24, Y+1	; 0x01
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	3c 83       	std	Y+4, r19	; 0x04
     e96:	2b 83       	std	Y+3, r18	; 0x03
     e98:	8b 81       	ldd	r24, Y+3	; 0x03
     e9a:	9c 81       	ldd	r25, Y+4	; 0x04
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	91 05       	cpc	r25, r1
     ea0:	d1 f0       	breq	.+52     	; 0xed6 <DIO_SetPortDirection+0x5e>
     ea2:	2b 81       	ldd	r18, Y+3	; 0x03
     ea4:	3c 81       	ldd	r19, Y+4	; 0x04
     ea6:	22 30       	cpi	r18, 0x02	; 2
     ea8:	31 05       	cpc	r19, r1
     eaa:	2c f4       	brge	.+10     	; 0xeb6 <DIO_SetPortDirection+0x3e>
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	9c 81       	ldd	r25, Y+4	; 0x04
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	61 f0       	breq	.+24     	; 0xecc <DIO_SetPortDirection+0x54>
     eb4:	1e c0       	rjmp	.+60     	; 0xef2 <DIO_SetPortDirection+0x7a>
     eb6:	2b 81       	ldd	r18, Y+3	; 0x03
     eb8:	3c 81       	ldd	r19, Y+4	; 0x04
     eba:	22 30       	cpi	r18, 0x02	; 2
     ebc:	31 05       	cpc	r19, r1
     ebe:	81 f0       	breq	.+32     	; 0xee0 <DIO_SetPortDirection+0x68>
     ec0:	8b 81       	ldd	r24, Y+3	; 0x03
     ec2:	9c 81       	ldd	r25, Y+4	; 0x04
     ec4:	83 30       	cpi	r24, 0x03	; 3
     ec6:	91 05       	cpc	r25, r1
     ec8:	81 f0       	breq	.+32     	; 0xeea <DIO_SetPortDirection+0x72>
     eca:	13 c0       	rjmp	.+38     	; 0xef2 <DIO_SetPortDirection+0x7a>
			{
				case DIO_PORTA: DDRA=U8PortDirCopy; break;
     ecc:	ea e3       	ldi	r30, 0x3A	; 58
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	8a 81       	ldd	r24, Y+2	; 0x02
     ed2:	80 83       	st	Z, r24
     ed4:	0e c0       	rjmp	.+28     	; 0xef2 <DIO_SetPortDirection+0x7a>
				case DIO_PORTB: DDRB=U8PortDirCopy; break;
     ed6:	e7 e3       	ldi	r30, 0x37	; 55
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	80 83       	st	Z, r24
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <DIO_SetPortDirection+0x7a>
				case DIO_PORTC: DDRC=U8PortDirCopy; break;
     ee0:	e4 e3       	ldi	r30, 0x34	; 52
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	8a 81       	ldd	r24, Y+2	; 0x02
     ee6:	80 83       	st	Z, r24
     ee8:	04 c0       	rjmp	.+8      	; 0xef2 <DIO_SetPortDirection+0x7a>
				case DIO_PORTD: DDRD=U8PortDirCopy; break;
     eea:	e1 e3       	ldi	r30, 0x31	; 49
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	8a 81       	ldd	r24, Y+2	; 0x02
     ef0:	80 83       	st	Z, r24
			}
		}
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	0f 90       	pop	r0
     ef8:	0f 90       	pop	r0
     efa:	cf 91       	pop	r28
     efc:	df 91       	pop	r29
     efe:	08 95       	ret

00000f00 <DIO_GetPortValue>:
u8 DIO_GetPortValue(u8 U8PortIdCopy)
{
     f00:	df 93       	push	r29
     f02:	cf 93       	push	r28
     f04:	00 d0       	rcall	.+0      	; 0xf06 <DIO_GetPortValue+0x6>
     f06:	00 d0       	rcall	.+0      	; 0xf08 <DIO_GetPortValue+0x8>
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	89 83       	std	Y+1, r24	; 0x01
	if (U8PortIdCopy<=DIO_PORTD)
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	84 30       	cpi	r24, 0x04	; 4
     f12:	98 f5       	brcc	.+102    	; 0xf7a <DIO_GetPortValue+0x7a>
	{
		switch(U8PortIdCopy)
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	3c 83       	std	Y+4, r19	; 0x04
     f1c:	2b 83       	std	Y+3, r18	; 0x03
     f1e:	8b 81       	ldd	r24, Y+3	; 0x03
     f20:	9c 81       	ldd	r25, Y+4	; 0x04
     f22:	81 30       	cpi	r24, 0x01	; 1
     f24:	91 05       	cpc	r25, r1
     f26:	d1 f0       	breq	.+52     	; 0xf5c <DIO_GetPortValue+0x5c>
     f28:	2b 81       	ldd	r18, Y+3	; 0x03
     f2a:	3c 81       	ldd	r19, Y+4	; 0x04
     f2c:	22 30       	cpi	r18, 0x02	; 2
     f2e:	31 05       	cpc	r19, r1
     f30:	2c f4       	brge	.+10     	; 0xf3c <DIO_GetPortValue+0x3c>
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	9c 81       	ldd	r25, Y+4	; 0x04
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	61 f0       	breq	.+24     	; 0xf52 <DIO_GetPortValue+0x52>
     f3a:	1f c0       	rjmp	.+62     	; 0xf7a <DIO_GetPortValue+0x7a>
     f3c:	2b 81       	ldd	r18, Y+3	; 0x03
     f3e:	3c 81       	ldd	r19, Y+4	; 0x04
     f40:	22 30       	cpi	r18, 0x02	; 2
     f42:	31 05       	cpc	r19, r1
     f44:	81 f0       	breq	.+32     	; 0xf66 <DIO_GetPortValue+0x66>
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	9c 81       	ldd	r25, Y+4	; 0x04
     f4a:	83 30       	cpi	r24, 0x03	; 3
     f4c:	91 05       	cpc	r25, r1
     f4e:	81 f0       	breq	.+32     	; 0xf70 <DIO_GetPortValue+0x70>
     f50:	14 c0       	rjmp	.+40     	; 0xf7a <DIO_GetPortValue+0x7a>
		{
			case DIO_PORTA: return PINA; break;
     f52:	e9 e3       	ldi	r30, 0x39	; 57
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	90 81       	ld	r25, Z
     f58:	9a 83       	std	Y+2, r25	; 0x02
     f5a:	11 c0       	rjmp	.+34     	; 0xf7e <DIO_GetPortValue+0x7e>
			case DIO_PORTB: return PINB; break;
     f5c:	e6 e3       	ldi	r30, 0x36	; 54
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	20 81       	ld	r18, Z
     f62:	2a 83       	std	Y+2, r18	; 0x02
     f64:	0c c0       	rjmp	.+24     	; 0xf7e <DIO_GetPortValue+0x7e>
			case DIO_PORTC: return PINC; break;
     f66:	e3 e3       	ldi	r30, 0x33	; 51
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	30 81       	ld	r19, Z
     f6c:	3a 83       	std	Y+2, r19	; 0x02
     f6e:	07 c0       	rjmp	.+14     	; 0xf7e <DIO_GetPortValue+0x7e>
			case DIO_PORTD: return PIND; break;
     f70:	e0 e3       	ldi	r30, 0x30	; 48
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8a 83       	std	Y+2, r24	; 0x02
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_GetPortValue+0x7e>
		}
	}
	return 0xff;//out of range
     f7a:	9f ef       	ldi	r25, 0xFF	; 255
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     f80:	0f 90       	pop	r0
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <Garden_Setup>:
#include "DIO.h"
#include "DC_MOTOR.h"
#include "GardenSystem.h"
#include "ADC.h"

void Garden_Setup(void){
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	MOTOR_Init();
     f96:	0e 94 a3 00 	call	0x146	; 0x146 <MOTOR_Init>
	ADC_Init();
     f9a:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_Init>

	DIO_SetPinDirection(DIO_PORTA,DIO_PIN3,DIO_INPUT);
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	63 e0       	ldi	r22, 0x03	; 3
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN5,DIO_OUTPUT); // red led
     fa8:	83 e0       	ldi	r24, 0x03	; 3
     faa:	65 e0       	ldi	r22, 0x05	; 5
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_PORTD,DIO_PIN6,DIO_OUTPUT); // green led
     fb2:	83 e0       	ldi	r24, 0x03	; 3
     fb4:	66 e0       	ldi	r22, 0x06	; 6
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <DIO_SetPinDirection>

	DIO_SetPinValue(DIO_PORTD,DIO_PIN5,DIO_LOW);
     fbc:	83 e0       	ldi	r24, 0x03	; 3
     fbe:	65 e0       	ldi	r22, 0x05	; 5
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
	DIO_SetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
     fc6:	83 e0       	ldi	r24, 0x03	; 3
     fc8:	66 e0       	ldi	r22, 0x06	; 6
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
}
     fd0:	cf 91       	pop	r28
     fd2:	df 91       	pop	r29
     fd4:	08 95       	ret

00000fd6 <Get_Soil_Sensor_Value>:

u8 Get_Soil_Sensor_Value(void){
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
	u8 soil_sensor;
	soil_sensor = ADC_Read(Soil_Sensor_pin);
     fe0:	83 e0       	ldi	r24, 0x03	; 3
     fe2:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_Read>
     fe6:	89 83       	std	Y+1, r24	; 0x01
	return soil_sensor;
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fea:	0f 90       	pop	r0
     fec:	cf 91       	pop	r28
     fee:	df 91       	pop	r29
     ff0:	08 95       	ret

00000ff2 <Check_Soil_Sensor_Value>:

void Check_Soil_Sensor_Value(u8 CopySoil_Sensor_Value){
     ff2:	df 93       	push	r29
     ff4:	cf 93       	push	r28
     ff6:	0f 92       	push	r0
     ff8:	cd b7       	in	r28, 0x3d	; 61
     ffa:	de b7       	in	r29, 0x3e	; 62
     ffc:	89 83       	std	Y+1, r24	; 0x01
	if(CopySoil_Sensor_Value > 10) // soil is dry
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	8b 30       	cpi	r24, 0x0B	; 11
    1002:	68 f0       	brcs	.+26     	; 0x101e <Check_Soil_Sensor_Value+0x2c>
	{
		MOTOR_CWMotion();
    1004:	0e 94 be 00 	call	0x17c	; 0x17c <MOTOR_CWMotion>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN5,DIO_HIGH);
    1008:	83 e0       	ldi	r24, 0x03	; 3
    100a:	65 e0       	ldi	r22, 0x05	; 5
    100c:	41 e0       	ldi	r20, 0x01	; 1
    100e:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN6,DIO_LOW);
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	66 e0       	ldi	r22, 0x06	; 6
    1016:	40 e0       	ldi	r20, 0x00	; 0
    1018:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
    101c:	0c c0       	rjmp	.+24     	; 0x1036 <Check_Soil_Sensor_Value+0x44>
	}
	else
	{
		MOTOR_StopMotion();
    101e:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <MOTOR_StopMotion>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN5,DIO_LOW);
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	65 e0       	ldi	r22, 0x05	; 5
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
		DIO_SetPinValue(DIO_PORTD,DIO_PIN6,DIO_HIGH);
    102c:	83 e0       	ldi	r24, 0x03	; 3
    102e:	66 e0       	ldi	r22, 0x06	; 6
    1030:	41 e0       	ldi	r20, 0x01	; 1
    1032:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DIO_SetPinValue>
	}
}
    1036:	0f 90       	pop	r0
    1038:	cf 91       	pop	r28
    103a:	df 91       	pop	r29
    103c:	08 95       	ret

0000103e <main>:
#include "DIO.h"
#include "GardenSystem.h"
#include <util/delay.h>

void main(void)
{
    103e:	df 93       	push	r29
    1040:	cf 93       	push	r28
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
	//initiate Garden system
	Garden_Setup();
    1046:	0e 94 c7 07 	call	0xf8e	; 0xf8e <Garden_Setup>
	while(1)
	{
		Check_Soil_Sensor_Value(Get_Soil_Sensor_Value());
    104a:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <Get_Soil_Sensor_Value>
    104e:	0e 94 f9 07 	call	0xff2	; 0xff2 <Check_Soil_Sensor_Value>
    1052:	fb cf       	rjmp	.-10     	; 0x104a <main+0xc>

00001054 <_exit>:
    1054:	f8 94       	cli

00001056 <__stop_program>:
    1056:	ff cf       	rjmp	.-2      	; 0x1056 <__stop_program>
