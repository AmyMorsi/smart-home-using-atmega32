
SmartGarageSystem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003d04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001de  00800060  00003d04  00003d98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080023e  0080023e  00003f76  2**0
                  ALLOC
  3 .stab         00003bd0  00000000  00000000  00003f78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001723  00000000  00000000  00007b48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000926b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d3  00000000  00000000  000093eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000200f  00000000  00000000  000095be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001170  00000000  00000000  0000b5cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001001  00000000  00000000  0000c73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000d740  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c1  00000000  00000000  0000d8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ae  00000000  00000000  0000dba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e44f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a3 0f 	jmp	0x1f46	; 0x1f46 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 73 1a 	jmp	0x34e6	; 0x34e6 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	fd e3       	ldi	r31, 0x3D	; 61
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 34       	cpi	r26, 0x4F	; 79
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <main>
      8a:	0c 94 80 1e 	jmp	0x3d00	; 0x3d00 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e2       	ldi	r26, 0x29	; 41
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3b 1d 	jmp	0x3a76	; 0x3a76 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e2       	ldi	r24, 0x29	; 41
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 47 1d 	jmp	0x3a8e	; 0x3a8e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 12 06 	call	0xc24	; 0xc24 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 63 1d 	jmp	0x3ac6	; 0x3ac6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 9a 05 	call	0xb34	; 0xb34 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <__epilogue_restores__+0x20>

000007fa <__floatunsisf>:
     7fa:	a8 e0       	ldi	r26, 0x08	; 8
     7fc:	b0 e0       	ldi	r27, 0x00	; 0
     7fe:	e3 e0       	ldi	r30, 0x03	; 3
     800:	f4 e0       	ldi	r31, 0x04	; 4
     802:	0c 94 43 1d 	jmp	0x3a86	; 0x3a86 <__prologue_saves__+0x10>
     806:	7b 01       	movw	r14, r22
     808:	8c 01       	movw	r16, r24
     80a:	61 15       	cp	r22, r1
     80c:	71 05       	cpc	r23, r1
     80e:	81 05       	cpc	r24, r1
     810:	91 05       	cpc	r25, r1
     812:	19 f4       	brne	.+6      	; 0x81a <__floatunsisf+0x20>
     814:	82 e0       	ldi	r24, 0x02	; 2
     816:	89 83       	std	Y+1, r24	; 0x01
     818:	60 c0       	rjmp	.+192    	; 0x8da <__stack+0x7b>
     81a:	83 e0       	ldi	r24, 0x03	; 3
     81c:	89 83       	std	Y+1, r24	; 0x01
     81e:	8e e1       	ldi	r24, 0x1E	; 30
     820:	c8 2e       	mov	r12, r24
     822:	d1 2c       	mov	r13, r1
     824:	dc 82       	std	Y+4, r13	; 0x04
     826:	cb 82       	std	Y+3, r12	; 0x03
     828:	ed 82       	std	Y+5, r14	; 0x05
     82a:	fe 82       	std	Y+6, r15	; 0x06
     82c:	0f 83       	std	Y+7, r16	; 0x07
     82e:	18 87       	std	Y+8, r17	; 0x08
     830:	c8 01       	movw	r24, r16
     832:	b7 01       	movw	r22, r14
     834:	0e 94 76 04 	call	0x8ec	; 0x8ec <__clzsi2>
     838:	fc 01       	movw	r30, r24
     83a:	31 97       	sbiw	r30, 0x01	; 1
     83c:	f7 ff       	sbrs	r31, 7
     83e:	3b c0       	rjmp	.+118    	; 0x8b6 <__stack+0x57>
     840:	22 27       	eor	r18, r18
     842:	33 27       	eor	r19, r19
     844:	2e 1b       	sub	r18, r30
     846:	3f 0b       	sbc	r19, r31
     848:	57 01       	movw	r10, r14
     84a:	68 01       	movw	r12, r16
     84c:	02 2e       	mov	r0, r18
     84e:	04 c0       	rjmp	.+8      	; 0x858 <__floatunsisf+0x5e>
     850:	d6 94       	lsr	r13
     852:	c7 94       	ror	r12
     854:	b7 94       	ror	r11
     856:	a7 94       	ror	r10
     858:	0a 94       	dec	r0
     85a:	d2 f7       	brpl	.-12     	; 0x850 <__floatunsisf+0x56>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	60 e0       	ldi	r22, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	a0 e0       	ldi	r26, 0x00	; 0
     86a:	b0 e0       	ldi	r27, 0x00	; 0
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	88 0f       	add	r24, r24
     870:	99 1f       	adc	r25, r25
     872:	aa 1f       	adc	r26, r26
     874:	bb 1f       	adc	r27, r27
     876:	2a 95       	dec	r18
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	a1 09       	sbc	r26, r1
     87e:	b1 09       	sbc	r27, r1
     880:	8e 21       	and	r24, r14
     882:	9f 21       	and	r25, r15
     884:	a0 23       	and	r26, r16
     886:	b1 23       	and	r27, r17
     888:	00 97       	sbiw	r24, 0x00	; 0
     88a:	a1 05       	cpc	r26, r1
     88c:	b1 05       	cpc	r27, r1
     88e:	21 f0       	breq	.+8      	; 0x898 <__stack+0x39>
     890:	41 e0       	ldi	r20, 0x01	; 1
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	60 e0       	ldi	r22, 0x00	; 0
     896:	70 e0       	ldi	r23, 0x00	; 0
     898:	4a 29       	or	r20, r10
     89a:	5b 29       	or	r21, r11
     89c:	6c 29       	or	r22, r12
     89e:	7d 29       	or	r23, r13
     8a0:	4d 83       	std	Y+5, r20	; 0x05
     8a2:	5e 83       	std	Y+6, r21	; 0x06
     8a4:	6f 83       	std	Y+7, r22	; 0x07
     8a6:	78 87       	std	Y+8, r23	; 0x08
     8a8:	8e e1       	ldi	r24, 0x1E	; 30
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	8e 1b       	sub	r24, r30
     8ae:	9f 0b       	sbc	r25, r31
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
     8b4:	12 c0       	rjmp	.+36     	; 0x8da <__stack+0x7b>
     8b6:	30 97       	sbiw	r30, 0x00	; 0
     8b8:	81 f0       	breq	.+32     	; 0x8da <__stack+0x7b>
     8ba:	0e 2e       	mov	r0, r30
     8bc:	04 c0       	rjmp	.+8      	; 0x8c6 <__stack+0x67>
     8be:	ee 0c       	add	r14, r14
     8c0:	ff 1c       	adc	r15, r15
     8c2:	00 1f       	adc	r16, r16
     8c4:	11 1f       	adc	r17, r17
     8c6:	0a 94       	dec	r0
     8c8:	d2 f7       	brpl	.-12     	; 0x8be <__stack+0x5f>
     8ca:	ed 82       	std	Y+5, r14	; 0x05
     8cc:	fe 82       	std	Y+6, r15	; 0x06
     8ce:	0f 83       	std	Y+7, r16	; 0x07
     8d0:	18 87       	std	Y+8, r17	; 0x08
     8d2:	ce 1a       	sub	r12, r30
     8d4:	df 0a       	sbc	r13, r31
     8d6:	dc 82       	std	Y+4, r13	; 0x04
     8d8:	cb 82       	std	Y+3, r12	; 0x03
     8da:	1a 82       	std	Y+2, r1	; 0x02
     8dc:	ce 01       	movw	r24, r28
     8de:	01 96       	adiw	r24, 0x01	; 1
     8e0:	0e 94 c5 04 	call	0x98a	; 0x98a <__pack_f>
     8e4:	28 96       	adiw	r28, 0x08	; 8
     8e6:	ea e0       	ldi	r30, 0x0A	; 10
     8e8:	0c 94 5f 1d 	jmp	0x3abe	; 0x3abe <__epilogue_restores__+0x10>

000008ec <__clzsi2>:
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	7b 01       	movw	r14, r22
     8f6:	8c 01       	movw	r16, r24
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	e8 16       	cp	r14, r24
     8fc:	80 e0       	ldi	r24, 0x00	; 0
     8fe:	f8 06       	cpc	r15, r24
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	08 07       	cpc	r16, r24
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	18 07       	cpc	r17, r24
     908:	88 f4       	brcc	.+34     	; 0x92c <__clzsi2+0x40>
     90a:	8f ef       	ldi	r24, 0xFF	; 255
     90c:	e8 16       	cp	r14, r24
     90e:	f1 04       	cpc	r15, r1
     910:	01 05       	cpc	r16, r1
     912:	11 05       	cpc	r17, r1
     914:	31 f0       	breq	.+12     	; 0x922 <__clzsi2+0x36>
     916:	28 f0       	brcs	.+10     	; 0x922 <__clzsi2+0x36>
     918:	88 e0       	ldi	r24, 0x08	; 8
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	a0 e0       	ldi	r26, 0x00	; 0
     91e:	b0 e0       	ldi	r27, 0x00	; 0
     920:	17 c0       	rjmp	.+46     	; 0x950 <__clzsi2+0x64>
     922:	80 e0       	ldi	r24, 0x00	; 0
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	12 c0       	rjmp	.+36     	; 0x950 <__clzsi2+0x64>
     92c:	80 e0       	ldi	r24, 0x00	; 0
     92e:	e8 16       	cp	r14, r24
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	f8 06       	cpc	r15, r24
     934:	80 e0       	ldi	r24, 0x00	; 0
     936:	08 07       	cpc	r16, r24
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	18 07       	cpc	r17, r24
     93c:	28 f0       	brcs	.+10     	; 0x948 <__clzsi2+0x5c>
     93e:	88 e1       	ldi	r24, 0x18	; 24
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	04 c0       	rjmp	.+8      	; 0x950 <__clzsi2+0x64>
     948:	80 e1       	ldi	r24, 0x10	; 16
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	a0 e0       	ldi	r26, 0x00	; 0
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	20 e2       	ldi	r18, 0x20	; 32
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	50 e0       	ldi	r21, 0x00	; 0
     958:	28 1b       	sub	r18, r24
     95a:	39 0b       	sbc	r19, r25
     95c:	4a 0b       	sbc	r20, r26
     95e:	5b 0b       	sbc	r21, r27
     960:	04 c0       	rjmp	.+8      	; 0x96a <__clzsi2+0x7e>
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	f7 94       	ror	r15
     968:	e7 94       	ror	r14
     96a:	8a 95       	dec	r24
     96c:	d2 f7       	brpl	.-12     	; 0x962 <__clzsi2+0x76>
     96e:	f7 01       	movw	r30, r14
     970:	ef 5c       	subi	r30, 0xCF	; 207
     972:	fe 4f       	sbci	r31, 0xFE	; 254
     974:	80 81       	ld	r24, Z
     976:	28 1b       	sub	r18, r24
     978:	31 09       	sbc	r19, r1
     97a:	41 09       	sbc	r20, r1
     97c:	51 09       	sbc	r21, r1
     97e:	c9 01       	movw	r24, r18
     980:	1f 91       	pop	r17
     982:	0f 91       	pop	r16
     984:	ff 90       	pop	r15
     986:	ef 90       	pop	r14
     988:	08 95       	ret

0000098a <__pack_f>:
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	fc 01       	movw	r30, r24
     996:	e4 80       	ldd	r14, Z+4	; 0x04
     998:	f5 80       	ldd	r15, Z+5	; 0x05
     99a:	06 81       	ldd	r16, Z+6	; 0x06
     99c:	17 81       	ldd	r17, Z+7	; 0x07
     99e:	d1 80       	ldd	r13, Z+1	; 0x01
     9a0:	80 81       	ld	r24, Z
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	48 f4       	brcc	.+18     	; 0x9b8 <__pack_f+0x2e>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	a0 e1       	ldi	r26, 0x10	; 16
     9ac:	b0 e0       	ldi	r27, 0x00	; 0
     9ae:	e8 2a       	or	r14, r24
     9b0:	f9 2a       	or	r15, r25
     9b2:	0a 2b       	or	r16, r26
     9b4:	1b 2b       	or	r17, r27
     9b6:	a5 c0       	rjmp	.+330    	; 0xb02 <__pack_f+0x178>
     9b8:	84 30       	cpi	r24, 0x04	; 4
     9ba:	09 f4       	brne	.+2      	; 0x9be <__pack_f+0x34>
     9bc:	9f c0       	rjmp	.+318    	; 0xafc <__pack_f+0x172>
     9be:	82 30       	cpi	r24, 0x02	; 2
     9c0:	21 f4       	brne	.+8      	; 0x9ca <__pack_f+0x40>
     9c2:	ee 24       	eor	r14, r14
     9c4:	ff 24       	eor	r15, r15
     9c6:	87 01       	movw	r16, r14
     9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <__pack_f+0x4a>
     9ca:	e1 14       	cp	r14, r1
     9cc:	f1 04       	cpc	r15, r1
     9ce:	01 05       	cpc	r16, r1
     9d0:	11 05       	cpc	r17, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__pack_f+0x50>
     9d4:	e0 e0       	ldi	r30, 0x00	; 0
     9d6:	f0 e0       	ldi	r31, 0x00	; 0
     9d8:	96 c0       	rjmp	.+300    	; 0xb06 <__pack_f+0x17c>
     9da:	62 81       	ldd	r22, Z+2	; 0x02
     9dc:	73 81       	ldd	r23, Z+3	; 0x03
     9de:	9f ef       	ldi	r25, 0xFF	; 255
     9e0:	62 38       	cpi	r22, 0x82	; 130
     9e2:	79 07       	cpc	r23, r25
     9e4:	0c f0       	brlt	.+2      	; 0x9e8 <__pack_f+0x5e>
     9e6:	5b c0       	rjmp	.+182    	; 0xa9e <__pack_f+0x114>
     9e8:	22 e8       	ldi	r18, 0x82	; 130
     9ea:	3f ef       	ldi	r19, 0xFF	; 255
     9ec:	26 1b       	sub	r18, r22
     9ee:	37 0b       	sbc	r19, r23
     9f0:	2a 31       	cpi	r18, 0x1A	; 26
     9f2:	31 05       	cpc	r19, r1
     9f4:	2c f0       	brlt	.+10     	; 0xa00 <__pack_f+0x76>
     9f6:	20 e0       	ldi	r18, 0x00	; 0
     9f8:	30 e0       	ldi	r19, 0x00	; 0
     9fa:	40 e0       	ldi	r20, 0x00	; 0
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	2a c0       	rjmp	.+84     	; 0xa54 <__pack_f+0xca>
     a00:	b8 01       	movw	r22, r16
     a02:	a7 01       	movw	r20, r14
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__pack_f+0x86>
     a08:	76 95       	lsr	r23
     a0a:	67 95       	ror	r22
     a0c:	57 95       	ror	r21
     a0e:	47 95       	ror	r20
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__pack_f+0x7e>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	a0 e0       	ldi	r26, 0x00	; 0
     a1a:	b0 e0       	ldi	r27, 0x00	; 0
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__pack_f+0x9c>
     a1e:	88 0f       	add	r24, r24
     a20:	99 1f       	adc	r25, r25
     a22:	aa 1f       	adc	r26, r26
     a24:	bb 1f       	adc	r27, r27
     a26:	2a 95       	dec	r18
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__pack_f+0x94>
     a2a:	01 97       	sbiw	r24, 0x01	; 1
     a2c:	a1 09       	sbc	r26, r1
     a2e:	b1 09       	sbc	r27, r1
     a30:	8e 21       	and	r24, r14
     a32:	9f 21       	and	r25, r15
     a34:	a0 23       	and	r26, r16
     a36:	b1 23       	and	r27, r17
     a38:	00 97       	sbiw	r24, 0x00	; 0
     a3a:	a1 05       	cpc	r26, r1
     a3c:	b1 05       	cpc	r27, r1
     a3e:	21 f0       	breq	.+8      	; 0xa48 <__pack_f+0xbe>
     a40:	81 e0       	ldi	r24, 0x01	; 1
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	a0 e0       	ldi	r26, 0x00	; 0
     a46:	b0 e0       	ldi	r27, 0x00	; 0
     a48:	9a 01       	movw	r18, r20
     a4a:	ab 01       	movw	r20, r22
     a4c:	28 2b       	or	r18, r24
     a4e:	39 2b       	or	r19, r25
     a50:	4a 2b       	or	r20, r26
     a52:	5b 2b       	or	r21, r27
     a54:	da 01       	movw	r26, r20
     a56:	c9 01       	movw	r24, r18
     a58:	8f 77       	andi	r24, 0x7F	; 127
     a5a:	90 70       	andi	r25, 0x00	; 0
     a5c:	a0 70       	andi	r26, 0x00	; 0
     a5e:	b0 70       	andi	r27, 0x00	; 0
     a60:	80 34       	cpi	r24, 0x40	; 64
     a62:	91 05       	cpc	r25, r1
     a64:	a1 05       	cpc	r26, r1
     a66:	b1 05       	cpc	r27, r1
     a68:	39 f4       	brne	.+14     	; 0xa78 <__pack_f+0xee>
     a6a:	27 ff       	sbrs	r18, 7
     a6c:	09 c0       	rjmp	.+18     	; 0xa80 <__pack_f+0xf6>
     a6e:	20 5c       	subi	r18, 0xC0	; 192
     a70:	3f 4f       	sbci	r19, 0xFF	; 255
     a72:	4f 4f       	sbci	r20, 0xFF	; 255
     a74:	5f 4f       	sbci	r21, 0xFF	; 255
     a76:	04 c0       	rjmp	.+8      	; 0xa80 <__pack_f+0xf6>
     a78:	21 5c       	subi	r18, 0xC1	; 193
     a7a:	3f 4f       	sbci	r19, 0xFF	; 255
     a7c:	4f 4f       	sbci	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	e0 e0       	ldi	r30, 0x00	; 0
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	20 30       	cpi	r18, 0x00	; 0
     a86:	a0 e0       	ldi	r26, 0x00	; 0
     a88:	3a 07       	cpc	r19, r26
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	4a 07       	cpc	r20, r26
     a8e:	a0 e4       	ldi	r26, 0x40	; 64
     a90:	5a 07       	cpc	r21, r26
     a92:	10 f0       	brcs	.+4      	; 0xa98 <__pack_f+0x10e>
     a94:	e1 e0       	ldi	r30, 0x01	; 1
     a96:	f0 e0       	ldi	r31, 0x00	; 0
     a98:	79 01       	movw	r14, r18
     a9a:	8a 01       	movw	r16, r20
     a9c:	27 c0       	rjmp	.+78     	; 0xaec <__pack_f+0x162>
     a9e:	60 38       	cpi	r22, 0x80	; 128
     aa0:	71 05       	cpc	r23, r1
     aa2:	64 f5       	brge	.+88     	; 0xafc <__pack_f+0x172>
     aa4:	fb 01       	movw	r30, r22
     aa6:	e1 58       	subi	r30, 0x81	; 129
     aa8:	ff 4f       	sbci	r31, 0xFF	; 255
     aaa:	d8 01       	movw	r26, r16
     aac:	c7 01       	movw	r24, r14
     aae:	8f 77       	andi	r24, 0x7F	; 127
     ab0:	90 70       	andi	r25, 0x00	; 0
     ab2:	a0 70       	andi	r26, 0x00	; 0
     ab4:	b0 70       	andi	r27, 0x00	; 0
     ab6:	80 34       	cpi	r24, 0x40	; 64
     ab8:	91 05       	cpc	r25, r1
     aba:	a1 05       	cpc	r26, r1
     abc:	b1 05       	cpc	r27, r1
     abe:	39 f4       	brne	.+14     	; 0xace <__pack_f+0x144>
     ac0:	e7 fe       	sbrs	r14, 7
     ac2:	0d c0       	rjmp	.+26     	; 0xade <__pack_f+0x154>
     ac4:	80 e4       	ldi	r24, 0x40	; 64
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	a0 e0       	ldi	r26, 0x00	; 0
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	04 c0       	rjmp	.+8      	; 0xad6 <__pack_f+0x14c>
     ace:	8f e3       	ldi	r24, 0x3F	; 63
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	a0 e0       	ldi	r26, 0x00	; 0
     ad4:	b0 e0       	ldi	r27, 0x00	; 0
     ad6:	e8 0e       	add	r14, r24
     ad8:	f9 1e       	adc	r15, r25
     ada:	0a 1f       	adc	r16, r26
     adc:	1b 1f       	adc	r17, r27
     ade:	17 ff       	sbrs	r17, 7
     ae0:	05 c0       	rjmp	.+10     	; 0xaec <__pack_f+0x162>
     ae2:	16 95       	lsr	r17
     ae4:	07 95       	ror	r16
     ae6:	f7 94       	ror	r15
     ae8:	e7 94       	ror	r14
     aea:	31 96       	adiw	r30, 0x01	; 1
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	16 95       	lsr	r17
     af0:	07 95       	ror	r16
     af2:	f7 94       	ror	r15
     af4:	e7 94       	ror	r14
     af6:	8a 95       	dec	r24
     af8:	d1 f7       	brne	.-12     	; 0xaee <__pack_f+0x164>
     afa:	05 c0       	rjmp	.+10     	; 0xb06 <__pack_f+0x17c>
     afc:	ee 24       	eor	r14, r14
     afe:	ff 24       	eor	r15, r15
     b00:	87 01       	movw	r16, r14
     b02:	ef ef       	ldi	r30, 0xFF	; 255
     b04:	f0 e0       	ldi	r31, 0x00	; 0
     b06:	6e 2f       	mov	r22, r30
     b08:	67 95       	ror	r22
     b0a:	66 27       	eor	r22, r22
     b0c:	67 95       	ror	r22
     b0e:	90 2f       	mov	r25, r16
     b10:	9f 77       	andi	r25, 0x7F	; 127
     b12:	d7 94       	ror	r13
     b14:	dd 24       	eor	r13, r13
     b16:	d7 94       	ror	r13
     b18:	8e 2f       	mov	r24, r30
     b1a:	86 95       	lsr	r24
     b1c:	49 2f       	mov	r20, r25
     b1e:	46 2b       	or	r20, r22
     b20:	58 2f       	mov	r21, r24
     b22:	5d 29       	or	r21, r13
     b24:	b7 01       	movw	r22, r14
     b26:	ca 01       	movw	r24, r20
     b28:	1f 91       	pop	r17
     b2a:	0f 91       	pop	r16
     b2c:	ff 90       	pop	r15
     b2e:	ef 90       	pop	r14
     b30:	df 90       	pop	r13
     b32:	08 95       	ret

00000b34 <__unpack_f>:
     b34:	fc 01       	movw	r30, r24
     b36:	db 01       	movw	r26, r22
     b38:	40 81       	ld	r20, Z
     b3a:	51 81       	ldd	r21, Z+1	; 0x01
     b3c:	22 81       	ldd	r18, Z+2	; 0x02
     b3e:	62 2f       	mov	r22, r18
     b40:	6f 77       	andi	r22, 0x7F	; 127
     b42:	70 e0       	ldi	r23, 0x00	; 0
     b44:	22 1f       	adc	r18, r18
     b46:	22 27       	eor	r18, r18
     b48:	22 1f       	adc	r18, r18
     b4a:	93 81       	ldd	r25, Z+3	; 0x03
     b4c:	89 2f       	mov	r24, r25
     b4e:	88 0f       	add	r24, r24
     b50:	82 2b       	or	r24, r18
     b52:	28 2f       	mov	r18, r24
     b54:	30 e0       	ldi	r19, 0x00	; 0
     b56:	99 1f       	adc	r25, r25
     b58:	99 27       	eor	r25, r25
     b5a:	99 1f       	adc	r25, r25
     b5c:	11 96       	adiw	r26, 0x01	; 1
     b5e:	9c 93       	st	X, r25
     b60:	11 97       	sbiw	r26, 0x01	; 1
     b62:	21 15       	cp	r18, r1
     b64:	31 05       	cpc	r19, r1
     b66:	a9 f5       	brne	.+106    	; 0xbd2 <__unpack_f+0x9e>
     b68:	41 15       	cp	r20, r1
     b6a:	51 05       	cpc	r21, r1
     b6c:	61 05       	cpc	r22, r1
     b6e:	71 05       	cpc	r23, r1
     b70:	11 f4       	brne	.+4      	; 0xb76 <__unpack_f+0x42>
     b72:	82 e0       	ldi	r24, 0x02	; 2
     b74:	37 c0       	rjmp	.+110    	; 0xbe4 <__unpack_f+0xb0>
     b76:	82 e8       	ldi	r24, 0x82	; 130
     b78:	9f ef       	ldi	r25, 0xFF	; 255
     b7a:	13 96       	adiw	r26, 0x03	; 3
     b7c:	9c 93       	st	X, r25
     b7e:	8e 93       	st	-X, r24
     b80:	12 97       	sbiw	r26, 0x02	; 2
     b82:	9a 01       	movw	r18, r20
     b84:	ab 01       	movw	r20, r22
     b86:	67 e0       	ldi	r22, 0x07	; 7
     b88:	22 0f       	add	r18, r18
     b8a:	33 1f       	adc	r19, r19
     b8c:	44 1f       	adc	r20, r20
     b8e:	55 1f       	adc	r21, r21
     b90:	6a 95       	dec	r22
     b92:	d1 f7       	brne	.-12     	; 0xb88 <__unpack_f+0x54>
     b94:	83 e0       	ldi	r24, 0x03	; 3
     b96:	8c 93       	st	X, r24
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__unpack_f+0x80>
     b9a:	22 0f       	add	r18, r18
     b9c:	33 1f       	adc	r19, r19
     b9e:	44 1f       	adc	r20, r20
     ba0:	55 1f       	adc	r21, r21
     ba2:	12 96       	adiw	r26, 0x02	; 2
     ba4:	8d 91       	ld	r24, X+
     ba6:	9c 91       	ld	r25, X
     ba8:	13 97       	sbiw	r26, 0x03	; 3
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	13 96       	adiw	r26, 0x03	; 3
     bae:	9c 93       	st	X, r25
     bb0:	8e 93       	st	-X, r24
     bb2:	12 97       	sbiw	r26, 0x02	; 2
     bb4:	20 30       	cpi	r18, 0x00	; 0
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	38 07       	cpc	r19, r24
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	48 07       	cpc	r20, r24
     bbe:	80 e4       	ldi	r24, 0x40	; 64
     bc0:	58 07       	cpc	r21, r24
     bc2:	58 f3       	brcs	.-42     	; 0xb9a <__unpack_f+0x66>
     bc4:	14 96       	adiw	r26, 0x04	; 4
     bc6:	2d 93       	st	X+, r18
     bc8:	3d 93       	st	X+, r19
     bca:	4d 93       	st	X+, r20
     bcc:	5c 93       	st	X, r21
     bce:	17 97       	sbiw	r26, 0x07	; 7
     bd0:	08 95       	ret
     bd2:	2f 3f       	cpi	r18, 0xFF	; 255
     bd4:	31 05       	cpc	r19, r1
     bd6:	79 f4       	brne	.+30     	; 0xbf6 <__unpack_f+0xc2>
     bd8:	41 15       	cp	r20, r1
     bda:	51 05       	cpc	r21, r1
     bdc:	61 05       	cpc	r22, r1
     bde:	71 05       	cpc	r23, r1
     be0:	19 f4       	brne	.+6      	; 0xbe8 <__unpack_f+0xb4>
     be2:	84 e0       	ldi	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
     be6:	08 95       	ret
     be8:	64 ff       	sbrs	r22, 4
     bea:	03 c0       	rjmp	.+6      	; 0xbf2 <__unpack_f+0xbe>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	8c 93       	st	X, r24
     bf0:	12 c0       	rjmp	.+36     	; 0xc16 <__unpack_f+0xe2>
     bf2:	1c 92       	st	X, r1
     bf4:	10 c0       	rjmp	.+32     	; 0xc16 <__unpack_f+0xe2>
     bf6:	2f 57       	subi	r18, 0x7F	; 127
     bf8:	30 40       	sbci	r19, 0x00	; 0
     bfa:	13 96       	adiw	r26, 0x03	; 3
     bfc:	3c 93       	st	X, r19
     bfe:	2e 93       	st	-X, r18
     c00:	12 97       	sbiw	r26, 0x02	; 2
     c02:	83 e0       	ldi	r24, 0x03	; 3
     c04:	8c 93       	st	X, r24
     c06:	87 e0       	ldi	r24, 0x07	; 7
     c08:	44 0f       	add	r20, r20
     c0a:	55 1f       	adc	r21, r21
     c0c:	66 1f       	adc	r22, r22
     c0e:	77 1f       	adc	r23, r23
     c10:	8a 95       	dec	r24
     c12:	d1 f7       	brne	.-12     	; 0xc08 <__unpack_f+0xd4>
     c14:	70 64       	ori	r23, 0x40	; 64
     c16:	14 96       	adiw	r26, 0x04	; 4
     c18:	4d 93       	st	X+, r20
     c1a:	5d 93       	st	X+, r21
     c1c:	6d 93       	st	X+, r22
     c1e:	7c 93       	st	X, r23
     c20:	17 97       	sbiw	r26, 0x07	; 7
     c22:	08 95       	ret

00000c24 <__fpcmp_parts_f>:
     c24:	1f 93       	push	r17
     c26:	dc 01       	movw	r26, r24
     c28:	fb 01       	movw	r30, r22
     c2a:	9c 91       	ld	r25, X
     c2c:	92 30       	cpi	r25, 0x02	; 2
     c2e:	08 f4       	brcc	.+2      	; 0xc32 <__fpcmp_parts_f+0xe>
     c30:	47 c0       	rjmp	.+142    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	08 f4       	brcc	.+2      	; 0xc3a <__fpcmp_parts_f+0x16>
     c38:	43 c0       	rjmp	.+134    	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c3a:	94 30       	cpi	r25, 0x04	; 4
     c3c:	51 f4       	brne	.+20     	; 0xc52 <__fpcmp_parts_f+0x2e>
     c3e:	11 96       	adiw	r26, 0x01	; 1
     c40:	1c 91       	ld	r17, X
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	99 f5       	brne	.+102    	; 0xcac <__fpcmp_parts_f+0x88>
     c46:	81 81       	ldd	r24, Z+1	; 0x01
     c48:	68 2f       	mov	r22, r24
     c4a:	70 e0       	ldi	r23, 0x00	; 0
     c4c:	61 1b       	sub	r22, r17
     c4e:	71 09       	sbc	r23, r1
     c50:	3f c0       	rjmp	.+126    	; 0xcd0 <__fpcmp_parts_f+0xac>
     c52:	84 30       	cpi	r24, 0x04	; 4
     c54:	21 f0       	breq	.+8      	; 0xc5e <__fpcmp_parts_f+0x3a>
     c56:	92 30       	cpi	r25, 0x02	; 2
     c58:	31 f4       	brne	.+12     	; 0xc66 <__fpcmp_parts_f+0x42>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	b9 f1       	breq	.+110    	; 0xccc <__fpcmp_parts_f+0xa8>
     c5e:	81 81       	ldd	r24, Z+1	; 0x01
     c60:	88 23       	and	r24, r24
     c62:	89 f1       	breq	.+98     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     c64:	2d c0       	rjmp	.+90     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	11 97       	sbiw	r26, 0x01	; 1
     c6c:	82 30       	cpi	r24, 0x02	; 2
     c6e:	f1 f0       	breq	.+60     	; 0xcac <__fpcmp_parts_f+0x88>
     c70:	81 81       	ldd	r24, Z+1	; 0x01
     c72:	18 17       	cp	r17, r24
     c74:	d9 f4       	brne	.+54     	; 0xcac <__fpcmp_parts_f+0x88>
     c76:	12 96       	adiw	r26, 0x02	; 2
     c78:	2d 91       	ld	r18, X+
     c7a:	3c 91       	ld	r19, X
     c7c:	13 97       	sbiw	r26, 0x03	; 3
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	82 17       	cp	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	94 f0       	brlt	.+36     	; 0xcac <__fpcmp_parts_f+0x88>
     c88:	28 17       	cp	r18, r24
     c8a:	39 07       	cpc	r19, r25
     c8c:	bc f0       	brlt	.+46     	; 0xcbc <__fpcmp_parts_f+0x98>
     c8e:	14 96       	adiw	r26, 0x04	; 4
     c90:	8d 91       	ld	r24, X+
     c92:	9d 91       	ld	r25, X+
     c94:	0d 90       	ld	r0, X+
     c96:	bc 91       	ld	r27, X
     c98:	a0 2d       	mov	r26, r0
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	46 81       	ldd	r20, Z+6	; 0x06
     ca0:	57 81       	ldd	r21, Z+7	; 0x07
     ca2:	28 17       	cp	r18, r24
     ca4:	39 07       	cpc	r19, r25
     ca6:	4a 07       	cpc	r20, r26
     ca8:	5b 07       	cpc	r21, r27
     caa:	18 f4       	brcc	.+6      	; 0xcb2 <__fpcmp_parts_f+0x8e>
     cac:	11 23       	and	r17, r17
     cae:	41 f0       	breq	.+16     	; 0xcc0 <__fpcmp_parts_f+0x9c>
     cb0:	0a c0       	rjmp	.+20     	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cb2:	82 17       	cp	r24, r18
     cb4:	93 07       	cpc	r25, r19
     cb6:	a4 07       	cpc	r26, r20
     cb8:	b5 07       	cpc	r27, r21
     cba:	40 f4       	brcc	.+16     	; 0xccc <__fpcmp_parts_f+0xa8>
     cbc:	11 23       	and	r17, r17
     cbe:	19 f0       	breq	.+6      	; 0xcc6 <__fpcmp_parts_f+0xa2>
     cc0:	61 e0       	ldi	r22, 0x01	; 1
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <__fpcmp_parts_f+0xac>
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <__fpcmp_parts_f+0xac>
     ccc:	60 e0       	ldi	r22, 0x00	; 0
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	cb 01       	movw	r24, r22
     cd2:	1f 91       	pop	r17
     cd4:	08 95       	ret

00000cd6 <CLCD_void_SetPinsDirection>:
#include<util/delay.h>
#include<string.h>


void CLCD_void_SetPinsDirection()
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(CLCD_DATA_PORT,CLCD_DATA_PORT_DIRECTION);
     cde:	82 e0       	ldi	r24, 0x02	; 2
     ce0:	6f ef       	ldi	r22, 0xFF	; 255
     ce2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <DIO_SetPortDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT,CLCD_RS_PIN ,DIO_OUTPUT);
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	60 e0       	ldi	r22, 0x00	; 0
     cea:	41 e0       	ldi	r20, 0x01	; 1
     cec:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT,CLCD_RW_PIN ,DIO_OUTPUT);
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	41 e0       	ldi	r20, 0x01	; 1
     cf6:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_SetPinDirection>
	DIO_SetPinDirection(CLCD_CTRL_PORT,CLCD_EN_PIN ,DIO_OUTPUT);
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	62 e0       	ldi	r22, 0x02	; 2
     cfe:	41 e0       	ldi	r20, 0x01	; 1
     d00:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_SetPinDirection>
}
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <CLCD_void_Execute>:

void CLCD_void_Execute()
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	cd b7       	in	r28, 0x3d	; 61
     d10:	de b7       	in	r29, 0x3e	; 62
     d12:	2e 97       	sbiw	r28, 0x0e	; 14
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	f8 94       	cli
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	0f be       	out	0x3f, r0	; 63
     d1c:	cd bf       	out	0x3d, r28	; 61
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,DIO_HIGH);
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	62 e0       	ldi	r22, 0x02	; 2
     d22:	41 e0       	ldi	r20, 0x01	; 1
     d24:	0e 94 26 08 	call	0x104c	; 0x104c <DIO_SetPinValue>
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	a0 e0       	ldi	r26, 0x00	; 0
     d2e:	b0 e4       	ldi	r27, 0x40	; 64
     d30:	8b 87       	std	Y+11, r24	; 0x0b
     d32:	9c 87       	std	Y+12, r25	; 0x0c
     d34:	ad 87       	std	Y+13, r26	; 0x0d
     d36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d38:	6b 85       	ldd	r22, Y+11	; 0x0b
     d3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d40:	20 e0       	ldi	r18, 0x00	; 0
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	4a ef       	ldi	r20, 0xFA	; 250
     d46:	54 e4       	ldi	r21, 0x44	; 68
     d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	8f 83       	std	Y+7, r24	; 0x07
     d52:	98 87       	std	Y+8, r25	; 0x08
     d54:	a9 87       	std	Y+9, r26	; 0x09
     d56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d58:	6f 81       	ldd	r22, Y+7	; 0x07
     d5a:	78 85       	ldd	r23, Y+8	; 0x08
     d5c:	89 85       	ldd	r24, Y+9	; 0x09
     d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	5f e3       	ldi	r21, 0x3F	; 63
     d68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d6c:	88 23       	and	r24, r24
     d6e:	2c f4       	brge	.+10     	; 0xd7a <CLCD_void_Execute+0x70>
		__ticks = 1;
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	9e 83       	std	Y+6, r25	; 0x06
     d76:	8d 83       	std	Y+5, r24	; 0x05
     d78:	3f c0       	rjmp	.+126    	; 0xdf8 <CLCD_void_Execute+0xee>
	else if (__tmp > 65535)
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	3f ef       	ldi	r19, 0xFF	; 255
     d86:	4f e7       	ldi	r20, 0x7F	; 127
     d88:	57 e4       	ldi	r21, 0x47	; 71
     d8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d8e:	18 16       	cp	r1, r24
     d90:	4c f5       	brge	.+82     	; 0xde4 <CLCD_void_Execute+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d92:	6b 85       	ldd	r22, Y+11	; 0x0b
     d94:	7c 85       	ldd	r23, Y+12	; 0x0c
     d96:	8d 85       	ldd	r24, Y+13	; 0x0d
     d98:	9e 85       	ldd	r25, Y+14	; 0x0e
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e2       	ldi	r20, 0x20	; 32
     da0:	51 e4       	ldi	r21, 0x41	; 65
     da2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     da6:	dc 01       	movw	r26, r24
     da8:	cb 01       	movw	r24, r22
     daa:	bc 01       	movw	r22, r24
     dac:	cd 01       	movw	r24, r26
     dae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db2:	dc 01       	movw	r26, r24
     db4:	cb 01       	movw	r24, r22
     db6:	9e 83       	std	Y+6, r25	; 0x06
     db8:	8d 83       	std	Y+5, r24	; 0x05
     dba:	0f c0       	rjmp	.+30     	; 0xdda <CLCD_void_Execute+0xd0>
     dbc:	88 ec       	ldi	r24, 0xC8	; 200
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	9c 83       	std	Y+4, r25	; 0x04
     dc2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	01 97       	sbiw	r24, 0x01	; 1
     dca:	f1 f7       	brne	.-4      	; 0xdc8 <CLCD_void_Execute+0xbe>
     dcc:	9c 83       	std	Y+4, r25	; 0x04
     dce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dd0:	8d 81       	ldd	r24, Y+5	; 0x05
     dd2:	9e 81       	ldd	r25, Y+6	; 0x06
     dd4:	01 97       	sbiw	r24, 0x01	; 1
     dd6:	9e 83       	std	Y+6, r25	; 0x06
     dd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dda:	8d 81       	ldd	r24, Y+5	; 0x05
     ddc:	9e 81       	ldd	r25, Y+6	; 0x06
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	69 f7       	brne	.-38     	; 0xdbc <CLCD_void_Execute+0xb2>
     de2:	14 c0       	rjmp	.+40     	; 0xe0c <CLCD_void_Execute+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	9e 83       	std	Y+6, r25	; 0x06
     df6:	8d 83       	std	Y+5, r24	; 0x05
     df8:	8d 81       	ldd	r24, Y+5	; 0x05
     dfa:	9e 81       	ldd	r25, Y+6	; 0x06
     dfc:	9a 83       	std	Y+2, r25	; 0x02
     dfe:	89 83       	std	Y+1, r24	; 0x01
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	01 97       	sbiw	r24, 0x01	; 1
     e06:	f1 f7       	brne	.-4      	; 0xe04 <CLCD_void_Execute+0xfa>
     e08:	9a 83       	std	Y+2, r25	; 0x02
     e0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_EN_PIN,DIO_LOW);
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	62 e0       	ldi	r22, 0x02	; 2
     e10:	40 e0       	ldi	r20, 0x00	; 0
     e12:	0e 94 26 08 	call	0x104c	; 0x104c <DIO_SetPinValue>
}
     e16:	2e 96       	adiw	r28, 0x0e	; 14
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <CLCD_void_SendData>:

void CLCD_void_SendData(u8 U8DataCopy)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	0f 92       	push	r0
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	89 83       	std	Y+1, r24	; 0x01
	// RS = 1 data Input
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN ,DIO_HIGH);
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	41 e0       	ldi	r20, 0x01	; 1
     e3a:	0e 94 26 08 	call	0x104c	; 0x104c <DIO_SetPinValue>
	// RW  0  for writing
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN ,DIO_LOW);
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	61 e0       	ldi	r22, 0x01	; 1
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	0e 94 26 08 	call	0x104c	; 0x104c <DIO_SetPinValue>
	DIO_SetPortValue(CLCD_DATA_PORT,U8DataCopy);
     e48:	82 e0       	ldi	r24, 0x02	; 2
     e4a:	69 81       	ldd	r22, Y+1	; 0x01
     e4c:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
	CLCD_void_Execute();
     e50:	0e 94 85 06 	call	0xd0a	; 0xd0a <CLCD_void_Execute>
}
     e54:	0f 90       	pop	r0
     e56:	cf 91       	pop	r28
     e58:	df 91       	pop	r29
     e5a:	08 95       	ret

00000e5c <CLCD_void_SendStringData>:

void CLCD_void_SendStringData(u8* String)
{
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	df 93       	push	r29
     e62:	cf 93       	push	r28
     e64:	00 d0       	rcall	.+0      	; 0xe66 <CLCD_void_SendStringData+0xa>
     e66:	0f 92       	push	r0
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	9b 83       	std	Y+3, r25	; 0x03
     e6e:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
     e70:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<strlen(String);i++)
     e72:	19 82       	std	Y+1, r1	; 0x01
     e74:	0e c0       	rjmp	.+28     	; 0xe92 <CLCD_void_SendStringData+0x36>
		CLCD_void_SendData(String[i]);
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	8a 81       	ldd	r24, Y+2	; 0x02
     e7e:	9b 81       	ldd	r25, Y+3	; 0x03
     e80:	fc 01       	movw	r30, r24
     e82:	e2 0f       	add	r30, r18
     e84:	f3 1f       	adc	r31, r19
     e86:	80 81       	ld	r24, Z
     e88:	0e 94 14 07 	call	0xe28	; 0xe28 <CLCD_void_SendData>
}

void CLCD_void_SendStringData(u8* String)
{
	u8 i=0;
	for(i=0;i<strlen(String);i++)
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	8f 5f       	subi	r24, 0xFF	; 255
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	08 2f       	mov	r16, r24
     e96:	10 e0       	ldi	r17, 0x00	; 0
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	9b 81       	ldd	r25, Y+3	; 0x03
     e9c:	0e 94 77 1e 	call	0x3cee	; 0x3cee <strlen>
     ea0:	08 17       	cp	r16, r24
     ea2:	19 07       	cpc	r17, r25
     ea4:	40 f3       	brcs	.-48     	; 0xe76 <CLCD_void_SendStringData+0x1a>
		CLCD_void_SendData(String[i]);
}
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	cf 91       	pop	r28
     eae:	df 91       	pop	r29
     eb0:	1f 91       	pop	r17
     eb2:	0f 91       	pop	r16
     eb4:	08 95       	ret

00000eb6 <CLCD_void_SendCommand>:

//RS =1 RW = 0 --> write;
void CLCD_void_SendCommand(u8 U8CommandCopy)
{
     eb6:	df 93       	push	r29
     eb8:	cf 93       	push	r28
     eba:	0f 92       	push	r0
     ebc:	cd b7       	in	r28, 0x3d	; 61
     ebe:	de b7       	in	r29, 0x3e	; 62
     ec0:	89 83       	std	Y+1, r24	; 0x01
	// RS = 0 Command Input
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RS_PIN ,DIO_LOW);
     ec2:	80 e0       	ldi	r24, 0x00	; 0
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	40 e0       	ldi	r20, 0x00	; 0
     ec8:	0e 94 26 08 	call	0x104c	; 0x104c <DIO_SetPinValue>
	// RW  0  for writing
	DIO_SetPinValue(CLCD_CTRL_PORT,CLCD_RW_PIN ,DIO_LOW);
     ecc:	80 e0       	ldi	r24, 0x00	; 0
     ece:	61 e0       	ldi	r22, 0x01	; 1
     ed0:	40 e0       	ldi	r20, 0x00	; 0
     ed2:	0e 94 26 08 	call	0x104c	; 0x104c <DIO_SetPinValue>
	DIO_SetPortValue(CLCD_DATA_PORT,U8CommandCopy);
     ed6:	82 e0       	ldi	r24, 0x02	; 2
     ed8:	69 81       	ldd	r22, Y+1	; 0x01
     eda:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
	CLCD_void_Execute();
     ede:	0e 94 85 06 	call	0xd0a	; 0xd0a <CLCD_void_Execute>
}
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	08 95       	ret

00000eea <CLCD_void_Init>:

void CLCD_void_Init()
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
     ef2:	2e 97       	sbiw	r28, 0x0e	; 14
     ef4:	0f b6       	in	r0, 0x3f	; 63
     ef6:	f8 94       	cli
     ef8:	de bf       	out	0x3e, r29	; 62
     efa:	0f be       	out	0x3f, r0	; 63
     efc:	cd bf       	out	0x3d, r28	; 61
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	a0 ef       	ldi	r26, 0xF0	; 240
     f04:	b1 e4       	ldi	r27, 0x41	; 65
     f06:	8b 87       	std	Y+11, r24	; 0x0b
     f08:	9c 87       	std	Y+12, r25	; 0x0c
     f0a:	ad 87       	std	Y+13, r26	; 0x0d
     f0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f10:	7c 85       	ldd	r23, Y+12	; 0x0c
     f12:	8d 85       	ldd	r24, Y+13	; 0x0d
     f14:	9e 85       	ldd	r25, Y+14	; 0x0e
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	4a ef       	ldi	r20, 0xFA	; 250
     f1c:	54 e4       	ldi	r21, 0x44	; 68
     f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f22:	dc 01       	movw	r26, r24
     f24:	cb 01       	movw	r24, r22
     f26:	8f 83       	std	Y+7, r24	; 0x07
     f28:	98 87       	std	Y+8, r25	; 0x08
     f2a:	a9 87       	std	Y+9, r26	; 0x09
     f2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f2e:	6f 81       	ldd	r22, Y+7	; 0x07
     f30:	78 85       	ldd	r23, Y+8	; 0x08
     f32:	89 85       	ldd	r24, Y+9	; 0x09
     f34:	9a 85       	ldd	r25, Y+10	; 0x0a
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e8       	ldi	r20, 0x80	; 128
     f3c:	5f e3       	ldi	r21, 0x3F	; 63
     f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f42:	88 23       	and	r24, r24
     f44:	2c f4       	brge	.+10     	; 0xf50 <CLCD_void_Init+0x66>
		__ticks = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9e 83       	std	Y+6, r25	; 0x06
     f4c:	8d 83       	std	Y+5, r24	; 0x05
     f4e:	3f c0       	rjmp	.+126    	; 0xfce <CLCD_void_Init+0xe4>
	else if (__tmp > 65535)
     f50:	6f 81       	ldd	r22, Y+7	; 0x07
     f52:	78 85       	ldd	r23, Y+8	; 0x08
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	3f ef       	ldi	r19, 0xFF	; 255
     f5c:	4f e7       	ldi	r20, 0x7F	; 127
     f5e:	57 e4       	ldi	r21, 0x47	; 71
     f60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f64:	18 16       	cp	r1, r24
     f66:	4c f5       	brge	.+82     	; 0xfba <CLCD_void_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f68:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	40 e2       	ldi	r20, 0x20	; 32
     f76:	51 e4       	ldi	r21, 0x41	; 65
     f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	bc 01       	movw	r22, r24
     f82:	cd 01       	movw	r24, r26
     f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9e 83       	std	Y+6, r25	; 0x06
     f8e:	8d 83       	std	Y+5, r24	; 0x05
     f90:	0f c0       	rjmp	.+30     	; 0xfb0 <CLCD_void_Init+0xc6>
     f92:	88 ec       	ldi	r24, 0xC8	; 200
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 83       	std	Y+3, r24	; 0x03
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	9c 81       	ldd	r25, Y+4	; 0x04
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	f1 f7       	brne	.-4      	; 0xf9e <CLCD_void_Init+0xb4>
     fa2:	9c 83       	std	Y+4, r25	; 0x04
     fa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	9e 83       	std	Y+6, r25	; 0x06
     fae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	00 97       	sbiw	r24, 0x00	; 0
     fb6:	69 f7       	brne	.-38     	; 0xf92 <CLCD_void_Init+0xa8>
     fb8:	14 c0       	rjmp	.+40     	; 0xfe2 <CLCD_void_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fba:	6f 81       	ldd	r22, Y+7	; 0x07
     fbc:	78 85       	ldd	r23, Y+8	; 0x08
     fbe:	89 85       	ldd	r24, Y+9	; 0x09
     fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	9e 83       	std	Y+6, r25	; 0x06
     fcc:	8d 83       	std	Y+5, r24	; 0x05
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	01 97       	sbiw	r24, 0x01	; 1
     fdc:	f1 f7       	brne	.-4      	; 0xfda <CLCD_void_Init+0xf0>
     fde:	9a 83       	std	Y+2, r25	; 0x02
     fe0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(30);
	CLCD_void_SetPinsDirection();
     fe2:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <CLCD_void_SetPinsDirection>
	CLCD_void_SendCommand(CLCD_INIT_FunctionSet_2Lines_SmallFont);
     fe6:	88 e3       	ldi	r24, 0x38	; 56
     fe8:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CLCD_void_SendCommand>
	CLCD_void_SendCommand(CLCD_INIT_DisplayControl_WithCursor);
     fec:	8f e0       	ldi	r24, 0x0F	; 15
     fee:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CLCD_void_SendCommand>
	CLCD_void_SendCommand(CLCD_INIT_DisplayClear);
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CLCD_void_SendCommand>
}
     ff8:	2e 96       	adiw	r28, 0x0e	; 14
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <CLCD_VOID_SetCursorPosition>:
void CLCD_VOID_SetCursorPosition(u8 LineNum, u8 ColumnNum) {
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <CLCD_VOID_SetCursorPosition+0x6>
    1010:	0f 92       	push	r0
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	8a 83       	std	Y+2, r24	; 0x02
    1018:	6b 83       	std	Y+3, r22	; 0x03
    if (LineNum < CLCD_Number_of_Lines && ColumnNum < CLCD_Number_of_Line_Chars)
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	82 30       	cpi	r24, 0x02	; 2
    101e:	80 f4       	brcc	.+32     	; 0x1040 <CLCD_VOID_SetCursorPosition+0x36>
    1020:	8b 81       	ldd	r24, Y+3	; 0x03
    1022:	80 31       	cpi	r24, 0x10	; 16
    1024:	68 f4       	brcc	.+26     	; 0x1040 <CLCD_VOID_SetCursorPosition+0x36>
    {
        u8 Position;// = (LineNum * CLCD_Number_of_Line_Chars) + ColumnNum;
        if (LineNum == CLCD_FirstLine)
    1026:	8a 81       	ldd	r24, Y+2	; 0x02
    1028:	88 23       	and	r24, r24
    102a:	21 f4       	brne	.+8      	; 0x1034 <CLCD_VOID_SetCursorPosition+0x2a>
        	Position = StartingAddressOfLine0 + ColumnNum;
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	80 58       	subi	r24, 0x80	; 128
    1030:	89 83       	std	Y+1, r24	; 0x01
    1032:	03 c0       	rjmp	.+6      	; 0x103a <CLCD_VOID_SetCursorPosition+0x30>
        else // LineNum == CLCD_SecondLine
        	Position = StartingAddressOfLine1 + ColumnNum;
    1034:	8b 81       	ldd	r24, Y+3	; 0x03
    1036:	80 54       	subi	r24, 0x40	; 64
    1038:	89 83       	std	Y+1, r24	; 0x01
        CLCD_void_SendCommand(Position);  // Set cursor to the new position
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CLCD_void_SendCommand>
    }
}
    1040:	0f 90       	pop	r0
    1042:	0f 90       	pop	r0
    1044:	0f 90       	pop	r0
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	08 95       	ret

0000104c <DIO_SetPinValue>:
#include"avr/io.h"
#include<util/delay.h>
#include<stdio.h>
//IO Pins
void DIO_SetPinValue(u8 U8PortIdCopy,u8 U8PinIdCopy,u8 U8PinValueCopy)
{
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	27 97       	sbiw	r28, 0x07	; 7
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	f8 94       	cli
    105a:	de bf       	out	0x3e, r29	; 62
    105c:	0f be       	out	0x3f, r0	; 63
    105e:	cd bf       	out	0x3d, r28	; 61
    1060:	89 83       	std	Y+1, r24	; 0x01
    1062:	6a 83       	std	Y+2, r22	; 0x02
    1064:	4b 83       	std	Y+3, r20	; 0x03
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
    1066:	89 81       	ldd	r24, Y+1	; 0x01
    1068:	84 30       	cpi	r24, 0x04	; 4
    106a:	08 f0       	brcs	.+2      	; 0x106e <DIO_SetPinValue+0x22>
    106c:	ee c0       	rjmp	.+476    	; 0x124a <DIO_SetPinValue+0x1fe>
    106e:	8a 81       	ldd	r24, Y+2	; 0x02
    1070:	88 30       	cpi	r24, 0x08	; 8
    1072:	08 f0       	brcs	.+2      	; 0x1076 <DIO_SetPinValue+0x2a>
    1074:	ea c0       	rjmp	.+468    	; 0x124a <DIO_SetPinValue+0x1fe>
	{
		if(U8PinValueCopy==DIO_HIGH)
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	09 f0       	breq	.+2      	; 0x107e <DIO_SetPinValue+0x32>
    107c:	6f c0       	rjmp	.+222    	; 0x115c <DIO_SetPinValue+0x110>
		{
			switch(U8PortIdCopy)
    107e:	89 81       	ldd	r24, Y+1	; 0x01
    1080:	28 2f       	mov	r18, r24
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	3f 83       	std	Y+7, r19	; 0x07
    1086:	2e 83       	std	Y+6, r18	; 0x06
    1088:	8e 81       	ldd	r24, Y+6	; 0x06
    108a:	9f 81       	ldd	r25, Y+7	; 0x07
    108c:	81 30       	cpi	r24, 0x01	; 1
    108e:	91 05       	cpc	r25, r1
    1090:	49 f1       	breq	.+82     	; 0x10e4 <DIO_SetPinValue+0x98>
    1092:	2e 81       	ldd	r18, Y+6	; 0x06
    1094:	3f 81       	ldd	r19, Y+7	; 0x07
    1096:	22 30       	cpi	r18, 0x02	; 2
    1098:	31 05       	cpc	r19, r1
    109a:	2c f4       	brge	.+10     	; 0x10a6 <DIO_SetPinValue+0x5a>
    109c:	8e 81       	ldd	r24, Y+6	; 0x06
    109e:	9f 81       	ldd	r25, Y+7	; 0x07
    10a0:	00 97       	sbiw	r24, 0x00	; 0
    10a2:	61 f0       	breq	.+24     	; 0x10bc <DIO_SetPinValue+0x70>
    10a4:	d2 c0       	rjmp	.+420    	; 0x124a <DIO_SetPinValue+0x1fe>
    10a6:	2e 81       	ldd	r18, Y+6	; 0x06
    10a8:	3f 81       	ldd	r19, Y+7	; 0x07
    10aa:	22 30       	cpi	r18, 0x02	; 2
    10ac:	31 05       	cpc	r19, r1
    10ae:	71 f1       	breq	.+92     	; 0x110c <DIO_SetPinValue+0xc0>
    10b0:	8e 81       	ldd	r24, Y+6	; 0x06
    10b2:	9f 81       	ldd	r25, Y+7	; 0x07
    10b4:	83 30       	cpi	r24, 0x03	; 3
    10b6:	91 05       	cpc	r25, r1
    10b8:	e9 f1       	breq	.+122    	; 0x1134 <DIO_SetPinValue+0xe8>
    10ba:	c7 c0       	rjmp	.+398    	; 0x124a <DIO_SetPinValue+0x1fe>
			{
				case DIO_PORTA: SET_BIT(PORTA,U8PinIdCopy); break;
    10bc:	ab e3       	ldi	r26, 0x3B	; 59
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	eb e3       	ldi	r30, 0x3B	; 59
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <DIO_SetPinValue+0x8e>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <DIO_SetPinValue+0x8a>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	b3 c0       	rjmp	.+358    	; 0x124a <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: SET_BIT(PORTB,U8PinIdCopy); break;
    10e4:	a8 e3       	ldi	r26, 0x38	; 56
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e8 e3       	ldi	r30, 0x38	; 56
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_SetPinValue+0xb6>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_SetPinValue+0xb2>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	9f c0       	rjmp	.+318    	; 0x124a <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: SET_BIT(PORTC,U8PinIdCopy); break;
    110c:	a5 e3       	ldi	r26, 0x35	; 53
    110e:	b0 e0       	ldi	r27, 0x00	; 0
    1110:	e5 e3       	ldi	r30, 0x35	; 53
    1112:	f0 e0       	ldi	r31, 0x00	; 0
    1114:	80 81       	ld	r24, Z
    1116:	48 2f       	mov	r20, r24
    1118:	8a 81       	ldd	r24, Y+2	; 0x02
    111a:	28 2f       	mov	r18, r24
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	02 2e       	mov	r0, r18
    1124:	02 c0       	rjmp	.+4      	; 0x112a <DIO_SetPinValue+0xde>
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	0a 94       	dec	r0
    112c:	e2 f7       	brpl	.-8      	; 0x1126 <DIO_SetPinValue+0xda>
    112e:	84 2b       	or	r24, r20
    1130:	8c 93       	st	X, r24
    1132:	8b c0       	rjmp	.+278    	; 0x124a <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: SET_BIT(PORTD,U8PinIdCopy); break;
    1134:	a2 e3       	ldi	r26, 0x32	; 50
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	e2 e3       	ldi	r30, 0x32	; 50
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	48 2f       	mov	r20, r24
    1140:	8a 81       	ldd	r24, Y+2	; 0x02
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	02 2e       	mov	r0, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <DIO_SetPinValue+0x106>
    114e:	88 0f       	add	r24, r24
    1150:	99 1f       	adc	r25, r25
    1152:	0a 94       	dec	r0
    1154:	e2 f7       	brpl	.-8      	; 0x114e <DIO_SetPinValue+0x102>
    1156:	84 2b       	or	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	77 c0       	rjmp	.+238    	; 0x124a <DIO_SetPinValue+0x1fe>
			}
		}
		else if(U8PinValueCopy==DIO_LOW)
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	88 23       	and	r24, r24
    1160:	09 f0       	breq	.+2      	; 0x1164 <DIO_SetPinValue+0x118>
    1162:	73 c0       	rjmp	.+230    	; 0x124a <DIO_SetPinValue+0x1fe>
		{
			switch(U8PortIdCopy)
    1164:	89 81       	ldd	r24, Y+1	; 0x01
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	3d 83       	std	Y+5, r19	; 0x05
    116c:	2c 83       	std	Y+4, r18	; 0x04
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	9d 81       	ldd	r25, Y+5	; 0x05
    1172:	81 30       	cpi	r24, 0x01	; 1
    1174:	91 05       	cpc	r25, r1
    1176:	59 f1       	breq	.+86     	; 0x11ce <DIO_SetPinValue+0x182>
    1178:	2c 81       	ldd	r18, Y+4	; 0x04
    117a:	3d 81       	ldd	r19, Y+5	; 0x05
    117c:	22 30       	cpi	r18, 0x02	; 2
    117e:	31 05       	cpc	r19, r1
    1180:	2c f4       	brge	.+10     	; 0x118c <DIO_SetPinValue+0x140>
    1182:	8c 81       	ldd	r24, Y+4	; 0x04
    1184:	9d 81       	ldd	r25, Y+5	; 0x05
    1186:	00 97       	sbiw	r24, 0x00	; 0
    1188:	69 f0       	breq	.+26     	; 0x11a4 <DIO_SetPinValue+0x158>
    118a:	5f c0       	rjmp	.+190    	; 0x124a <DIO_SetPinValue+0x1fe>
    118c:	2c 81       	ldd	r18, Y+4	; 0x04
    118e:	3d 81       	ldd	r19, Y+5	; 0x05
    1190:	22 30       	cpi	r18, 0x02	; 2
    1192:	31 05       	cpc	r19, r1
    1194:	89 f1       	breq	.+98     	; 0x11f8 <DIO_SetPinValue+0x1ac>
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	83 30       	cpi	r24, 0x03	; 3
    119c:	91 05       	cpc	r25, r1
    119e:	09 f4       	brne	.+2      	; 0x11a2 <DIO_SetPinValue+0x156>
    11a0:	40 c0       	rjmp	.+128    	; 0x1222 <DIO_SetPinValue+0x1d6>
    11a2:	53 c0       	rjmp	.+166    	; 0x124a <DIO_SetPinValue+0x1fe>
			{
				case DIO_PORTA: CLR_BIT(PORTA,U8PinIdCopy); break;
    11a4:	ab e3       	ldi	r26, 0x3B	; 59
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	eb e3       	ldi	r30, 0x3B	; 59
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8a 81       	ldd	r24, Y+2	; 0x02
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_SetPinValue+0x176>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_SetPinValue+0x172>
    11c6:	80 95       	com	r24
    11c8:	84 23       	and	r24, r20
    11ca:	8c 93       	st	X, r24
    11cc:	3e c0       	rjmp	.+124    	; 0x124a <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: CLR_BIT(PORTB,U8PinIdCopy); break;
    11ce:	a8 e3       	ldi	r26, 0x38	; 56
    11d0:	b0 e0       	ldi	r27, 0x00	; 0
    11d2:	e8 e3       	ldi	r30, 0x38	; 56
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	48 2f       	mov	r20, r24
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	02 2e       	mov	r0, r18
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <DIO_SetPinValue+0x1a0>
    11e8:	88 0f       	add	r24, r24
    11ea:	99 1f       	adc	r25, r25
    11ec:	0a 94       	dec	r0
    11ee:	e2 f7       	brpl	.-8      	; 0x11e8 <DIO_SetPinValue+0x19c>
    11f0:	80 95       	com	r24
    11f2:	84 23       	and	r24, r20
    11f4:	8c 93       	st	X, r24
    11f6:	29 c0       	rjmp	.+82     	; 0x124a <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: CLR_BIT(PORTC,U8PinIdCopy); break;
    11f8:	a5 e3       	ldi	r26, 0x35	; 53
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e5 e3       	ldi	r30, 0x35	; 53
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <DIO_SetPinValue+0x1ca>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <DIO_SetPinValue+0x1c6>
    121a:	80 95       	com	r24
    121c:	84 23       	and	r24, r20
    121e:	8c 93       	st	X, r24
    1220:	14 c0       	rjmp	.+40     	; 0x124a <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: CLR_BIT(PORTD,U8PinIdCopy); break;
    1222:	a2 e3       	ldi	r26, 0x32	; 50
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	e2 e3       	ldi	r30, 0x32	; 50
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	48 2f       	mov	r20, r24
    122e:	8a 81       	ldd	r24, Y+2	; 0x02
    1230:	28 2f       	mov	r18, r24
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	02 2e       	mov	r0, r18
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_SetPinValue+0x1f4>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	0a 94       	dec	r0
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_SetPinValue+0x1f0>
    1244:	80 95       	com	r24
    1246:	84 23       	and	r24, r20
    1248:	8c 93       	st	X, r24
	}
	else
	{
		//out of range
	}
}
    124a:	27 96       	adiw	r28, 0x07	; 7
    124c:	0f b6       	in	r0, 0x3f	; 63
    124e:	f8 94       	cli
    1250:	de bf       	out	0x3e, r29	; 62
    1252:	0f be       	out	0x3f, r0	; 63
    1254:	cd bf       	out	0x3d, r28	; 61
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <DIO_SetPinDirection>:

void DIO_SetPinDirection(u8 U8PortIdCopy,u8 U8PinIdCopy,u8 U8PinDirCopy)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
    1264:	27 97       	sbiw	r28, 0x07	; 7
    1266:	0f b6       	in	r0, 0x3f	; 63
    1268:	f8 94       	cli
    126a:	de bf       	out	0x3e, r29	; 62
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	cd bf       	out	0x3d, r28	; 61
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	6a 83       	std	Y+2, r22	; 0x02
    1274:	4b 83       	std	Y+3, r20	; 0x03
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	84 30       	cpi	r24, 0x04	; 4
    127a:	08 f0       	brcs	.+2      	; 0x127e <DIO_SetPinDirection+0x22>
    127c:	ee c0       	rjmp	.+476    	; 0x145a <DIO_SetPinDirection+0x1fe>
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	88 30       	cpi	r24, 0x08	; 8
    1282:	08 f0       	brcs	.+2      	; 0x1286 <DIO_SetPinDirection+0x2a>
    1284:	ea c0       	rjmp	.+468    	; 0x145a <DIO_SetPinDirection+0x1fe>
		{
			if(U8PinDirCopy==DIO_OUTPUT)
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	81 30       	cpi	r24, 0x01	; 1
    128a:	09 f0       	breq	.+2      	; 0x128e <DIO_SetPinDirection+0x32>
    128c:	6f c0       	rjmp	.+222    	; 0x136c <DIO_SetPinDirection+0x110>
			{
				switch(U8PortIdCopy)
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	28 2f       	mov	r18, r24
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	3f 83       	std	Y+7, r19	; 0x07
    1296:	2e 83       	std	Y+6, r18	; 0x06
    1298:	8e 81       	ldd	r24, Y+6	; 0x06
    129a:	9f 81       	ldd	r25, Y+7	; 0x07
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	91 05       	cpc	r25, r1
    12a0:	49 f1       	breq	.+82     	; 0x12f4 <DIO_SetPinDirection+0x98>
    12a2:	2e 81       	ldd	r18, Y+6	; 0x06
    12a4:	3f 81       	ldd	r19, Y+7	; 0x07
    12a6:	22 30       	cpi	r18, 0x02	; 2
    12a8:	31 05       	cpc	r19, r1
    12aa:	2c f4       	brge	.+10     	; 0x12b6 <DIO_SetPinDirection+0x5a>
    12ac:	8e 81       	ldd	r24, Y+6	; 0x06
    12ae:	9f 81       	ldd	r25, Y+7	; 0x07
    12b0:	00 97       	sbiw	r24, 0x00	; 0
    12b2:	61 f0       	breq	.+24     	; 0x12cc <DIO_SetPinDirection+0x70>
    12b4:	d2 c0       	rjmp	.+420    	; 0x145a <DIO_SetPinDirection+0x1fe>
    12b6:	2e 81       	ldd	r18, Y+6	; 0x06
    12b8:	3f 81       	ldd	r19, Y+7	; 0x07
    12ba:	22 30       	cpi	r18, 0x02	; 2
    12bc:	31 05       	cpc	r19, r1
    12be:	71 f1       	breq	.+92     	; 0x131c <DIO_SetPinDirection+0xc0>
    12c0:	8e 81       	ldd	r24, Y+6	; 0x06
    12c2:	9f 81       	ldd	r25, Y+7	; 0x07
    12c4:	83 30       	cpi	r24, 0x03	; 3
    12c6:	91 05       	cpc	r25, r1
    12c8:	e9 f1       	breq	.+122    	; 0x1344 <DIO_SetPinDirection+0xe8>
    12ca:	c7 c0       	rjmp	.+398    	; 0x145a <DIO_SetPinDirection+0x1fe>
				{
					case DIO_PORTA: SET_BIT(DDRA,U8PinIdCopy); break;
    12cc:	aa e3       	ldi	r26, 0x3A	; 58
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ea e3       	ldi	r30, 0x3A	; 58
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	48 2f       	mov	r20, r24
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	28 2f       	mov	r18, r24
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 2e       	mov	r0, r18
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <DIO_SetPinDirection+0x8e>
    12e6:	88 0f       	add	r24, r24
    12e8:	99 1f       	adc	r25, r25
    12ea:	0a 94       	dec	r0
    12ec:	e2 f7       	brpl	.-8      	; 0x12e6 <DIO_SetPinDirection+0x8a>
    12ee:	84 2b       	or	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	b3 c0       	rjmp	.+358    	; 0x145a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTB: SET_BIT(DDRB,U8PinIdCopy); break;
    12f4:	a7 e3       	ldi	r26, 0x37	; 55
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e7 e3       	ldi	r30, 0x37	; 55
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_SetPinDirection+0xb6>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_SetPinDirection+0xb2>
    1316:	84 2b       	or	r24, r20
    1318:	8c 93       	st	X, r24
    131a:	9f c0       	rjmp	.+318    	; 0x145a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTC: SET_BIT(DDRC,U8PinIdCopy); break;
    131c:	a4 e3       	ldi	r26, 0x34	; 52
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e4 e3       	ldi	r30, 0x34	; 52
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	48 2f       	mov	r20, r24
    1328:	8a 81       	ldd	r24, Y+2	; 0x02
    132a:	28 2f       	mov	r18, r24
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	81 e0       	ldi	r24, 0x01	; 1
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	02 2e       	mov	r0, r18
    1334:	02 c0       	rjmp	.+4      	; 0x133a <DIO_SetPinDirection+0xde>
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	0a 94       	dec	r0
    133c:	e2 f7       	brpl	.-8      	; 0x1336 <DIO_SetPinDirection+0xda>
    133e:	84 2b       	or	r24, r20
    1340:	8c 93       	st	X, r24
    1342:	8b c0       	rjmp	.+278    	; 0x145a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTD: SET_BIT(DDRD,U8PinIdCopy); break;
    1344:	a1 e3       	ldi	r26, 0x31	; 49
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	e1 e3       	ldi	r30, 0x31	; 49
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	48 2f       	mov	r20, r24
    1350:	8a 81       	ldd	r24, Y+2	; 0x02
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	02 2e       	mov	r0, r18
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <DIO_SetPinDirection+0x106>
    135e:	88 0f       	add	r24, r24
    1360:	99 1f       	adc	r25, r25
    1362:	0a 94       	dec	r0
    1364:	e2 f7       	brpl	.-8      	; 0x135e <DIO_SetPinDirection+0x102>
    1366:	84 2b       	or	r24, r20
    1368:	8c 93       	st	X, r24
    136a:	77 c0       	rjmp	.+238    	; 0x145a <DIO_SetPinDirection+0x1fe>
				}
			}
			else if(U8PinDirCopy==DIO_INPUT)
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	88 23       	and	r24, r24
    1370:	09 f0       	breq	.+2      	; 0x1374 <DIO_SetPinDirection+0x118>
    1372:	73 c0       	rjmp	.+230    	; 0x145a <DIO_SetPinDirection+0x1fe>
			{
				switch(U8PortIdCopy)
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	28 2f       	mov	r18, r24
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	3d 83       	std	Y+5, r19	; 0x05
    137c:	2c 83       	std	Y+4, r18	; 0x04
    137e:	8c 81       	ldd	r24, Y+4	; 0x04
    1380:	9d 81       	ldd	r25, Y+5	; 0x05
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	91 05       	cpc	r25, r1
    1386:	59 f1       	breq	.+86     	; 0x13de <DIO_SetPinDirection+0x182>
    1388:	2c 81       	ldd	r18, Y+4	; 0x04
    138a:	3d 81       	ldd	r19, Y+5	; 0x05
    138c:	22 30       	cpi	r18, 0x02	; 2
    138e:	31 05       	cpc	r19, r1
    1390:	2c f4       	brge	.+10     	; 0x139c <DIO_SetPinDirection+0x140>
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	00 97       	sbiw	r24, 0x00	; 0
    1398:	69 f0       	breq	.+26     	; 0x13b4 <DIO_SetPinDirection+0x158>
    139a:	5f c0       	rjmp	.+190    	; 0x145a <DIO_SetPinDirection+0x1fe>
    139c:	2c 81       	ldd	r18, Y+4	; 0x04
    139e:	3d 81       	ldd	r19, Y+5	; 0x05
    13a0:	22 30       	cpi	r18, 0x02	; 2
    13a2:	31 05       	cpc	r19, r1
    13a4:	89 f1       	breq	.+98     	; 0x1408 <DIO_SetPinDirection+0x1ac>
    13a6:	8c 81       	ldd	r24, Y+4	; 0x04
    13a8:	9d 81       	ldd	r25, Y+5	; 0x05
    13aa:	83 30       	cpi	r24, 0x03	; 3
    13ac:	91 05       	cpc	r25, r1
    13ae:	09 f4       	brne	.+2      	; 0x13b2 <DIO_SetPinDirection+0x156>
    13b0:	40 c0       	rjmp	.+128    	; 0x1432 <DIO_SetPinDirection+0x1d6>
    13b2:	53 c0       	rjmp	.+166    	; 0x145a <DIO_SetPinDirection+0x1fe>
				{
					case DIO_PORTA: CLR_BIT(DDRA,U8PinIdCopy); break;
    13b4:	aa e3       	ldi	r26, 0x3A	; 58
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	ea e3       	ldi	r30, 0x3A	; 58
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	48 2f       	mov	r20, r24
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	81 e0       	ldi	r24, 0x01	; 1
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	02 2e       	mov	r0, r18
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <DIO_SetPinDirection+0x176>
    13ce:	88 0f       	add	r24, r24
    13d0:	99 1f       	adc	r25, r25
    13d2:	0a 94       	dec	r0
    13d4:	e2 f7       	brpl	.-8      	; 0x13ce <DIO_SetPinDirection+0x172>
    13d6:	80 95       	com	r24
    13d8:	84 23       	and	r24, r20
    13da:	8c 93       	st	X, r24
    13dc:	3e c0       	rjmp	.+124    	; 0x145a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTB: CLR_BIT(DDRB,U8PinIdCopy); break;
    13de:	a7 e3       	ldi	r26, 0x37	; 55
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e7 e3       	ldi	r30, 0x37	; 55
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <DIO_SetPinDirection+0x1a0>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <DIO_SetPinDirection+0x19c>
    1400:	80 95       	com	r24
    1402:	84 23       	and	r24, r20
    1404:	8c 93       	st	X, r24
    1406:	29 c0       	rjmp	.+82     	; 0x145a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTC: CLR_BIT(DDRC,U8PinIdCopy); break;
    1408:	a4 e3       	ldi	r26, 0x34	; 52
    140a:	b0 e0       	ldi	r27, 0x00	; 0
    140c:	e4 e3       	ldi	r30, 0x34	; 52
    140e:	f0 e0       	ldi	r31, 0x00	; 0
    1410:	80 81       	ld	r24, Z
    1412:	48 2f       	mov	r20, r24
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	81 e0       	ldi	r24, 0x01	; 1
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	02 2e       	mov	r0, r18
    1420:	02 c0       	rjmp	.+4      	; 0x1426 <DIO_SetPinDirection+0x1ca>
    1422:	88 0f       	add	r24, r24
    1424:	99 1f       	adc	r25, r25
    1426:	0a 94       	dec	r0
    1428:	e2 f7       	brpl	.-8      	; 0x1422 <DIO_SetPinDirection+0x1c6>
    142a:	80 95       	com	r24
    142c:	84 23       	and	r24, r20
    142e:	8c 93       	st	X, r24
    1430:	14 c0       	rjmp	.+40     	; 0x145a <DIO_SetPinDirection+0x1fe>
					case DIO_PORTD: CLR_BIT(DDRD,U8PinIdCopy); break;
    1432:	a1 e3       	ldi	r26, 0x31	; 49
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	e1 e3       	ldi	r30, 0x31	; 49
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	8a 81       	ldd	r24, Y+2	; 0x02
    1440:	28 2f       	mov	r18, r24
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	02 2e       	mov	r0, r18
    144a:	02 c0       	rjmp	.+4      	; 0x1450 <DIO_SetPinDirection+0x1f4>
    144c:	88 0f       	add	r24, r24
    144e:	99 1f       	adc	r25, r25
    1450:	0a 94       	dec	r0
    1452:	e2 f7       	brpl	.-8      	; 0x144c <DIO_SetPinDirection+0x1f0>
    1454:	80 95       	com	r24
    1456:	84 23       	and	r24, r20
    1458:	8c 93       	st	X, r24

				}
			}

		}
}
    145a:	27 96       	adiw	r28, 0x07	; 7
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <DIO_GetPinValue>:

u8 DIO_GetPinValue(u8 U8PortIdCopy,u8 U8PinIdCopy)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <DIO_GetPinValue+0x6>
    1472:	00 d0       	rcall	.+0      	; 0x1474 <DIO_GetPinValue+0x8>
    1474:	0f 92       	push	r0
    1476:	cd b7       	in	r28, 0x3d	; 61
    1478:	de b7       	in	r29, 0x3e	; 62
    147a:	89 83       	std	Y+1, r24	; 0x01
    147c:	6a 83       	std	Y+2, r22	; 0x02
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	84 30       	cpi	r24, 0x04	; 4
    1482:	08 f0       	brcs	.+2      	; 0x1486 <DIO_GetPinValue+0x1a>
    1484:	70 c0       	rjmp	.+224    	; 0x1566 <DIO_GetPinValue+0xfa>
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	88 30       	cpi	r24, 0x08	; 8
    148a:	08 f0       	brcs	.+2      	; 0x148e <DIO_GetPinValue+0x22>
    148c:	6c c0       	rjmp	.+216    	; 0x1566 <DIO_GetPinValue+0xfa>
	{
		switch(U8PortIdCopy)
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	28 2f       	mov	r18, r24
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	3d 83       	std	Y+5, r19	; 0x05
    1496:	2c 83       	std	Y+4, r18	; 0x04
    1498:	4c 81       	ldd	r20, Y+4	; 0x04
    149a:	5d 81       	ldd	r21, Y+5	; 0x05
    149c:	41 30       	cpi	r20, 0x01	; 1
    149e:	51 05       	cpc	r21, r1
    14a0:	49 f1       	breq	.+82     	; 0x14f4 <DIO_GetPinValue+0x88>
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	9d 81       	ldd	r25, Y+5	; 0x05
    14a6:	82 30       	cpi	r24, 0x02	; 2
    14a8:	91 05       	cpc	r25, r1
    14aa:	34 f4       	brge	.+12     	; 0x14b8 <DIO_GetPinValue+0x4c>
    14ac:	2c 81       	ldd	r18, Y+4	; 0x04
    14ae:	3d 81       	ldd	r19, Y+5	; 0x05
    14b0:	21 15       	cp	r18, r1
    14b2:	31 05       	cpc	r19, r1
    14b4:	61 f0       	breq	.+24     	; 0x14ce <DIO_GetPinValue+0x62>
    14b6:	57 c0       	rjmp	.+174    	; 0x1566 <DIO_GetPinValue+0xfa>
    14b8:	4c 81       	ldd	r20, Y+4	; 0x04
    14ba:	5d 81       	ldd	r21, Y+5	; 0x05
    14bc:	42 30       	cpi	r20, 0x02	; 2
    14be:	51 05       	cpc	r21, r1
    14c0:	61 f1       	breq	.+88     	; 0x151a <DIO_GetPinValue+0xae>
    14c2:	8c 81       	ldd	r24, Y+4	; 0x04
    14c4:	9d 81       	ldd	r25, Y+5	; 0x05
    14c6:	83 30       	cpi	r24, 0x03	; 3
    14c8:	91 05       	cpc	r25, r1
    14ca:	d1 f1       	breq	.+116    	; 0x1540 <DIO_GetPinValue+0xd4>
    14cc:	4c c0       	rjmp	.+152    	; 0x1566 <DIO_GetPinValue+0xfa>
		{
			case DIO_PORTA: return GET_BIT(PINA,U8PinIdCopy); break;
    14ce:	e9 e3       	ldi	r30, 0x39	; 57
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	80 81       	ld	r24, Z
    14d4:	28 2f       	mov	r18, r24
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	88 2f       	mov	r24, r24
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a9 01       	movw	r20, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_GetPinValue+0x7a>
    14e2:	55 95       	asr	r21
    14e4:	47 95       	ror	r20
    14e6:	8a 95       	dec	r24
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <DIO_GetPinValue+0x76>
    14ea:	ca 01       	movw	r24, r20
    14ec:	58 2f       	mov	r21, r24
    14ee:	51 70       	andi	r21, 0x01	; 1
    14f0:	5b 83       	std	Y+3, r21	; 0x03
    14f2:	3b c0       	rjmp	.+118    	; 0x156a <DIO_GetPinValue+0xfe>
			case DIO_PORTB: return GET_BIT(PINB,U8PinIdCopy); break;
    14f4:	e6 e3       	ldi	r30, 0x36	; 54
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	28 2f       	mov	r18, r24
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	88 2f       	mov	r24, r24
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	a9 01       	movw	r20, r18
    1506:	02 c0       	rjmp	.+4      	; 0x150c <DIO_GetPinValue+0xa0>
    1508:	55 95       	asr	r21
    150a:	47 95       	ror	r20
    150c:	8a 95       	dec	r24
    150e:	e2 f7       	brpl	.-8      	; 0x1508 <DIO_GetPinValue+0x9c>
    1510:	ca 01       	movw	r24, r20
    1512:	58 2f       	mov	r21, r24
    1514:	51 70       	andi	r21, 0x01	; 1
    1516:	5b 83       	std	Y+3, r21	; 0x03
    1518:	28 c0       	rjmp	.+80     	; 0x156a <DIO_GetPinValue+0xfe>
			case DIO_PORTC: return GET_BIT(PINC,U8PinIdCopy); break;
    151a:	e3 e3       	ldi	r30, 0x33	; 51
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	8a 81       	ldd	r24, Y+2	; 0x02
    1526:	88 2f       	mov	r24, r24
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	a9 01       	movw	r20, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <DIO_GetPinValue+0xc6>
    152e:	55 95       	asr	r21
    1530:	47 95       	ror	r20
    1532:	8a 95       	dec	r24
    1534:	e2 f7       	brpl	.-8      	; 0x152e <DIO_GetPinValue+0xc2>
    1536:	ca 01       	movw	r24, r20
    1538:	58 2f       	mov	r21, r24
    153a:	51 70       	andi	r21, 0x01	; 1
    153c:	5b 83       	std	Y+3, r21	; 0x03
    153e:	15 c0       	rjmp	.+42     	; 0x156a <DIO_GetPinValue+0xfe>
			case DIO_PORTD: return GET_BIT(PIND,U8PinIdCopy); break;
    1540:	e0 e3       	ldi	r30, 0x30	; 48
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	88 2f       	mov	r24, r24
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	a9 01       	movw	r20, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_GetPinValue+0xec>
    1554:	55 95       	asr	r21
    1556:	47 95       	ror	r20
    1558:	8a 95       	dec	r24
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_GetPinValue+0xe8>
    155c:	ca 01       	movw	r24, r20
    155e:	58 2f       	mov	r21, r24
    1560:	51 70       	andi	r21, 0x01	; 1
    1562:	5b 83       	std	Y+3, r21	; 0x03
    1564:	02 c0       	rjmp	.+4      	; 0x156a <DIO_GetPinValue+0xfe>
		}
	}

	return 0xFF;
    1566:	8f ef       	ldi	r24, 0xFF	; 255
    1568:	8b 83       	std	Y+3, r24	; 0x03
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	0f 90       	pop	r0
    1576:	cf 91       	pop	r28
    1578:	df 91       	pop	r29
    157a:	08 95       	ret

0000157c <DIO_GetInputPinValue>:


u8 DIO_GetInputPinValue(u8 U8PortIdCopy,u8 U8PinIdCopy)
{
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	00 d0       	rcall	.+0      	; 0x1582 <DIO_GetInputPinValue+0x6>
    1582:	00 d0       	rcall	.+0      	; 0x1584 <DIO_GetInputPinValue+0x8>
    1584:	0f 92       	push	r0
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
    158a:	89 83       	std	Y+1, r24	; 0x01
    158c:	6a 83       	std	Y+2, r22	; 0x02
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	84 30       	cpi	r24, 0x04	; 4
    1592:	08 f0       	brcs	.+2      	; 0x1596 <DIO_GetInputPinValue+0x1a>
    1594:	70 c0       	rjmp	.+224    	; 0x1676 <DIO_GetInputPinValue+0xfa>
    1596:	8a 81       	ldd	r24, Y+2	; 0x02
    1598:	88 30       	cpi	r24, 0x08	; 8
    159a:	08 f0       	brcs	.+2      	; 0x159e <DIO_GetInputPinValue+0x22>
    159c:	6c c0       	rjmp	.+216    	; 0x1676 <DIO_GetInputPinValue+0xfa>
	{
		switch(U8PortIdCopy)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	3d 83       	std	Y+5, r19	; 0x05
    15a6:	2c 83       	std	Y+4, r18	; 0x04
    15a8:	4c 81       	ldd	r20, Y+4	; 0x04
    15aa:	5d 81       	ldd	r21, Y+5	; 0x05
    15ac:	41 30       	cpi	r20, 0x01	; 1
    15ae:	51 05       	cpc	r21, r1
    15b0:	49 f1       	breq	.+82     	; 0x1604 <DIO_GetInputPinValue+0x88>
    15b2:	8c 81       	ldd	r24, Y+4	; 0x04
    15b4:	9d 81       	ldd	r25, Y+5	; 0x05
    15b6:	82 30       	cpi	r24, 0x02	; 2
    15b8:	91 05       	cpc	r25, r1
    15ba:	34 f4       	brge	.+12     	; 0x15c8 <DIO_GetInputPinValue+0x4c>
    15bc:	2c 81       	ldd	r18, Y+4	; 0x04
    15be:	3d 81       	ldd	r19, Y+5	; 0x05
    15c0:	21 15       	cp	r18, r1
    15c2:	31 05       	cpc	r19, r1
    15c4:	61 f0       	breq	.+24     	; 0x15de <DIO_GetInputPinValue+0x62>
    15c6:	57 c0       	rjmp	.+174    	; 0x1676 <DIO_GetInputPinValue+0xfa>
    15c8:	4c 81       	ldd	r20, Y+4	; 0x04
    15ca:	5d 81       	ldd	r21, Y+5	; 0x05
    15cc:	42 30       	cpi	r20, 0x02	; 2
    15ce:	51 05       	cpc	r21, r1
    15d0:	61 f1       	breq	.+88     	; 0x162a <DIO_GetInputPinValue+0xae>
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	83 30       	cpi	r24, 0x03	; 3
    15d8:	91 05       	cpc	r25, r1
    15da:	d1 f1       	breq	.+116    	; 0x1650 <DIO_GetInputPinValue+0xd4>
    15dc:	4c c0       	rjmp	.+152    	; 0x1676 <DIO_GetInputPinValue+0xfa>
		{
			case DIO_PORTA: return GET_BIT(PINA,U8PinIdCopy); break;
    15de:	e9 e3       	ldi	r30, 0x39	; 57
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	88 2f       	mov	r24, r24
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	a9 01       	movw	r20, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DIO_GetInputPinValue+0x7a>
    15f2:	55 95       	asr	r21
    15f4:	47 95       	ror	r20
    15f6:	8a 95       	dec	r24
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DIO_GetInputPinValue+0x76>
    15fa:	ca 01       	movw	r24, r20
    15fc:	58 2f       	mov	r21, r24
    15fe:	51 70       	andi	r21, 0x01	; 1
    1600:	5b 83       	std	Y+3, r21	; 0x03
    1602:	3b c0       	rjmp	.+118    	; 0x167a <DIO_GetInputPinValue+0xfe>
			case DIO_PORTB: return GET_BIT(PINB,U8PinIdCopy); break;
    1604:	e6 e3       	ldi	r30, 0x36	; 54
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	8a 81       	ldd	r24, Y+2	; 0x02
    1610:	88 2f       	mov	r24, r24
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	a9 01       	movw	r20, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_GetInputPinValue+0xa0>
    1618:	55 95       	asr	r21
    161a:	47 95       	ror	r20
    161c:	8a 95       	dec	r24
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_GetInputPinValue+0x9c>
    1620:	ca 01       	movw	r24, r20
    1622:	58 2f       	mov	r21, r24
    1624:	51 70       	andi	r21, 0x01	; 1
    1626:	5b 83       	std	Y+3, r21	; 0x03
    1628:	28 c0       	rjmp	.+80     	; 0x167a <DIO_GetInputPinValue+0xfe>
			case DIO_PORTC: return GET_BIT(PINC,U8PinIdCopy); break;
    162a:	e3 e3       	ldi	r30, 0x33	; 51
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	28 2f       	mov	r18, r24
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	88 2f       	mov	r24, r24
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a9 01       	movw	r20, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <DIO_GetInputPinValue+0xc6>
    163e:	55 95       	asr	r21
    1640:	47 95       	ror	r20
    1642:	8a 95       	dec	r24
    1644:	e2 f7       	brpl	.-8      	; 0x163e <DIO_GetInputPinValue+0xc2>
    1646:	ca 01       	movw	r24, r20
    1648:	58 2f       	mov	r21, r24
    164a:	51 70       	andi	r21, 0x01	; 1
    164c:	5b 83       	std	Y+3, r21	; 0x03
    164e:	15 c0       	rjmp	.+42     	; 0x167a <DIO_GetInputPinValue+0xfe>
			case DIO_PORTD: return GET_BIT(PIND,U8PinIdCopy); break;
    1650:	e0 e3       	ldi	r30, 0x30	; 48
    1652:	f0 e0       	ldi	r31, 0x00	; 0
    1654:	80 81       	ld	r24, Z
    1656:	28 2f       	mov	r18, r24
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a9 01       	movw	r20, r18
    1662:	02 c0       	rjmp	.+4      	; 0x1668 <DIO_GetInputPinValue+0xec>
    1664:	55 95       	asr	r21
    1666:	47 95       	ror	r20
    1668:	8a 95       	dec	r24
    166a:	e2 f7       	brpl	.-8      	; 0x1664 <DIO_GetInputPinValue+0xe8>
    166c:	ca 01       	movw	r24, r20
    166e:	58 2f       	mov	r21, r24
    1670:	51 70       	andi	r21, 0x01	; 1
    1672:	5b 83       	std	Y+3, r21	; 0x03
    1674:	02 c0       	rjmp	.+4      	; 0x167a <DIO_GetInputPinValue+0xfe>
		}
	}
	return 0xFF;
    1676:	8f ef       	ldi	r24, 0xFF	; 255
    1678:	8b 83       	std	Y+3, r24	; 0x03
    167a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	0f 90       	pop	r0
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <DIO_TogglePinValue>:




void DIO_TogglePinValue(u8 U8PortIdCopy,u8 U8PinIdCopy)
{
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	00 d0       	rcall	.+0      	; 0x1692 <DIO_TogglePinValue+0x6>
    1692:	00 d0       	rcall	.+0      	; 0x1694 <DIO_TogglePinValue+0x8>
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	89 83       	std	Y+1, r24	; 0x01
    169a:	6a 83       	std	Y+2, r22	; 0x02
	//u8 PortValue;
	if ((U8PortIdCopy<=DIO_PORTD)&&(U8PinIdCopy<=DIO_PIN7))
    169c:	89 81       	ldd	r24, Y+1	; 0x01
    169e:	84 30       	cpi	r24, 0x04	; 4
    16a0:	08 f0       	brcs	.+2      	; 0x16a4 <DIO_TogglePinValue+0x18>
    16a2:	72 c0       	rjmp	.+228    	; 0x1788 <DIO_TogglePinValue+0xfc>
    16a4:	8a 81       	ldd	r24, Y+2	; 0x02
    16a6:	88 30       	cpi	r24, 0x08	; 8
    16a8:	08 f0       	brcs	.+2      	; 0x16ac <DIO_TogglePinValue+0x20>
    16aa:	6e c0       	rjmp	.+220    	; 0x1788 <DIO_TogglePinValue+0xfc>
	{
		//PortValue = DIO_GetPortValue(U8PortIdCopy);
		switch(U8PortIdCopy)
    16ac:	89 81       	ldd	r24, Y+1	; 0x01
    16ae:	28 2f       	mov	r18, r24
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	3c 83       	std	Y+4, r19	; 0x04
    16b4:	2b 83       	std	Y+3, r18	; 0x03
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	9c 81       	ldd	r25, Y+4	; 0x04
    16ba:	81 30       	cpi	r24, 0x01	; 1
    16bc:	91 05       	cpc	r25, r1
    16be:	49 f1       	breq	.+82     	; 0x1712 <DIO_TogglePinValue+0x86>
    16c0:	2b 81       	ldd	r18, Y+3	; 0x03
    16c2:	3c 81       	ldd	r19, Y+4	; 0x04
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	2c f4       	brge	.+10     	; 0x16d4 <DIO_TogglePinValue+0x48>
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	00 97       	sbiw	r24, 0x00	; 0
    16d0:	61 f0       	breq	.+24     	; 0x16ea <DIO_TogglePinValue+0x5e>
    16d2:	5a c0       	rjmp	.+180    	; 0x1788 <DIO_TogglePinValue+0xfc>
    16d4:	2b 81       	ldd	r18, Y+3	; 0x03
    16d6:	3c 81       	ldd	r19, Y+4	; 0x04
    16d8:	22 30       	cpi	r18, 0x02	; 2
    16da:	31 05       	cpc	r19, r1
    16dc:	71 f1       	breq	.+92     	; 0x173a <DIO_TogglePinValue+0xae>
    16de:	8b 81       	ldd	r24, Y+3	; 0x03
    16e0:	9c 81       	ldd	r25, Y+4	; 0x04
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	91 05       	cpc	r25, r1
    16e6:	e9 f1       	breq	.+122    	; 0x1762 <DIO_TogglePinValue+0xd6>
    16e8:	4f c0       	rjmp	.+158    	; 0x1788 <DIO_TogglePinValue+0xfc>
		{
			case DIO_PORTA:TOG_BIT(PORTA,U8PinIdCopy); break;
    16ea:	ab e3       	ldi	r26, 0x3B	; 59
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	eb e3       	ldi	r30, 0x3B	; 59
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <DIO_TogglePinValue+0x7c>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <DIO_TogglePinValue+0x78>
    170c:	84 27       	eor	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	3b c0       	rjmp	.+118    	; 0x1788 <DIO_TogglePinValue+0xfc>
			case DIO_PORTB:TOG_BIT(PORTB,U8PinIdCopy); break;
    1712:	a8 e3       	ldi	r26, 0x38	; 56
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <DIO_TogglePinValue+0xa4>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <DIO_TogglePinValue+0xa0>
    1734:	84 27       	eor	r24, r20
    1736:	8c 93       	st	X, r24
    1738:	27 c0       	rjmp	.+78     	; 0x1788 <DIO_TogglePinValue+0xfc>
			case DIO_PORTC:TOG_BIT(PORTC,U8PinIdCopy); break;
    173a:	a5 e3       	ldi	r26, 0x35	; 53
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e5 e3       	ldi	r30, 0x35	; 53
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	48 2f       	mov	r20, r24
    1746:	8a 81       	ldd	r24, Y+2	; 0x02
    1748:	28 2f       	mov	r18, r24
    174a:	30 e0       	ldi	r19, 0x00	; 0
    174c:	81 e0       	ldi	r24, 0x01	; 1
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	02 2e       	mov	r0, r18
    1752:	02 c0       	rjmp	.+4      	; 0x1758 <DIO_TogglePinValue+0xcc>
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	0a 94       	dec	r0
    175a:	e2 f7       	brpl	.-8      	; 0x1754 <DIO_TogglePinValue+0xc8>
    175c:	84 27       	eor	r24, r20
    175e:	8c 93       	st	X, r24
    1760:	13 c0       	rjmp	.+38     	; 0x1788 <DIO_TogglePinValue+0xfc>
			case DIO_PORTD:TOG_BIT(PORTD,U8PinIdCopy); break;
    1762:	a2 e3       	ldi	r26, 0x32	; 50
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e2 e3       	ldi	r30, 0x32	; 50
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	80 81       	ld	r24, Z
    176c:	48 2f       	mov	r20, r24
    176e:	8a 81       	ldd	r24, Y+2	; 0x02
    1770:	28 2f       	mov	r18, r24
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	02 2e       	mov	r0, r18
    177a:	02 c0       	rjmp	.+4      	; 0x1780 <DIO_TogglePinValue+0xf4>
    177c:	88 0f       	add	r24, r24
    177e:	99 1f       	adc	r25, r25
    1780:	0a 94       	dec	r0
    1782:	e2 f7       	brpl	.-8      	; 0x177c <DIO_TogglePinValue+0xf0>
    1784:	84 27       	eor	r24, r20
    1786:	8c 93       	st	X, r24
		}
	//	DIO_SetPortValue(U8PortIdCopy,PortValue);
	}
}
    1788:	0f 90       	pop	r0
    178a:	0f 90       	pop	r0
    178c:	0f 90       	pop	r0
    178e:	0f 90       	pop	r0
    1790:	cf 91       	pop	r28
    1792:	df 91       	pop	r29
    1794:	08 95       	ret

00001796 <DIO_SetWordValue>:


void DIO_SetWordValue(u8 U8PortIdCopy,u8 U8FirstPinIdCopy,u8 U8WordValueCopy)
{
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
    179e:	27 97       	sbiw	r28, 0x07	; 7
    17a0:	0f b6       	in	r0, 0x3f	; 63
    17a2:	f8 94       	cli
    17a4:	de bf       	out	0x3e, r29	; 62
    17a6:	0f be       	out	0x3f, r0	; 63
    17a8:	cd bf       	out	0x3d, r28	; 61
    17aa:	8b 83       	std	Y+3, r24	; 0x03
    17ac:	6c 83       	std	Y+4, r22	; 0x04
    17ae:	4d 83       	std	Y+5, r20	; 0x05

	if ( (U8PortIdCopy <= DIO_PORTD) && (U8FirstPinIdCopy<(DIO_BYTE-DIO_WORD)) )
    17b0:	8b 81       	ldd	r24, Y+3	; 0x03
    17b2:	84 30       	cpi	r24, 0x04	; 4
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <DIO_SetWordValue+0x22>
    17b6:	17 c1       	rjmp	.+558    	; 0x19e6 <DIO_SetWordValue+0x250>
    17b8:	8c 81       	ldd	r24, Y+4	; 0x04
    17ba:	84 30       	cpi	r24, 0x04	; 4
    17bc:	08 f0       	brcs	.+2      	; 0x17c0 <DIO_SetWordValue+0x2a>
    17be:	13 c1       	rjmp	.+550    	; 0x19e6 <DIO_SetWordValue+0x250>
		{
			u8 tempWordVal,WordBit=0;
    17c0:	19 82       	std	Y+1, r1	; 0x01
			for(WordBit=0;WordBit<DIO_WORD;WordBit++)
    17c2:	19 82       	std	Y+1, r1	; 0x01
    17c4:	0c c1       	rjmp	.+536    	; 0x19de <DIO_SetWordValue+0x248>
			{
				tempWordVal=GET_BIT(U8WordValueCopy,U8FirstPinIdCopy);
    17c6:	8d 81       	ldd	r24, Y+5	; 0x05
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	8c 81       	ldd	r24, Y+4	; 0x04
    17ce:	88 2f       	mov	r24, r24
    17d0:	90 e0       	ldi	r25, 0x00	; 0
    17d2:	a9 01       	movw	r20, r18
    17d4:	02 c0       	rjmp	.+4      	; 0x17da <DIO_SetWordValue+0x44>
    17d6:	55 95       	asr	r21
    17d8:	47 95       	ror	r20
    17da:	8a 95       	dec	r24
    17dc:	e2 f7       	brpl	.-8      	; 0x17d6 <DIO_SetWordValue+0x40>
    17de:	ca 01       	movw	r24, r20
    17e0:	81 70       	andi	r24, 0x01	; 1
    17e2:	8a 83       	std	Y+2, r24	; 0x02

				switch(U8PortIdCopy)
    17e4:	8b 81       	ldd	r24, Y+3	; 0x03
    17e6:	28 2f       	mov	r18, r24
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	3f 83       	std	Y+7, r19	; 0x07
    17ec:	2e 83       	std	Y+6, r18	; 0x06
    17ee:	4e 81       	ldd	r20, Y+6	; 0x06
    17f0:	5f 81       	ldd	r21, Y+7	; 0x07
    17f2:	41 30       	cpi	r20, 0x01	; 1
    17f4:	51 05       	cpc	r21, r1
    17f6:	09 f4       	brne	.+2      	; 0x17fa <DIO_SetWordValue+0x64>
    17f8:	4e c0       	rjmp	.+156    	; 0x1896 <DIO_SetWordValue+0x100>
    17fa:	8e 81       	ldd	r24, Y+6	; 0x06
    17fc:	9f 81       	ldd	r25, Y+7	; 0x07
    17fe:	82 30       	cpi	r24, 0x02	; 2
    1800:	91 05       	cpc	r25, r1
    1802:	34 f4       	brge	.+12     	; 0x1810 <DIO_SetWordValue+0x7a>
    1804:	2e 81       	ldd	r18, Y+6	; 0x06
    1806:	3f 81       	ldd	r19, Y+7	; 0x07
    1808:	21 15       	cp	r18, r1
    180a:	31 05       	cpc	r19, r1
    180c:	71 f0       	breq	.+28     	; 0x182a <DIO_SetWordValue+0x94>
    180e:	e4 c0       	rjmp	.+456    	; 0x19d8 <DIO_SetWordValue+0x242>
    1810:	4e 81       	ldd	r20, Y+6	; 0x06
    1812:	5f 81       	ldd	r21, Y+7	; 0x07
    1814:	42 30       	cpi	r20, 0x02	; 2
    1816:	51 05       	cpc	r21, r1
    1818:	09 f4       	brne	.+2      	; 0x181c <DIO_SetWordValue+0x86>
    181a:	73 c0       	rjmp	.+230    	; 0x1902 <DIO_SetWordValue+0x16c>
    181c:	8e 81       	ldd	r24, Y+6	; 0x06
    181e:	9f 81       	ldd	r25, Y+7	; 0x07
    1820:	83 30       	cpi	r24, 0x03	; 3
    1822:	91 05       	cpc	r25, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <DIO_SetWordValue+0x92>
    1826:	a3 c0       	rjmp	.+326    	; 0x196e <DIO_SetWordValue+0x1d8>
    1828:	d7 c0       	rjmp	.+430    	; 0x19d8 <DIO_SetWordValue+0x242>
				{
					case DIO_PORTA: {
						if(tempWordVal)
    182a:	8a 81       	ldd	r24, Y+2	; 0x02
    182c:	88 23       	and	r24, r24
    182e:	c9 f0       	breq	.+50     	; 0x1862 <DIO_SetWordValue+0xcc>
							SET_BIT(PORTA,(U8FirstPinIdCopy+WordBit));
    1830:	ab e3       	ldi	r26, 0x3B	; 59
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	eb e3       	ldi	r30, 0x3B	; 59
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	48 2f       	mov	r20, r24
    183c:	8c 81       	ldd	r24, Y+4	; 0x04
    183e:	28 2f       	mov	r18, r24
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	88 2f       	mov	r24, r24
    1846:	90 e0       	ldi	r25, 0x00	; 0
    1848:	28 0f       	add	r18, r24
    184a:	39 1f       	adc	r19, r25
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <DIO_SetWordValue+0xc2>
    1854:	88 0f       	add	r24, r24
    1856:	99 1f       	adc	r25, r25
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <DIO_SetWordValue+0xbe>
    185c:	84 2b       	or	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	bb c0       	rjmp	.+374    	; 0x19d8 <DIO_SetWordValue+0x242>
						else
							CLR_BIT(PORTA,(U8FirstPinIdCopy+WordBit));
    1862:	ab e3       	ldi	r26, 0x3B	; 59
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	eb e3       	ldi	r30, 0x3B	; 59
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	28 0f       	add	r18, r24
    187c:	39 1f       	adc	r19, r25
    187e:	81 e0       	ldi	r24, 0x01	; 1
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	02 2e       	mov	r0, r18
    1884:	02 c0       	rjmp	.+4      	; 0x188a <DIO_SetWordValue+0xf4>
    1886:	88 0f       	add	r24, r24
    1888:	99 1f       	adc	r25, r25
    188a:	0a 94       	dec	r0
    188c:	e2 f7       	brpl	.-8      	; 0x1886 <DIO_SetWordValue+0xf0>
    188e:	80 95       	com	r24
    1890:	84 23       	and	r24, r20
    1892:	8c 93       	st	X, r24
    1894:	a1 c0       	rjmp	.+322    	; 0x19d8 <DIO_SetWordValue+0x242>
					}break;
					case DIO_PORTB: {
						if(tempWordVal)
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	88 23       	and	r24, r24
    189a:	c9 f0       	breq	.+50     	; 0x18ce <DIO_SetWordValue+0x138>
							SET_BIT(PORTB,(U8FirstPinIdCopy+WordBit));
    189c:	a8 e3       	ldi	r26, 0x38	; 56
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e8 e3       	ldi	r30, 0x38	; 56
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	48 2f       	mov	r20, r24
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	89 81       	ldd	r24, Y+1	; 0x01
    18b0:	88 2f       	mov	r24, r24
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	28 0f       	add	r18, r24
    18b6:	39 1f       	adc	r19, r25
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	02 2e       	mov	r0, r18
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <DIO_SetWordValue+0x12e>
    18c0:	88 0f       	add	r24, r24
    18c2:	99 1f       	adc	r25, r25
    18c4:	0a 94       	dec	r0
    18c6:	e2 f7       	brpl	.-8      	; 0x18c0 <DIO_SetWordValue+0x12a>
    18c8:	84 2b       	or	r24, r20
    18ca:	8c 93       	st	X, r24
    18cc:	85 c0       	rjmp	.+266    	; 0x19d8 <DIO_SetWordValue+0x242>
						else
							CLR_BIT(PORTB,(U8FirstPinIdCopy+WordBit));
    18ce:	a8 e3       	ldi	r26, 0x38	; 56
    18d0:	b0 e0       	ldi	r27, 0x00	; 0
    18d2:	e8 e3       	ldi	r30, 0x38	; 56
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	48 2f       	mov	r20, r24
    18da:	8c 81       	ldd	r24, Y+4	; 0x04
    18dc:	28 2f       	mov	r18, r24
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	89 81       	ldd	r24, Y+1	; 0x01
    18e2:	88 2f       	mov	r24, r24
    18e4:	90 e0       	ldi	r25, 0x00	; 0
    18e6:	28 0f       	add	r18, r24
    18e8:	39 1f       	adc	r19, r25
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	02 2e       	mov	r0, r18
    18f0:	02 c0       	rjmp	.+4      	; 0x18f6 <DIO_SetWordValue+0x160>
    18f2:	88 0f       	add	r24, r24
    18f4:	99 1f       	adc	r25, r25
    18f6:	0a 94       	dec	r0
    18f8:	e2 f7       	brpl	.-8      	; 0x18f2 <DIO_SetWordValue+0x15c>
    18fa:	80 95       	com	r24
    18fc:	84 23       	and	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	6b c0       	rjmp	.+214    	; 0x19d8 <DIO_SetWordValue+0x242>
					}break;
					case DIO_PORTC: {
						if(tempWordVal)
    1902:	8a 81       	ldd	r24, Y+2	; 0x02
    1904:	88 23       	and	r24, r24
    1906:	c9 f0       	breq	.+50     	; 0x193a <DIO_SetWordValue+0x1a4>
							SET_BIT(PORTC,(U8FirstPinIdCopy+WordBit));
    1908:	a5 e3       	ldi	r26, 0x35	; 53
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	e5 e3       	ldi	r30, 0x35	; 53
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	48 2f       	mov	r20, r24
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	28 0f       	add	r18, r24
    1922:	39 1f       	adc	r19, r25
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	02 2e       	mov	r0, r18
    192a:	02 c0       	rjmp	.+4      	; 0x1930 <DIO_SetWordValue+0x19a>
    192c:	88 0f       	add	r24, r24
    192e:	99 1f       	adc	r25, r25
    1930:	0a 94       	dec	r0
    1932:	e2 f7       	brpl	.-8      	; 0x192c <DIO_SetWordValue+0x196>
    1934:	84 2b       	or	r24, r20
    1936:	8c 93       	st	X, r24
    1938:	4f c0       	rjmp	.+158    	; 0x19d8 <DIO_SetWordValue+0x242>
						else
							CLR_BIT(PORTC,(U8FirstPinIdCopy+WordBit));
    193a:	a5 e3       	ldi	r26, 0x35	; 53
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e5 e3       	ldi	r30, 0x35	; 53
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	48 2f       	mov	r20, r24
    1946:	8c 81       	ldd	r24, Y+4	; 0x04
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	89 81       	ldd	r24, Y+1	; 0x01
    194e:	88 2f       	mov	r24, r24
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	28 0f       	add	r18, r24
    1954:	39 1f       	adc	r19, r25
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	02 2e       	mov	r0, r18
    195c:	02 c0       	rjmp	.+4      	; 0x1962 <DIO_SetWordValue+0x1cc>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	0a 94       	dec	r0
    1964:	e2 f7       	brpl	.-8      	; 0x195e <DIO_SetWordValue+0x1c8>
    1966:	80 95       	com	r24
    1968:	84 23       	and	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	35 c0       	rjmp	.+106    	; 0x19d8 <DIO_SetWordValue+0x242>
					}break;
					case DIO_PORTD: {
						if(tempWordVal)
    196e:	8a 81       	ldd	r24, Y+2	; 0x02
    1970:	88 23       	and	r24, r24
    1972:	c9 f0       	breq	.+50     	; 0x19a6 <DIO_SetWordValue+0x210>
							SET_BIT(PORTD,(U8FirstPinIdCopy+WordBit));
    1974:	a2 e3       	ldi	r26, 0x32	; 50
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e2 e3       	ldi	r30, 0x32	; 50
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8c 81       	ldd	r24, Y+4	; 0x04
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	28 0f       	add	r18, r24
    198e:	39 1f       	adc	r19, r25
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	02 2e       	mov	r0, r18
    1996:	02 c0       	rjmp	.+4      	; 0x199c <DIO_SetWordValue+0x206>
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	0a 94       	dec	r0
    199e:	e2 f7       	brpl	.-8      	; 0x1998 <DIO_SetWordValue+0x202>
    19a0:	84 2b       	or	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	19 c0       	rjmp	.+50     	; 0x19d8 <DIO_SetWordValue+0x242>
						else
							CLR_BIT(PORTD,(U8FirstPinIdCopy+WordBit));
    19a6:	a2 e3       	ldi	r26, 0x32	; 50
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e2 e3       	ldi	r30, 0x32	; 50
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8c 81       	ldd	r24, Y+4	; 0x04
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	89 81       	ldd	r24, Y+1	; 0x01
    19ba:	88 2f       	mov	r24, r24
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	28 0f       	add	r18, r24
    19c0:	39 1f       	adc	r19, r25
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_SetWordValue+0x238>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_SetWordValue+0x234>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
{

	if ( (U8PortIdCopy <= DIO_PORTD) && (U8FirstPinIdCopy<(DIO_BYTE-DIO_WORD)) )
		{
			u8 tempWordVal,WordBit=0;
			for(WordBit=0;WordBit<DIO_WORD;WordBit++)
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	8f 5f       	subi	r24, 0xFF	; 255
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	84 30       	cpi	r24, 0x04	; 4
    19e2:	08 f4       	brcc	.+2      	; 0x19e6 <DIO_SetWordValue+0x250>
    19e4:	f0 ce       	rjmp	.-544    	; 0x17c6 <DIO_SetWordValue+0x30>
					}break;
				}

			}
		}
}
    19e6:	27 96       	adiw	r28, 0x07	; 7
    19e8:	0f b6       	in	r0, 0x3f	; 63
    19ea:	f8 94       	cli
    19ec:	de bf       	out	0x3e, r29	; 62
    19ee:	0f be       	out	0x3f, r0	; 63
    19f0:	cd bf       	out	0x3d, r28	; 61
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <DIO_SetWordDirection>:

void DIO_SetWordDirection(u8 U8PortIdCopy,u8 U8FirstPinIdCopy,u8 U8WordDirCopy)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	27 97       	sbiw	r28, 0x07	; 7
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61
    1a0c:	8b 83       	std	Y+3, r24	; 0x03
    1a0e:	6c 83       	std	Y+4, r22	; 0x04
    1a10:	4d 83       	std	Y+5, r20	; 0x05

	if ( (U8PortIdCopy <= DIO_PORTD) && (U8FirstPinIdCopy<=(DIO_BYTE-DIO_WORD)) )
    1a12:	8b 81       	ldd	r24, Y+3	; 0x03
    1a14:	84 30       	cpi	r24, 0x04	; 4
    1a16:	08 f0       	brcs	.+2      	; 0x1a1a <DIO_SetWordDirection+0x22>
    1a18:	17 c1       	rjmp	.+558    	; 0x1c48 <DIO_SetWordDirection+0x250>
    1a1a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1c:	85 30       	cpi	r24, 0x05	; 5
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <DIO_SetWordDirection+0x2a>
    1a20:	13 c1       	rjmp	.+550    	; 0x1c48 <DIO_SetWordDirection+0x250>
		{
			u8 tempWordDirect,WordBit=0;
    1a22:	19 82       	std	Y+1, r1	; 0x01
			for(WordBit=0;WordBit<DIO_WORD;WordBit++)
    1a24:	19 82       	std	Y+1, r1	; 0x01
    1a26:	0c c1       	rjmp	.+536    	; 0x1c40 <DIO_SetWordDirection+0x248>
			{
				tempWordDirect=GET_BIT(U8WordDirCopy,WordBit);
    1a28:	8d 81       	ldd	r24, Y+5	; 0x05
    1a2a:	28 2f       	mov	r18, r24
    1a2c:	30 e0       	ldi	r19, 0x00	; 0
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	88 2f       	mov	r24, r24
    1a32:	90 e0       	ldi	r25, 0x00	; 0
    1a34:	a9 01       	movw	r20, r18
    1a36:	02 c0       	rjmp	.+4      	; 0x1a3c <DIO_SetWordDirection+0x44>
    1a38:	55 95       	asr	r21
    1a3a:	47 95       	ror	r20
    1a3c:	8a 95       	dec	r24
    1a3e:	e2 f7       	brpl	.-8      	; 0x1a38 <DIO_SetWordDirection+0x40>
    1a40:	ca 01       	movw	r24, r20
    1a42:	81 70       	andi	r24, 0x01	; 1
    1a44:	8a 83       	std	Y+2, r24	; 0x02
				switch(U8PortIdCopy)
    1a46:	8b 81       	ldd	r24, Y+3	; 0x03
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	3f 83       	std	Y+7, r19	; 0x07
    1a4e:	2e 83       	std	Y+6, r18	; 0x06
    1a50:	4e 81       	ldd	r20, Y+6	; 0x06
    1a52:	5f 81       	ldd	r21, Y+7	; 0x07
    1a54:	41 30       	cpi	r20, 0x01	; 1
    1a56:	51 05       	cpc	r21, r1
    1a58:	09 f4       	brne	.+2      	; 0x1a5c <DIO_SetWordDirection+0x64>
    1a5a:	4e c0       	rjmp	.+156    	; 0x1af8 <DIO_SetWordDirection+0x100>
    1a5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a60:	82 30       	cpi	r24, 0x02	; 2
    1a62:	91 05       	cpc	r25, r1
    1a64:	34 f4       	brge	.+12     	; 0x1a72 <DIO_SetWordDirection+0x7a>
    1a66:	2e 81       	ldd	r18, Y+6	; 0x06
    1a68:	3f 81       	ldd	r19, Y+7	; 0x07
    1a6a:	21 15       	cp	r18, r1
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <DIO_SetWordDirection+0x94>
    1a70:	e4 c0       	rjmp	.+456    	; 0x1c3a <DIO_SetWordDirection+0x242>
    1a72:	4e 81       	ldd	r20, Y+6	; 0x06
    1a74:	5f 81       	ldd	r21, Y+7	; 0x07
    1a76:	42 30       	cpi	r20, 0x02	; 2
    1a78:	51 05       	cpc	r21, r1
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <DIO_SetWordDirection+0x86>
    1a7c:	73 c0       	rjmp	.+230    	; 0x1b64 <DIO_SetWordDirection+0x16c>
    1a7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a80:	9f 81       	ldd	r25, Y+7	; 0x07
    1a82:	83 30       	cpi	r24, 0x03	; 3
    1a84:	91 05       	cpc	r25, r1
    1a86:	09 f4       	brne	.+2      	; 0x1a8a <DIO_SetWordDirection+0x92>
    1a88:	a3 c0       	rjmp	.+326    	; 0x1bd0 <DIO_SetWordDirection+0x1d8>
    1a8a:	d7 c0       	rjmp	.+430    	; 0x1c3a <DIO_SetWordDirection+0x242>
				{
					case DIO_PORTA: {
						if(tempWordDirect)
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	88 23       	and	r24, r24
    1a90:	c9 f0       	breq	.+50     	; 0x1ac4 <DIO_SetWordDirection+0xcc>
							SET_BIT(DDRA,(U8FirstPinIdCopy+WordBit));
    1a92:	aa e3       	ldi	r26, 0x3A	; 58
    1a94:	b0 e0       	ldi	r27, 0x00	; 0
    1a96:	ea e3       	ldi	r30, 0x3A	; 58
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	80 81       	ld	r24, Z
    1a9c:	48 2f       	mov	r20, r24
    1a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa0:	28 2f       	mov	r18, r24
    1aa2:	30 e0       	ldi	r19, 0x00	; 0
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	88 2f       	mov	r24, r24
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	28 0f       	add	r18, r24
    1aac:	39 1f       	adc	r19, r25
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	02 2e       	mov	r0, r18
    1ab4:	02 c0       	rjmp	.+4      	; 0x1aba <DIO_SetWordDirection+0xc2>
    1ab6:	88 0f       	add	r24, r24
    1ab8:	99 1f       	adc	r25, r25
    1aba:	0a 94       	dec	r0
    1abc:	e2 f7       	brpl	.-8      	; 0x1ab6 <DIO_SetWordDirection+0xbe>
    1abe:	84 2b       	or	r24, r20
    1ac0:	8c 93       	st	X, r24
    1ac2:	bb c0       	rjmp	.+374    	; 0x1c3a <DIO_SetWordDirection+0x242>
						else
							CLR_BIT(DDRA,(U8FirstPinIdCopy+WordBit));
    1ac4:	aa e3       	ldi	r26, 0x3A	; 58
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	ea e3       	ldi	r30, 0x3A	; 58
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	48 2f       	mov	r20, r24
    1ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	89 81       	ldd	r24, Y+1	; 0x01
    1ad8:	88 2f       	mov	r24, r24
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	28 0f       	add	r18, r24
    1ade:	39 1f       	adc	r19, r25
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	02 2e       	mov	r0, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <DIO_SetWordDirection+0xf4>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <DIO_SetWordDirection+0xf0>
    1af0:	80 95       	com	r24
    1af2:	84 23       	and	r24, r20
    1af4:	8c 93       	st	X, r24
    1af6:	a1 c0       	rjmp	.+322    	; 0x1c3a <DIO_SetWordDirection+0x242>
					}break;
					case DIO_PORTB: {
						if(tempWordDirect)
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	88 23       	and	r24, r24
    1afc:	c9 f0       	breq	.+50     	; 0x1b30 <DIO_SetWordDirection+0x138>
							SET_BIT(DDRB,(U8FirstPinIdCopy+WordBit));
    1afe:	a7 e3       	ldi	r26, 0x37	; 55
    1b00:	b0 e0       	ldi	r27, 0x00	; 0
    1b02:	e7 e3       	ldi	r30, 0x37	; 55
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	48 2f       	mov	r20, r24
    1b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	28 0f       	add	r18, r24
    1b18:	39 1f       	adc	r19, r25
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	02 2e       	mov	r0, r18
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <DIO_SetWordDirection+0x12e>
    1b22:	88 0f       	add	r24, r24
    1b24:	99 1f       	adc	r25, r25
    1b26:	0a 94       	dec	r0
    1b28:	e2 f7       	brpl	.-8      	; 0x1b22 <DIO_SetWordDirection+0x12a>
    1b2a:	84 2b       	or	r24, r20
    1b2c:	8c 93       	st	X, r24
    1b2e:	85 c0       	rjmp	.+266    	; 0x1c3a <DIO_SetWordDirection+0x242>
						else
							CLR_BIT(DDRB,(U8FirstPinIdCopy+WordBit));
    1b30:	a7 e3       	ldi	r26, 0x37	; 55
    1b32:	b0 e0       	ldi	r27, 0x00	; 0
    1b34:	e7 e3       	ldi	r30, 0x37	; 55
    1b36:	f0 e0       	ldi	r31, 0x00	; 0
    1b38:	80 81       	ld	r24, Z
    1b3a:	48 2f       	mov	r20, r24
    1b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3e:	28 2f       	mov	r18, r24
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	88 2f       	mov	r24, r24
    1b46:	90 e0       	ldi	r25, 0x00	; 0
    1b48:	28 0f       	add	r18, r24
    1b4a:	39 1f       	adc	r19, r25
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 2e       	mov	r0, r18
    1b52:	02 c0       	rjmp	.+4      	; 0x1b58 <DIO_SetWordDirection+0x160>
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	0a 94       	dec	r0
    1b5a:	e2 f7       	brpl	.-8      	; 0x1b54 <DIO_SetWordDirection+0x15c>
    1b5c:	80 95       	com	r24
    1b5e:	84 23       	and	r24, r20
    1b60:	8c 93       	st	X, r24
    1b62:	6b c0       	rjmp	.+214    	; 0x1c3a <DIO_SetWordDirection+0x242>
					}break;
					case DIO_PORTC: {
						if(tempWordDirect)
    1b64:	8a 81       	ldd	r24, Y+2	; 0x02
    1b66:	88 23       	and	r24, r24
    1b68:	c9 f0       	breq	.+50     	; 0x1b9c <DIO_SetWordDirection+0x1a4>
							SET_BIT(DDRC,(U8FirstPinIdCopy+WordBit));
    1b6a:	a4 e3       	ldi	r26, 0x34	; 52
    1b6c:	b0 e0       	ldi	r27, 0x00	; 0
    1b6e:	e4 e3       	ldi	r30, 0x34	; 52
    1b70:	f0 e0       	ldi	r31, 0x00	; 0
    1b72:	80 81       	ld	r24, Z
    1b74:	48 2f       	mov	r20, r24
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	88 2f       	mov	r24, r24
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	28 0f       	add	r18, r24
    1b84:	39 1f       	adc	r19, r25
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 2e       	mov	r0, r18
    1b8c:	02 c0       	rjmp	.+4      	; 0x1b92 <DIO_SetWordDirection+0x19a>
    1b8e:	88 0f       	add	r24, r24
    1b90:	99 1f       	adc	r25, r25
    1b92:	0a 94       	dec	r0
    1b94:	e2 f7       	brpl	.-8      	; 0x1b8e <DIO_SetWordDirection+0x196>
    1b96:	84 2b       	or	r24, r20
    1b98:	8c 93       	st	X, r24
    1b9a:	4f c0       	rjmp	.+158    	; 0x1c3a <DIO_SetWordDirection+0x242>
						else
							CLR_BIT(DDRC,(U8FirstPinIdCopy+WordBit));
    1b9c:	a4 e3       	ldi	r26, 0x34	; 52
    1b9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ba0:	e4 e3       	ldi	r30, 0x34	; 52
    1ba2:	f0 e0       	ldi	r31, 0x00	; 0
    1ba4:	80 81       	ld	r24, Z
    1ba6:	48 2f       	mov	r20, r24
    1ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    1baa:	28 2f       	mov	r18, r24
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	89 81       	ldd	r24, Y+1	; 0x01
    1bb0:	88 2f       	mov	r24, r24
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	28 0f       	add	r18, r24
    1bb6:	39 1f       	adc	r19, r25
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	02 2e       	mov	r0, r18
    1bbe:	02 c0       	rjmp	.+4      	; 0x1bc4 <DIO_SetWordDirection+0x1cc>
    1bc0:	88 0f       	add	r24, r24
    1bc2:	99 1f       	adc	r25, r25
    1bc4:	0a 94       	dec	r0
    1bc6:	e2 f7       	brpl	.-8      	; 0x1bc0 <DIO_SetWordDirection+0x1c8>
    1bc8:	80 95       	com	r24
    1bca:	84 23       	and	r24, r20
    1bcc:	8c 93       	st	X, r24
    1bce:	35 c0       	rjmp	.+106    	; 0x1c3a <DIO_SetWordDirection+0x242>
					}break;
					case DIO_PORTD: {
						if(tempWordDirect)
    1bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd2:	88 23       	and	r24, r24
    1bd4:	c9 f0       	breq	.+50     	; 0x1c08 <DIO_SetWordDirection+0x210>
							SET_BIT(DDRD,(U8FirstPinIdCopy+WordBit));
    1bd6:	a1 e3       	ldi	r26, 0x31	; 49
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	e1 e3       	ldi	r30, 0x31	; 49
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8c 81       	ldd	r24, Y+4	; 0x04
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	88 2f       	mov	r24, r24
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	28 0f       	add	r18, r24
    1bf0:	39 1f       	adc	r19, r25
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	02 2e       	mov	r0, r18
    1bf8:	02 c0       	rjmp	.+4      	; 0x1bfe <DIO_SetWordDirection+0x206>
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	0a 94       	dec	r0
    1c00:	e2 f7       	brpl	.-8      	; 0x1bfa <DIO_SetWordDirection+0x202>
    1c02:	84 2b       	or	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	19 c0       	rjmp	.+50     	; 0x1c3a <DIO_SetWordDirection+0x242>
						else
							CLR_BIT(DDRD,(U8FirstPinIdCopy+WordBit));
    1c08:	a1 e3       	ldi	r26, 0x31	; 49
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e1 e3       	ldi	r30, 0x31	; 49
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	48 2f       	mov	r20, r24
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	28 2f       	mov	r18, r24
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	89 81       	ldd	r24, Y+1	; 0x01
    1c1c:	88 2f       	mov	r24, r24
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	28 0f       	add	r18, r24
    1c22:	39 1f       	adc	r19, r25
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	02 2e       	mov	r0, r18
    1c2a:	02 c0       	rjmp	.+4      	; 0x1c30 <DIO_SetWordDirection+0x238>
    1c2c:	88 0f       	add	r24, r24
    1c2e:	99 1f       	adc	r25, r25
    1c30:	0a 94       	dec	r0
    1c32:	e2 f7       	brpl	.-8      	; 0x1c2c <DIO_SetWordDirection+0x234>
    1c34:	80 95       	com	r24
    1c36:	84 23       	and	r24, r20
    1c38:	8c 93       	st	X, r24
{

	if ( (U8PortIdCopy <= DIO_PORTD) && (U8FirstPinIdCopy<=(DIO_BYTE-DIO_WORD)) )
		{
			u8 tempWordDirect,WordBit=0;
			for(WordBit=0;WordBit<DIO_WORD;WordBit++)
    1c3a:	89 81       	ldd	r24, Y+1	; 0x01
    1c3c:	8f 5f       	subi	r24, 0xFF	; 255
    1c3e:	89 83       	std	Y+1, r24	; 0x01
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	84 30       	cpi	r24, 0x04	; 4
    1c44:	08 f4       	brcc	.+2      	; 0x1c48 <DIO_SetWordDirection+0x250>
    1c46:	f0 ce       	rjmp	.-544    	; 0x1a28 <DIO_SetWordDirection+0x30>
					}break;
				}

			}
		}
}
    1c48:	27 96       	adiw	r28, 0x07	; 7
    1c4a:	0f b6       	in	r0, 0x3f	; 63
    1c4c:	f8 94       	cli
    1c4e:	de bf       	out	0x3e, r29	; 62
    1c50:	0f be       	out	0x3f, r0	; 63
    1c52:	cd bf       	out	0x3d, r28	; 61
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <DIO_SetPortValue>:



//IO Ports
void DIO_SetPortValue(u8 U8PortIdCopy,u8 U8PortValueCopy)
{
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <DIO_SetPortValue+0x6>
    1c60:	00 d0       	rcall	.+0      	; 0x1c62 <DIO_SetPortValue+0x8>
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	6a 83       	std	Y+2, r22	; 0x02
	if (U8PortIdCopy<=DIO_PORTD)
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	84 30       	cpi	r24, 0x04	; 4
    1c6e:	90 f5       	brcc	.+100    	; 0x1cd4 <DIO_SetPortValue+0x7a>
	{
		switch(U8PortIdCopy)
    1c70:	89 81       	ldd	r24, Y+1	; 0x01
    1c72:	28 2f       	mov	r18, r24
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	3c 83       	std	Y+4, r19	; 0x04
    1c78:	2b 83       	std	Y+3, r18	; 0x03
    1c7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7e:	81 30       	cpi	r24, 0x01	; 1
    1c80:	91 05       	cpc	r25, r1
    1c82:	d1 f0       	breq	.+52     	; 0x1cb8 <DIO_SetPortValue+0x5e>
    1c84:	2b 81       	ldd	r18, Y+3	; 0x03
    1c86:	3c 81       	ldd	r19, Y+4	; 0x04
    1c88:	22 30       	cpi	r18, 0x02	; 2
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	2c f4       	brge	.+10     	; 0x1c98 <DIO_SetPortValue+0x3e>
    1c8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c90:	9c 81       	ldd	r25, Y+4	; 0x04
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	61 f0       	breq	.+24     	; 0x1cae <DIO_SetPortValue+0x54>
    1c96:	1e c0       	rjmp	.+60     	; 0x1cd4 <DIO_SetPortValue+0x7a>
    1c98:	2b 81       	ldd	r18, Y+3	; 0x03
    1c9a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9c:	22 30       	cpi	r18, 0x02	; 2
    1c9e:	31 05       	cpc	r19, r1
    1ca0:	81 f0       	breq	.+32     	; 0x1cc2 <DIO_SetPortValue+0x68>
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	83 30       	cpi	r24, 0x03	; 3
    1ca8:	91 05       	cpc	r25, r1
    1caa:	81 f0       	breq	.+32     	; 0x1ccc <DIO_SetPortValue+0x72>
    1cac:	13 c0       	rjmp	.+38     	; 0x1cd4 <DIO_SetPortValue+0x7a>
		{
			case DIO_PORTA: PORTA=U8PortValueCopy; break;
    1cae:	eb e3       	ldi	r30, 0x3B	; 59
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb4:	80 83       	st	Z, r24
    1cb6:	0e c0       	rjmp	.+28     	; 0x1cd4 <DIO_SetPortValue+0x7a>
			case DIO_PORTB: PORTB=U8PortValueCopy; break;
    1cb8:	e8 e3       	ldi	r30, 0x38	; 56
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbe:	80 83       	st	Z, r24
    1cc0:	09 c0       	rjmp	.+18     	; 0x1cd4 <DIO_SetPortValue+0x7a>
			case DIO_PORTC: PORTC=U8PortValueCopy; break;
    1cc2:	e5 e3       	ldi	r30, 0x35	; 53
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	80 83       	st	Z, r24
    1cca:	04 c0       	rjmp	.+8      	; 0x1cd4 <DIO_SetPortValue+0x7a>
			case DIO_PORTD: PORTD=U8PortValueCopy; break;
    1ccc:	e2 e3       	ldi	r30, 0x32	; 50
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd2:	80 83       	st	Z, r24
		}
	}
}
    1cd4:	0f 90       	pop	r0
    1cd6:	0f 90       	pop	r0
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <DIO_SetPortDirection>:

void DIO_SetPortDirection(u8 U8PortIdCopy,u8 U8PortDirCopy)
{
    1ce2:	df 93       	push	r29
    1ce4:	cf 93       	push	r28
    1ce6:	00 d0       	rcall	.+0      	; 0x1ce8 <DIO_SetPortDirection+0x6>
    1ce8:	00 d0       	rcall	.+0      	; 0x1cea <DIO_SetPortDirection+0x8>
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	6a 83       	std	Y+2, r22	; 0x02
	if (U8PortIdCopy<=DIO_PORTD)
    1cf2:	89 81       	ldd	r24, Y+1	; 0x01
    1cf4:	84 30       	cpi	r24, 0x04	; 4
    1cf6:	90 f5       	brcc	.+100    	; 0x1d5c <DIO_SetPortDirection+0x7a>
		{
			switch(U8PortIdCopy)
    1cf8:	89 81       	ldd	r24, Y+1	; 0x01
    1cfa:	28 2f       	mov	r18, r24
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	3c 83       	std	Y+4, r19	; 0x04
    1d00:	2b 83       	std	Y+3, r18	; 0x03
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	81 30       	cpi	r24, 0x01	; 1
    1d08:	91 05       	cpc	r25, r1
    1d0a:	d1 f0       	breq	.+52     	; 0x1d40 <DIO_SetPortDirection+0x5e>
    1d0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1d10:	22 30       	cpi	r18, 0x02	; 2
    1d12:	31 05       	cpc	r19, r1
    1d14:	2c f4       	brge	.+10     	; 0x1d20 <DIO_SetPortDirection+0x3e>
    1d16:	8b 81       	ldd	r24, Y+3	; 0x03
    1d18:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1a:	00 97       	sbiw	r24, 0x00	; 0
    1d1c:	61 f0       	breq	.+24     	; 0x1d36 <DIO_SetPortDirection+0x54>
    1d1e:	1e c0       	rjmp	.+60     	; 0x1d5c <DIO_SetPortDirection+0x7a>
    1d20:	2b 81       	ldd	r18, Y+3	; 0x03
    1d22:	3c 81       	ldd	r19, Y+4	; 0x04
    1d24:	22 30       	cpi	r18, 0x02	; 2
    1d26:	31 05       	cpc	r19, r1
    1d28:	81 f0       	breq	.+32     	; 0x1d4a <DIO_SetPortDirection+0x68>
    1d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2e:	83 30       	cpi	r24, 0x03	; 3
    1d30:	91 05       	cpc	r25, r1
    1d32:	81 f0       	breq	.+32     	; 0x1d54 <DIO_SetPortDirection+0x72>
    1d34:	13 c0       	rjmp	.+38     	; 0x1d5c <DIO_SetPortDirection+0x7a>
			{
				case DIO_PORTA: DDRA=U8PortDirCopy; break;
    1d36:	ea e3       	ldi	r30, 0x3A	; 58
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	80 83       	st	Z, r24
    1d3e:	0e c0       	rjmp	.+28     	; 0x1d5c <DIO_SetPortDirection+0x7a>
				case DIO_PORTB: DDRB=U8PortDirCopy; break;
    1d40:	e7 e3       	ldi	r30, 0x37	; 55
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	80 83       	st	Z, r24
    1d48:	09 c0       	rjmp	.+18     	; 0x1d5c <DIO_SetPortDirection+0x7a>
				case DIO_PORTC: DDRC=U8PortDirCopy; break;
    1d4a:	e4 e3       	ldi	r30, 0x34	; 52
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d50:	80 83       	st	Z, r24
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <DIO_SetPortDirection+0x7a>
				case DIO_PORTD: DDRD=U8PortDirCopy; break;
    1d54:	e1 e3       	ldi	r30, 0x31	; 49
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	80 83       	st	Z, r24
			}
		}
}
    1d5c:	0f 90       	pop	r0
    1d5e:	0f 90       	pop	r0
    1d60:	0f 90       	pop	r0
    1d62:	0f 90       	pop	r0
    1d64:	cf 91       	pop	r28
    1d66:	df 91       	pop	r29
    1d68:	08 95       	ret

00001d6a <DIO_GetPortValue>:
u8 DIO_GetPortValue(u8 U8PortIdCopy)
{
    1d6a:	df 93       	push	r29
    1d6c:	cf 93       	push	r28
    1d6e:	00 d0       	rcall	.+0      	; 0x1d70 <DIO_GetPortValue+0x6>
    1d70:	00 d0       	rcall	.+0      	; 0x1d72 <DIO_GetPortValue+0x8>
    1d72:	cd b7       	in	r28, 0x3d	; 61
    1d74:	de b7       	in	r29, 0x3e	; 62
    1d76:	89 83       	std	Y+1, r24	; 0x01
	if (U8PortIdCopy<=DIO_PORTD)
    1d78:	89 81       	ldd	r24, Y+1	; 0x01
    1d7a:	84 30       	cpi	r24, 0x04	; 4
    1d7c:	98 f5       	brcc	.+102    	; 0x1de4 <DIO_GetPortValue+0x7a>
	{
		switch(U8PortIdCopy)
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	28 2f       	mov	r18, r24
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	3c 83       	std	Y+4, r19	; 0x04
    1d86:	2b 83       	std	Y+3, r18	; 0x03
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	d1 f0       	breq	.+52     	; 0x1dc6 <DIO_GetPortValue+0x5c>
    1d92:	2b 81       	ldd	r18, Y+3	; 0x03
    1d94:	3c 81       	ldd	r19, Y+4	; 0x04
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	2c f4       	brge	.+10     	; 0x1da6 <DIO_GetPortValue+0x3c>
    1d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	61 f0       	breq	.+24     	; 0x1dbc <DIO_GetPortValue+0x52>
    1da4:	1f c0       	rjmp	.+62     	; 0x1de4 <DIO_GetPortValue+0x7a>
    1da6:	2b 81       	ldd	r18, Y+3	; 0x03
    1da8:	3c 81       	ldd	r19, Y+4	; 0x04
    1daa:	22 30       	cpi	r18, 0x02	; 2
    1dac:	31 05       	cpc	r19, r1
    1dae:	81 f0       	breq	.+32     	; 0x1dd0 <DIO_GetPortValue+0x66>
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	9c 81       	ldd	r25, Y+4	; 0x04
    1db4:	83 30       	cpi	r24, 0x03	; 3
    1db6:	91 05       	cpc	r25, r1
    1db8:	81 f0       	breq	.+32     	; 0x1dda <DIO_GetPortValue+0x70>
    1dba:	14 c0       	rjmp	.+40     	; 0x1de4 <DIO_GetPortValue+0x7a>
		{
			case DIO_PORTA: return PINA; break;
    1dbc:	e9 e3       	ldi	r30, 0x39	; 57
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	90 81       	ld	r25, Z
    1dc2:	9a 83       	std	Y+2, r25	; 0x02
    1dc4:	11 c0       	rjmp	.+34     	; 0x1de8 <DIO_GetPortValue+0x7e>
			case DIO_PORTB: return PINB; break;
    1dc6:	e6 e3       	ldi	r30, 0x36	; 54
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	20 81       	ld	r18, Z
    1dcc:	2a 83       	std	Y+2, r18	; 0x02
    1dce:	0c c0       	rjmp	.+24     	; 0x1de8 <DIO_GetPortValue+0x7e>
			case DIO_PORTC: return PINC; break;
    1dd0:	e3 e3       	ldi	r30, 0x33	; 51
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	30 81       	ld	r19, Z
    1dd6:	3a 83       	std	Y+2, r19	; 0x02
    1dd8:	07 c0       	rjmp	.+14     	; 0x1de8 <DIO_GetPortValue+0x7e>
			case DIO_PORTD: return PIND; break;
    1dda:	e0 e3       	ldi	r30, 0x30	; 48
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8a 83       	std	Y+2, r24	; 0x02
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <DIO_GetPortValue+0x7e>
		}
	}
	return 0xff;//out of range
    1de4:	9f ef       	ldi	r25, 0xFF	; 255
    1de6:	9a 83       	std	Y+2, r25	; 0x02
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <EXTI_void_Int0Init>:
#include "EXTI.h"

/* Global pointer to function to hold INT0 ISR address */
void (*EXTI_pvInt0func)(void)=NULL;

void    EXTI_void_Int0Init(void){
    1df8:	df 93       	push	r29
    1dfa:	cf 93       	push	r28
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62


	//Check Sense control :
#if   EXTI_SENSE_CONTROL == EXTI_LOW_LEVEL
	CLR_BIT(MCUCR , MCUCR_ISC00 );
    1e00:	a5 e5       	ldi	r26, 0x55	; 85
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e5 e5       	ldi	r30, 0x55	; 85
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	80 81       	ld	r24, Z
    1e0a:	8e 7f       	andi	r24, 0xFE	; 254
    1e0c:	8c 93       	st	X, r24
	CLR_BIT(MCUCR , MCUCR_ISC01 );
    1e0e:	a5 e5       	ldi	r26, 0x55	; 85
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e5 e5       	ldi	r30, 0x55	; 85
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	8d 7f       	andi	r24, 0xFD	; 253
    1e1a:	8c 93       	st	X, r24
#error "Warning Sense control configration option"
#endif

	/*Check Peripheral intrrupt enable*/
#if INT0_INITIAL_STATE == EXTI_ENABLED
	SET_BIT(GICR , GICR_INT0 );
    1e1c:	ab e5       	ldi	r26, 0x5B	; 91
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	eb e5       	ldi	r30, 0x5B	; 91
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	80 64       	ori	r24, 0x40	; 64
    1e28:	8c 93       	st	X, r24
#elif INT0_INITIAL_STATE == EXTI_DISABLED
	CLR_BIT(GICR , GICR_INT0 );
#else
#error "Wrong Int0_INITIAL_STATE Configuration option "
#endif
}
    1e2a:	cf 91       	pop	r28
    1e2c:	df 91       	pop	r29
    1e2e:	08 95       	ret

00001e30 <EXTI_u8Int0SetSenseControl>:



u8 EXTI_u8Int0SetSenseControl(u8 u8SenseCopy ){
    1e30:	df 93       	push	r29
    1e32:	cf 93       	push	r28
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <EXTI_u8Int0SetSenseControl+0x6>
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <EXTI_u8Int0SetSenseControl+0x8>
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
	u8 u8ErrorState_Copy = OK;
    1e3e:	19 82       	std	Y+1, r1	; 0x01
	switch( u8SenseCopy )
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	28 2f       	mov	r18, r24
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	3c 83       	std	Y+4, r19	; 0x04
    1e48:	2b 83       	std	Y+3, r18	; 0x03
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	82 30       	cpi	r24, 0x02	; 2
    1e50:	91 05       	cpc	r25, r1
    1e52:	a1 f1       	breq	.+104    	; 0x1ebc <EXTI_u8Int0SetSenseControl+0x8c>
    1e54:	2b 81       	ldd	r18, Y+3	; 0x03
    1e56:	3c 81       	ldd	r19, Y+4	; 0x04
    1e58:	23 30       	cpi	r18, 0x03	; 3
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	34 f4       	brge	.+12     	; 0x1e6a <EXTI_u8Int0SetSenseControl+0x3a>
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	91 05       	cpc	r25, r1
    1e66:	c9 f1       	breq	.+114    	; 0x1eda <EXTI_u8Int0SetSenseControl+0xaa>
    1e68:	47 c0       	rjmp	.+142    	; 0x1ef8 <EXTI_u8Int0SetSenseControl+0xc8>
    1e6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6e:	23 30       	cpi	r18, 0x03	; 3
    1e70:	31 05       	cpc	r19, r1
    1e72:	31 f0       	breq	.+12     	; 0x1e80 <EXTI_u8Int0SetSenseControl+0x50>
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	84 30       	cpi	r24, 0x04	; 4
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	81 f0       	breq	.+32     	; 0x1e9e <EXTI_u8Int0SetSenseControl+0x6e>
    1e7e:	3c c0       	rjmp	.+120    	; 0x1ef8 <EXTI_u8Int0SetSenseControl+0xc8>
	{
	case EXTI_LOW_LEVEL :
		CLR_BIT(MCUCR , MCUCR_ISC00);
    1e80:	a5 e5       	ldi	r26, 0x55	; 85
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e5 e5       	ldi	r30, 0x55	; 85
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	8e 7f       	andi	r24, 0xFE	; 254
    1e8c:	8c 93       	st	X, r24
		CLR_BIT(MCUCR , MCUCR_ISC01);
    1e8e:	a5 e5       	ldi	r26, 0x55	; 85
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e5 e5       	ldi	r30, 0x55	; 85
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	8d 7f       	andi	r24, 0xFD	; 253
    1e9a:	8c 93       	st	X, r24
    1e9c:	2f c0       	rjmp	.+94     	; 0x1efc <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_ON_CHANGE :
		SET_BIT(MCUCR , MCUCR_ISC00);
    1e9e:	a5 e5       	ldi	r26, 0x55	; 85
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e5 e5       	ldi	r30, 0x55	; 85
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	81 60       	ori	r24, 0x01	; 1
    1eaa:	8c 93       	st	X, r24
		CLR_BIT(MCUCR , MCUCR_ISC01);
    1eac:	a5 e5       	ldi	r26, 0x55	; 85
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e5 e5       	ldi	r30, 0x55	; 85
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8d 7f       	andi	r24, 0xFD	; 253
    1eb8:	8c 93       	st	X, r24
    1eba:	20 c0       	rjmp	.+64     	; 0x1efc <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_FALLING_EDGE :
		CLR_BIT(MCUCR , MCUCR_ISC00);
    1ebc:	a5 e5       	ldi	r26, 0x55	; 85
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e5 e5       	ldi	r30, 0x55	; 85
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	8e 7f       	andi	r24, 0xFE	; 254
    1ec8:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC01);
    1eca:	a5 e5       	ldi	r26, 0x55	; 85
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e5 e5       	ldi	r30, 0x55	; 85
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	82 60       	ori	r24, 0x02	; 2
    1ed6:	8c 93       	st	X, r24
    1ed8:	11 c0       	rjmp	.+34     	; 0x1efc <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	case EXTI_RISING_EDGE :
		SET_BIT(MCUCR , MCUCR_ISC00);
    1eda:	a5 e5       	ldi	r26, 0x55	; 85
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e5 e5       	ldi	r30, 0x55	; 85
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	81 60       	ori	r24, 0x01	; 1
    1ee6:	8c 93       	st	X, r24
		SET_BIT(MCUCR , MCUCR_ISC01);
    1ee8:	a5 e5       	ldi	r26, 0x55	; 85
    1eea:	b0 e0       	ldi	r27, 0x00	; 0
    1eec:	e5 e5       	ldi	r30, 0x55	; 85
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	80 81       	ld	r24, Z
    1ef2:	82 60       	ori	r24, 0x02	; 2
    1ef4:	8c 93       	st	X, r24
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <EXTI_u8Int0SetSenseControl+0xcc>
		break;
	default : u8ErrorState_Copy = NOK ;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	89 83       	std	Y+1, r24	; 0x01

	}
	return u8ErrorState_Copy ;
    1efc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <EXTI_u8Int0SetCallBack>:

u8 EXTI_u8Int0SetCallBack (void (*PvInt0Func_Copy) (void)){
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <EXTI_u8Int0SetCallBack+0x6>
    1f12:	0f 92       	push	r0
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	9b 83       	std	Y+3, r25	; 0x03
    1f1a:	8a 83       	std	Y+2, r24	; 0x02

	u8 u8ErrorStatusLocal = OK;
    1f1c:	19 82       	std	Y+1, r1	; 0x01
	if( PvInt0Func_Copy != NULL ){
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	9b 81       	ldd	r25, Y+3	; 0x03
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	39 f0       	breq	.+14     	; 0x1f34 <EXTI_u8Int0SetCallBack+0x28>
		//global ptr = local variable
		EXTI_pvInt0func = PvInt0Func_Copy;
    1f26:	8a 81       	ldd	r24, Y+2	; 0x02
    1f28:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2a:	90 93 3f 02 	sts	0x023F, r25
    1f2e:	80 93 3e 02 	sts	0x023E, r24
    1f32:	02 c0       	rjmp	.+4      	; 0x1f38 <EXTI_u8Int0SetCallBack+0x2c>
	}
	else{
		u8ErrorStatusLocal = NULL_POINTER;
    1f34:	82 e0       	ldi	r24, 0x02	; 2
    1f36:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorStatusLocal ;
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <__vector_1>:


/* ISR of INT0 */
void __vector_1 (void) __attribute__ ((signal));
void __vector_1 (void){
    1f46:	1f 92       	push	r1
    1f48:	0f 92       	push	r0
    1f4a:	0f b6       	in	r0, 0x3f	; 63
    1f4c:	0f 92       	push	r0
    1f4e:	11 24       	eor	r1, r1
    1f50:	2f 93       	push	r18
    1f52:	3f 93       	push	r19
    1f54:	4f 93       	push	r20
    1f56:	5f 93       	push	r21
    1f58:	6f 93       	push	r22
    1f5a:	7f 93       	push	r23
    1f5c:	8f 93       	push	r24
    1f5e:	9f 93       	push	r25
    1f60:	af 93       	push	r26
    1f62:	bf 93       	push	r27
    1f64:	ef 93       	push	r30
    1f66:	ff 93       	push	r31
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	cd b7       	in	r28, 0x3d	; 61
    1f6e:	de b7       	in	r29, 0x3e	; 62
    if(EXTI_pvInt0func != NULL){
    1f70:	80 91 3e 02 	lds	r24, 0x023E
    1f74:	90 91 3f 02 	lds	r25, 0x023F
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	29 f0       	breq	.+10     	; 0x1f86 <__vector_1+0x40>
        //global ptr
        EXTI_pvInt0func();
    1f7c:	e0 91 3e 02 	lds	r30, 0x023E
    1f80:	f0 91 3f 02 	lds	r31, 0x023F
    1f84:	09 95       	icall
    }
    else{
        /* DO NOTHING */
    }
}
    1f86:	cf 91       	pop	r28
    1f88:	df 91       	pop	r29
    1f8a:	ff 91       	pop	r31
    1f8c:	ef 91       	pop	r30
    1f8e:	bf 91       	pop	r27
    1f90:	af 91       	pop	r26
    1f92:	9f 91       	pop	r25
    1f94:	8f 91       	pop	r24
    1f96:	7f 91       	pop	r23
    1f98:	6f 91       	pop	r22
    1f9a:	5f 91       	pop	r21
    1f9c:	4f 91       	pop	r20
    1f9e:	3f 91       	pop	r19
    1fa0:	2f 91       	pop	r18
    1fa2:	0f 90       	pop	r0
    1fa4:	0f be       	out	0x3f, r0	; 63
    1fa6:	0f 90       	pop	r0
    1fa8:	1f 90       	pop	r1
    1faa:	18 95       	reti

00001fac <ExitButtonInit>:
#include "DIO.h"
#include "GateControl.h"
#include "ExitButton.h"
#include "GarageSystem.h"
void ExitButtonInit(void)
{
    1fac:	df 93       	push	r29
    1fae:	cf 93       	push	r28
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(ExitButton_Port,ExitButton_PIN,DIO_INPUT);
    1fb4:	83 e0       	ldi	r24, 0x03	; 3
    1fb6:	62 e0       	ldi	r22, 0x02	; 2
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_SetPinDirection>
}
    1fbe:	cf 91       	pop	r28
    1fc0:	df 91       	pop	r29
    1fc2:	08 95       	ret

00001fc4 <GetExitButtonStatus>:
u8 GetExitButtonStatus(void)
{
    1fc4:	df 93       	push	r29
    1fc6:	cf 93       	push	r28
    1fc8:	0f 92       	push	r0
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
	if(DIO_GetInputPinValue(ExitButton_Port,ExitButton_PIN)==ExitButton_Pressed)
    1fce:	83 e0       	ldi	r24, 0x03	; 3
    1fd0:	62 e0       	ldi	r22, 0x02	; 2
    1fd2:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_GetInputPinValue>
    1fd6:	88 23       	and	r24, r24
    1fd8:	11 f4       	brne	.+4      	; 0x1fde <GetExitButtonStatus+0x1a>
		return ExitButton_Pressed;
    1fda:	19 82       	std	Y+1, r1	; 0x01
    1fdc:	02 c0       	rjmp	.+4      	; 0x1fe2 <GetExitButtonStatus+0x1e>
	else
		return ExitButton_NotPressed;
    1fde:	8f ef       	ldi	r24, 0xFF	; 255
    1fe0:	89 83       	std	Y+1, r24	; 0x01
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <ExitGarage>:
void ExitGarage(void)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
	if(GetGateState()==ClosedGate)
    1ff4:	0e 94 64 11 	call	0x22c8	; 0x22c8 <GetGateState>
    1ff8:	88 23       	and	r24, r24
    1ffa:	19 f4       	brne	.+6      	; 0x2002 <ExitGarage+0x16>
		OpenGate();
    1ffc:	0e 94 6d 11 	call	0x22da	; 0x22da <OpenGate>
    2000:	02 c0       	rjmp	.+4      	; 0x2006 <ExitGarage+0x1a>
	else //gate is opened
		CloseGate();
    2002:	0e 94 8c 11 	call	0x2318	; 0x2318 <CloseGate>
}
    2006:	cf 91       	pop	r28
    2008:	df 91       	pop	r29
    200a:	08 95       	ret

0000200c <GIE_Enable>:
 */
#include "BIT_MATH.h"
#include "avr/io.h"
#include "GIE.h"

void GIE_Enable (void){
    200c:	df 93       	push	r29
    200e:	cf 93       	push	r28
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
	//SET bit 7 in SREG
	SET_BIT(SREG  ,  SREG_I );
    2014:	af e5       	ldi	r26, 0x5F	; 95
    2016:	b0 e0       	ldi	r27, 0x00	; 0
    2018:	ef e5       	ldi	r30, 0x5F	; 95
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	80 81       	ld	r24, Z
    201e:	80 68       	ori	r24, 0x80	; 128
    2020:	8c 93       	st	X, r24

}
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <GIE_Disable>:
void GIE_Disable(void){
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	cd b7       	in	r28, 0x3d	; 61
    202e:	de b7       	in	r29, 0x3e	; 62

	//CLR bit 7 in SREG
	CLR_BIT(SREG  ,  SREG_I );
    2030:	af e5       	ldi	r26, 0x5F	; 95
    2032:	b0 e0       	ldi	r27, 0x00	; 0
    2034:	ef e5       	ldi	r30, 0x5F	; 95
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	8f 77       	andi	r24, 0x7F	; 127
    203c:	8c 93       	st	X, r24

}
    203e:	cf 91       	pop	r28
    2040:	df 91       	pop	r29
    2042:	08 95       	ret

00002044 <StartSystem>:
static u16 WaitingTime = DefaultWaitingTime;
static u8 WaitingTimeState = Waiting;
static u8 PasswordState = PasswordNotMatches;
static u8 Password[4]={'0','0','0','0'};
void StartSystem(void)
{
    2044:	df 93       	push	r29
    2046:	cf 93       	push	r28
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
	CLCD_void_Init();
    204c:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_void_Init>
	LCD_Welcome();
    2050:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_Welcome>
}
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <LCD_Welcome>:
void LCD_Welcome(void)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
	CLCD_void_SendCommand(CLCD_INIT_DisplayClear);
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CLCD_void_SendCommand>
	CLCD_VOID_SetCursorPosition(0,4);
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	64 e0       	ldi	r22, 0x04	; 4
    206c:	0e 94 05 08 	call	0x100a	; 0x100a <CLCD_VOID_SetCursorPosition>
	CLCD_void_SendStringData("Welcome!");
    2070:	80 e6       	ldi	r24, 0x60	; 96
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	0e 94 2e 07 	call	0xe5c	; 0xe5c <CLCD_void_SendStringData>
	CLCD_VOID_SetCursorPosition(1,0);
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	60 e0       	ldi	r22, 0x00	; 0
    207c:	0e 94 05 08 	call	0x100a	; 0x100a <CLCD_VOID_SetCursorPosition>
	CLCD_void_SendStringData("Enter Password :");
    2080:	89 e6       	ldi	r24, 0x69	; 105
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	0e 94 2e 07 	call	0xe5c	; 0xe5c <CLCD_void_SendStringData>
}
    2088:	cf 91       	pop	r28
    208a:	df 91       	pop	r29
    208c:	08 95       	ret

0000208e <LCD_Entered>:
void LCD_Entered(void)
{
    208e:	df 93       	push	r29
    2090:	cf 93       	push	r28
    2092:	cd b7       	in	r28, 0x3d	; 61
    2094:	de b7       	in	r29, 0x3e	; 62
	CLCD_void_SendCommand(CLCD_INIT_DisplayClear);
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CLCD_void_SendCommand>
	CLCD_void_SendStringData("Hello Mr.ENG ^-^");
    209c:	8a e7       	ldi	r24, 0x7A	; 122
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <CLCD_void_SendStringData>
	CLCD_VOID_SetCursorPosition(CLCD_SecondLine,0);
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	0e 94 05 08 	call	0x100a	; 0x100a <CLCD_VOID_SetCursorPosition>
	CLCD_void_SendStringData("Door Is Opening");
    20ac:	8b e8       	ldi	r24, 0x8B	; 139
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <CLCD_void_SendStringData>
}
    20b4:	cf 91       	pop	r28
    20b6:	df 91       	pop	r29
    20b8:	08 95       	ret

000020ba <LCD_CLosingCounter>:
void LCD_CLosingCounter(u8 Counter)
{
    20ba:	df 93       	push	r29
    20bc:	cf 93       	push	r28
    20be:	0f 92       	push	r0
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	89 83       	std	Y+1, r24	; 0x01
	//CLCD_void_SendCommand(CLCD_INIT_DisplayClear);
	//CLCD_void_SendStringData("Closing after:");
	CLCD_VOID_SetCursorPosition(1,6);
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	66 e0       	ldi	r22, 0x06	; 6
    20ca:	0e 94 05 08 	call	0x100a	; 0x100a <CLCD_VOID_SetCursorPosition>
	CLCD_void_SendData(Counter);
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	0e 94 14 07 	call	0xe28	; 0xe28 <CLCD_void_SendData>
}
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <LCD_Alert>:
void LCD_Alert(void)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
	CLCD_void_SendCommand(CLCD_INIT_DisplayClear);
    20e4:	81 e0       	ldi	r24, 0x01	; 1
    20e6:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CLCD_void_SendCommand>
	CLCD_void_SendStringData("Couldn't close");
    20ea:	8b e9       	ldi	r24, 0x9B	; 155
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	0e 94 2e 07 	call	0xe5c	; 0xe5c <CLCD_void_SendStringData>
	CLCD_VOID_SetCursorPosition(1,0);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	60 e0       	ldi	r22, 0x00	; 0
    20f6:	0e 94 05 08 	call	0x100a	; 0x100a <CLCD_VOID_SetCursorPosition>
	CLCD_void_SendStringData("Move your Car");
    20fa:	8a ea       	ldi	r24, 0xAA	; 170
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	0e 94 2e 07 	call	0xe5c	; 0xe5c <CLCD_void_SendStringData>

}
    2102:	cf 91       	pop	r28
    2104:	df 91       	pop	r29
    2106:	08 95       	ret

00002108 <LCD_WrongPassword>:
void LCD_WrongPassword(void)
{
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
	CLCD_void_SendCommand(CLCD_INIT_DisplayClear);
    2110:	81 e0       	ldi	r24, 0x01	; 1
    2112:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CLCD_void_SendCommand>
	CLCD_void_SendStringData("Invalid Password");
    2116:	88 eb       	ldi	r24, 0xB8	; 184
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <CLCD_void_SendStringData>
	CLCD_VOID_SetCursorPosition(CLCD_SecondLine,0);
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	60 e0       	ldi	r22, 0x00	; 0
    2122:	0e 94 05 08 	call	0x100a	; 0x100a <CLCD_VOID_SetCursorPosition>
	CLCD_void_SendStringData("Try Again : ");
    2126:	89 ec       	ldi	r24, 0xC9	; 201
    2128:	90 e0       	ldi	r25, 0x00	; 0
    212a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <CLCD_void_SendStringData>
}
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <SetPassword>:
void SetPassword(u8* PtrPassword)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <SetPassword+0x6>
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	9b 83       	std	Y+3, r25	; 0x03
    2142:	8a 83       	std	Y+2, r24	; 0x02
	u8 i;
	for(i=0;i<4;i++)
    2144:	19 82       	std	Y+1, r1	; 0x01
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <SetPassword+0x32>
		Password[i]=*(PtrPassword+1);
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	9b 81       	ldd	r25, Y+3	; 0x03
    2152:	fc 01       	movw	r30, r24
    2154:	31 96       	adiw	r30, 0x01	; 1
    2156:	80 81       	ld	r24, Z
    2158:	f9 01       	movw	r30, r18
    215a:	e7 5c       	subi	r30, 0xC7	; 199
    215c:	fd 4f       	sbci	r31, 0xFD	; 253
    215e:	80 83       	st	Z, r24
	CLCD_void_SendStringData("Try Again : ");
}
void SetPassword(u8* PtrPassword)
{
	u8 i;
	for(i=0;i<4;i++)
    2160:	89 81       	ldd	r24, Y+1	; 0x01
    2162:	8f 5f       	subi	r24, 0xFF	; 255
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	89 81       	ldd	r24, Y+1	; 0x01
    2168:	84 30       	cpi	r24, 0x04	; 4
    216a:	70 f3       	brcs	.-36     	; 0x2148 <SetPassword+0x14>
		Password[i]=*(PtrPassword+1);
}
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	cf 91       	pop	r28
    2174:	df 91       	pop	r29
    2176:	08 95       	ret

00002178 <GetPassword>:
u8* GetPassword(void)
{
    2178:	df 93       	push	r29
    217a:	cf 93       	push	r28
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
	return Password;
    2180:	89 e3       	ldi	r24, 0x39	; 57
    2182:	92 e0       	ldi	r25, 0x02	; 2
}
    2184:	cf 91       	pop	r28
    2186:	df 91       	pop	r29
    2188:	08 95       	ret

0000218a <SetPasswordState>:
void SetPasswordState(u8 U8PasswordState)
{
    218a:	df 93       	push	r29
    218c:	cf 93       	push	r28
    218e:	0f 92       	push	r0
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	89 83       	std	Y+1, r24	; 0x01
	if(U8PasswordState==PasswordMatches)
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	81 30       	cpi	r24, 0x01	; 1
    219a:	21 f4       	brne	.+8      	; 0x21a4 <SetPasswordState+0x1a>
		PasswordState=PasswordMatches;
    219c:	81 e0       	ldi	r24, 0x01	; 1
    219e:	80 93 41 02 	sts	0x0241, r24
    21a2:	05 c0       	rjmp	.+10     	; 0x21ae <SetPasswordState+0x24>
	else if(U8PasswordState==PasswordNotMatches)
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	88 23       	and	r24, r24
    21a8:	11 f4       	brne	.+4      	; 0x21ae <SetPasswordState+0x24>
		PasswordState=PasswordNotMatches;
    21aa:	10 92 41 02 	sts	0x0241, r1
}
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <GetPasswordState>:
u8 GetPasswordState(void)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	cd b7       	in	r28, 0x3d	; 61
    21bc:	de b7       	in	r29, 0x3e	; 62
	return PasswordState;
    21be:	80 91 41 02 	lds	r24, 0x0241
}
    21c2:	cf 91       	pop	r28
    21c4:	df 91       	pop	r29
    21c6:	08 95       	ret

000021c8 <SetWaitingTime>:
void SetWaitingTime(u16 U8NewWaitingTime)
{
    21c8:	df 93       	push	r29
    21ca:	cf 93       	push	r28
    21cc:	00 d0       	rcall	.+0      	; 0x21ce <SetWaitingTime+0x6>
    21ce:	cd b7       	in	r28, 0x3d	; 61
    21d0:	de b7       	in	r29, 0x3e	; 62
    21d2:	9a 83       	std	Y+2, r25	; 0x02
    21d4:	89 83       	std	Y+1, r24	; 0x01
	WaitingTime=U8NewWaitingTime;
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	9a 81       	ldd	r25, Y+2	; 0x02
    21da:	90 93 38 02 	sts	0x0238, r25
    21de:	80 93 37 02 	sts	0x0237, r24
}
    21e2:	0f 90       	pop	r0
    21e4:	0f 90       	pop	r0
    21e6:	cf 91       	pop	r28
    21e8:	df 91       	pop	r29
    21ea:	08 95       	ret

000021ec <GetWaitingTime>:
u16 GetWaitingTime(void)
{
    21ec:	df 93       	push	r29
    21ee:	cf 93       	push	r28
    21f0:	cd b7       	in	r28, 0x3d	; 61
    21f2:	de b7       	in	r29, 0x3e	; 62
	return WaitingTime;
    21f4:	80 91 37 02 	lds	r24, 0x0237
    21f8:	90 91 38 02 	lds	r25, 0x0238
}
    21fc:	cf 91       	pop	r28
    21fe:	df 91       	pop	r29
    2200:	08 95       	ret

00002202 <SetWaitingTimeState>:
void SetWaitingTimeState(u8 U8NewState)
{
    2202:	df 93       	push	r29
    2204:	cf 93       	push	r28
    2206:	0f 92       	push	r0
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	89 83       	std	Y+1, r24	; 0x01
	if(U8NewState==Waiting)
    220e:	89 81       	ldd	r24, Y+1	; 0x01
    2210:	88 23       	and	r24, r24
    2212:	19 f4       	brne	.+6      	; 0x221a <SetWaitingTimeState+0x18>
		WaitingTimeState=Waiting;
    2214:	10 92 40 02 	sts	0x0240, r1
    2218:	06 c0       	rjmp	.+12     	; 0x2226 <SetWaitingTimeState+0x24>
	else if(U8NewState==TimeOut)
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	8f 3f       	cpi	r24, 0xFF	; 255
    221e:	19 f4       	brne	.+6      	; 0x2226 <SetWaitingTimeState+0x24>
		WaitingTimeState=TimeOut;
    2220:	8f ef       	ldi	r24, 0xFF	; 255
    2222:	80 93 40 02 	sts	0x0240, r24

}
    2226:	0f 90       	pop	r0
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	08 95       	ret

0000222e <GetWaitingTimeState>:
u8 GetWaitingTimeState(void)
{
    222e:	df 93       	push	r29
    2230:	cf 93       	push	r28
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
	return WaitingTimeState;
    2236:	80 91 40 02 	lds	r24, 0x0240
}
    223a:	cf 91       	pop	r28
    223c:	df 91       	pop	r29
    223e:	08 95       	ret

00002240 <CheckPassword>:

u8 CheckPassword(u8* PtrPassword)
{
    2240:	df 93       	push	r29
    2242:	cf 93       	push	r28
    2244:	00 d0       	rcall	.+0      	; 0x2246 <CheckPassword+0x6>
    2246:	00 d0       	rcall	.+0      	; 0x2248 <CheckPassword+0x8>
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	9c 83       	std	Y+4, r25	; 0x04
    224e:	8b 83       	std	Y+3, r24	; 0x03
	u8 i,Result= PasswordMatches;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	89 83       	std	Y+1, r24	; 0x01
	for(i=0;i<4;i++)
    2254:	1a 82       	std	Y+2, r1	; 0x02
    2256:	17 c0       	rjmp	.+46     	; 0x2286 <CheckPassword+0x46>
	{
		if(Password[i]!=*(PtrPassword+i))
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	fc 01       	movw	r30, r24
    2260:	e7 5c       	subi	r30, 0xC7	; 199
    2262:	fd 4f       	sbci	r31, 0xFD	; 253
    2264:	40 81       	ld	r20, Z
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	fc 01       	movw	r30, r24
    2272:	e2 0f       	add	r30, r18
    2274:	f3 1f       	adc	r31, r19
    2276:	80 81       	ld	r24, Z
    2278:	48 17       	cp	r20, r24
    227a:	11 f0       	breq	.+4      	; 0x2280 <CheckPassword+0x40>
		{
			Result= PasswordNotMatches;
    227c:	19 82       	std	Y+1, r1	; 0x01
    227e:	06 c0       	rjmp	.+12     	; 0x228c <CheckPassword+0x4c>
}

u8 CheckPassword(u8* PtrPassword)
{
	u8 i,Result= PasswordMatches;
	for(i=0;i<4;i++)
    2280:	8a 81       	ldd	r24, Y+2	; 0x02
    2282:	8f 5f       	subi	r24, 0xFF	; 255
    2284:	8a 83       	std	Y+2, r24	; 0x02
    2286:	8a 81       	ldd	r24, Y+2	; 0x02
    2288:	84 30       	cpi	r24, 0x04	; 4
    228a:	30 f3       	brcs	.-52     	; 0x2258 <CheckPassword+0x18>
		{
			Result= PasswordNotMatches;
			break;
		}
	}
	return Result;
    228c:	89 81       	ldd	r24, Y+1	; 0x01
}
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	cf 91       	pop	r28
    2298:	df 91       	pop	r29
    229a:	08 95       	ret

0000229c <SetGateState>:
#include "util/delay.h"
static u8 GateState = ClosedGate;
u8 period = 10;

void SetGateState(u8 U8GateStateCopy)
{
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	0f 92       	push	r0
    22a2:	cd b7       	in	r28, 0x3d	; 61
    22a4:	de b7       	in	r29, 0x3e	; 62
    22a6:	89 83       	std	Y+1, r24	; 0x01
	if(U8GateStateCopy==ClosedGate)
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	88 23       	and	r24, r24
    22ac:	19 f4       	brne	.+6      	; 0x22b4 <SetGateState+0x18>
		GateState = ClosedGate;
    22ae:	10 92 42 02 	sts	0x0242, r1
    22b2:	06 c0       	rjmp	.+12     	; 0x22c0 <SetGateState+0x24>
	else if (U8GateStateCopy==OpenedGate)
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	19 f4       	brne	.+6      	; 0x22c0 <SetGateState+0x24>
		GateState = OpenedGate;
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	80 93 42 02 	sts	0x0242, r24
}
    22c0:	0f 90       	pop	r0
    22c2:	cf 91       	pop	r28
    22c4:	df 91       	pop	r29
    22c6:	08 95       	ret

000022c8 <GetGateState>:
u8 GetGateState(void)
{
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
	return GateState;
    22d0:	80 91 42 02 	lds	r24, 0x0242
}
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <OpenGate>:

void OpenGate(void){
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
	if(GetGateState() == ClosedGate)
    22e2:	0e 94 64 11 	call	0x22c8	; 0x22c8 <GetGateState>
    22e6:	88 23       	and	r24, r24
    22e8:	a1 f4       	brne	.+40     	; 0x2312 <OpenGate+0x38>
	{
		USART_Send_String("Door Is Opening\r");
    22ea:	86 ed       	ldi	r24, 0xD6	; 214
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 16 1c 	call	0x382c	; 0x382c <USART_Send_String>
		STEPPER_90_Left(period);
    22f2:	80 91 3d 02 	lds	r24, 0x023D
    22f6:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <STEPPER_90_Left>
		LCD_Entered();
    22fa:	0e 94 47 10 	call	0x208e	; 0x208e <LCD_Entered>
		SetGateState(OpenedGate);
    22fe:	81 e0       	ldi	r24, 0x01	; 1
    2300:	0e 94 4e 11 	call	0x229c	; 0x229c <SetGateState>
		SetWaitingTime(DefaultWaitingTime);
    2304:	8c ed       	ldi	r24, 0xDC	; 220
    2306:	95 e0       	ldi	r25, 0x05	; 5
    2308:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <SetWaitingTime>
		SetWaitingTimeState(Waiting);
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	0e 94 01 11 	call	0x2202	; 0x2202 <SetWaitingTimeState>
	}
}
    2312:	cf 91       	pop	r28
    2314:	df 91       	pop	r29
    2316:	08 95       	ret

00002318 <CloseGate>:

void CloseGate(void){
    2318:	df 93       	push	r29
    231a:	cf 93       	push	r28
    231c:	cd b7       	in	r28, 0x3d	; 61
    231e:	de b7       	in	r29, 0x3e	; 62
	USART_Send_String("in close\r");
    2320:	87 ee       	ldi	r24, 0xE7	; 231
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	0e 94 16 1c 	call	0x382c	; 0x382c <USART_Send_String>

	if(GetGateState() == OpenedGate)
    2328:	0e 94 64 11 	call	0x22c8	; 0x22c8 <GetGateState>
    232c:	81 30       	cpi	r24, 0x01	; 1
    232e:	01 f5       	brne	.+64     	; 0x2370 <CloseGate+0x58>
    2330:	02 c0       	rjmp	.+4      	; 0x2336 <CloseGate+0x1e>
	{
		while(IR_GetReading()==IR_ActiveMode)
		{
			LCD_Alert();
    2332:	0e 94 6e 10 	call	0x20dc	; 0x20dc <LCD_Alert>
void CloseGate(void){
	USART_Send_String("in close\r");

	if(GetGateState() == OpenedGate)
	{
		while(IR_GetReading()==IR_ActiveMode)
    2336:	0e 94 c7 11 	call	0x238e	; 0x238e <IR_GetReading>
    233a:	81 30       	cpi	r24, 0x01	; 1
    233c:	d1 f3       	breq	.-12     	; 0x2332 <CloseGate+0x1a>
		{
			LCD_Alert();
		}
		USART_Send_String("Door Is closing\r");
    233e:	81 ef       	ldi	r24, 0xF1	; 241
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	0e 94 16 1c 	call	0x382c	; 0x382c <USART_Send_String>
		STEPPER_Stop();
    2346:	0e 94 16 1a 	call	0x342c	; 0x342c <STEPPER_Stop>
		STEPPER_90_Right(period);
    234a:	80 91 3d 02 	lds	r24, 0x023D
    234e:	0e 94 0e 18 	call	0x301c	; 0x301c <STEPPER_90_Right>
		LCD_Welcome();
    2352:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_Welcome>
		SetGateState(ClosedGate);
    2356:	80 e0       	ldi	r24, 0x00	; 0
    2358:	0e 94 4e 11 	call	0x229c	; 0x229c <SetGateState>
		SetPasswordState(PasswordNotMatches);
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	0e 94 c5 10 	call	0x218a	; 0x218a <SetPasswordState>
		SetWaitingTime(DefaultWaitingTime);
    2362:	8c ed       	ldi	r24, 0xDC	; 220
    2364:	95 e0       	ldi	r25, 0x05	; 5
    2366:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <SetWaitingTime>
		SetWaitingTimeState(DefaultWaitingState);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	0e 94 01 11 	call	0x2202	; 0x2202 <SetWaitingTimeState>
	}
}
    2370:	cf 91       	pop	r28
    2372:	df 91       	pop	r29
    2374:	08 95       	ret

00002376 <IR_Init>:
#include "STD_TYPES.h"
#include "DIO.h"
#include "IRsensor.h"

void IR_Init(void)
{
    2376:	df 93       	push	r29
    2378:	cf 93       	push	r28
    237a:	cd b7       	in	r28, 0x3d	; 61
    237c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(IR_PORT,IR_PIN,DIO_INPUT);
    237e:	83 e0       	ldi	r24, 0x03	; 3
    2380:	67 e0       	ldi	r22, 0x07	; 7
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_SetPinDirection>
}
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <IR_GetReading>:
u8 IR_GetReading(void)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
	if (DIO_GetInputPinValue(IR_PORT,IR_PIN)==IR_NonActiveMode)
    2398:	83 e0       	ldi	r24, 0x03	; 3
    239a:	67 e0       	ldi	r22, 0x07	; 7
    239c:	0e 94 be 0a 	call	0x157c	; 0x157c <DIO_GetInputPinValue>
    23a0:	88 23       	and	r24, r24
    23a2:	11 f4       	brne	.+4      	; 0x23a8 <IR_GetReading+0x1a>
			return IR_NonActiveMode;
    23a4:	19 82       	std	Y+1, r1	; 0x01
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <IR_GetReading+0x1e>
	else
		return IR_ActiveMode;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <STEPPER_INIT>:
#include "STEPPER.h"

#include <util/delay.h>

void STEPPER_INIT(void)
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	cd b7       	in	r28, 0x3d	; 61
    23bc:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(STEPPER_PORT, Coil1Pin,DIO_OUTPUT);
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	60 e0       	ldi	r22, 0x00	; 0
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_SetPinDirection>
	DIO_SetPinDirection(STEPPER_PORT, Coil2Pin,DIO_OUTPUT);
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	61 e0       	ldi	r22, 0x01	; 1
    23cc:	41 e0       	ldi	r20, 0x01	; 1
    23ce:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_SetPinDirection>
	DIO_SetPinDirection(STEPPER_PORT, Coil3Pin,DIO_OUTPUT);
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	62 e0       	ldi	r22, 0x02	; 2
    23d6:	41 e0       	ldi	r20, 0x01	; 1
    23d8:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_SetPinDirection>
	DIO_SetPinDirection(STEPPER_PORT, Coil4Pin,DIO_OUTPUT);
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	63 e0       	ldi	r22, 0x03	; 3
    23e0:	41 e0       	ldi	r20, 0x01	; 1
    23e2:	0e 94 2e 09 	call	0x125c	; 0x125c <DIO_SetPinDirection>

}
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <STEPPER_45_Left>:

void STEPPER_45_Left(u8 period) {
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	e9 97       	sbiw	r28, 0x39	; 57
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	89 af       	std	Y+57, r24	; 0x39

  DIO_SetPortValue(STEPPER_PORT, Coil4); // activate coil 4
    2402:	81 e0       	ldi	r24, 0x01	; 1
    2404:	68 e0       	ldi	r22, 0x08	; 8
    2406:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    240a:	89 ad       	ldd	r24, Y+57	; 0x39
    240c:	88 2f       	mov	r24, r24
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	a0 e0       	ldi	r26, 0x00	; 0
    2412:	b0 e0       	ldi	r27, 0x00	; 0
    2414:	bc 01       	movw	r22, r24
    2416:	cd 01       	movw	r24, r26
    2418:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	8d ab       	std	Y+53, r24	; 0x35
    2422:	9e ab       	std	Y+54, r25	; 0x36
    2424:	af ab       	std	Y+55, r26	; 0x37
    2426:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2428:	6d a9       	ldd	r22, Y+53	; 0x35
    242a:	7e a9       	ldd	r23, Y+54	; 0x36
    242c:	8f a9       	ldd	r24, Y+55	; 0x37
    242e:	98 ad       	ldd	r25, Y+56	; 0x38
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	30 e0       	ldi	r19, 0x00	; 0
    2434:	4a ef       	ldi	r20, 0xFA	; 250
    2436:	54 e4       	ldi	r21, 0x44	; 68
    2438:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	89 ab       	std	Y+49, r24	; 0x31
    2442:	9a ab       	std	Y+50, r25	; 0x32
    2444:	ab ab       	std	Y+51, r26	; 0x33
    2446:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2448:	69 a9       	ldd	r22, Y+49	; 0x31
    244a:	7a a9       	ldd	r23, Y+50	; 0x32
    244c:	8b a9       	ldd	r24, Y+51	; 0x33
    244e:	9c a9       	ldd	r25, Y+52	; 0x34
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e8       	ldi	r20, 0x80	; 128
    2456:	5f e3       	ldi	r21, 0x3F	; 63
    2458:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    245c:	88 23       	and	r24, r24
    245e:	2c f4       	brge	.+10     	; 0x246a <STEPPER_45_Left+0x7e>
		__ticks = 1;
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	90 e0       	ldi	r25, 0x00	; 0
    2464:	98 ab       	std	Y+48, r25	; 0x30
    2466:	8f a7       	std	Y+47, r24	; 0x2f
    2468:	3f c0       	rjmp	.+126    	; 0x24e8 <STEPPER_45_Left+0xfc>
	else if (__tmp > 65535)
    246a:	69 a9       	ldd	r22, Y+49	; 0x31
    246c:	7a a9       	ldd	r23, Y+50	; 0x32
    246e:	8b a9       	ldd	r24, Y+51	; 0x33
    2470:	9c a9       	ldd	r25, Y+52	; 0x34
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	3f ef       	ldi	r19, 0xFF	; 255
    2476:	4f e7       	ldi	r20, 0x7F	; 127
    2478:	57 e4       	ldi	r21, 0x47	; 71
    247a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    247e:	18 16       	cp	r1, r24
    2480:	4c f5       	brge	.+82     	; 0x24d4 <STEPPER_45_Left+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2482:	6d a9       	ldd	r22, Y+53	; 0x35
    2484:	7e a9       	ldd	r23, Y+54	; 0x36
    2486:	8f a9       	ldd	r24, Y+55	; 0x37
    2488:	98 ad       	ldd	r25, Y+56	; 0x38
    248a:	20 e0       	ldi	r18, 0x00	; 0
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	40 e2       	ldi	r20, 0x20	; 32
    2490:	51 e4       	ldi	r21, 0x41	; 65
    2492:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2496:	dc 01       	movw	r26, r24
    2498:	cb 01       	movw	r24, r22
    249a:	bc 01       	movw	r22, r24
    249c:	cd 01       	movw	r24, r26
    249e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	98 ab       	std	Y+48, r25	; 0x30
    24a8:	8f a7       	std	Y+47, r24	; 0x2f
    24aa:	0f c0       	rjmp	.+30     	; 0x24ca <STEPPER_45_Left+0xde>
    24ac:	88 ec       	ldi	r24, 0xC8	; 200
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9e a7       	std	Y+46, r25	; 0x2e
    24b2:	8d a7       	std	Y+45, r24	; 0x2d
    24b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <STEPPER_45_Left+0xcc>
    24bc:	9e a7       	std	Y+46, r25	; 0x2e
    24be:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24c0:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c2:	98 a9       	ldd	r25, Y+48	; 0x30
    24c4:	01 97       	sbiw	r24, 0x01	; 1
    24c6:	98 ab       	std	Y+48, r25	; 0x30
    24c8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ca:	8f a5       	ldd	r24, Y+47	; 0x2f
    24cc:	98 a9       	ldd	r25, Y+48	; 0x30
    24ce:	00 97       	sbiw	r24, 0x00	; 0
    24d0:	69 f7       	brne	.-38     	; 0x24ac <STEPPER_45_Left+0xc0>
    24d2:	14 c0       	rjmp	.+40     	; 0x24fc <STEPPER_45_Left+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24d4:	69 a9       	ldd	r22, Y+49	; 0x31
    24d6:	7a a9       	ldd	r23, Y+50	; 0x32
    24d8:	8b a9       	ldd	r24, Y+51	; 0x33
    24da:	9c a9       	ldd	r25, Y+52	; 0x34
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	98 ab       	std	Y+48, r25	; 0x30
    24e6:	8f a7       	std	Y+47, r24	; 0x2f
    24e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ea:	98 a9       	ldd	r25, Y+48	; 0x30
    24ec:	9c a7       	std	Y+44, r25	; 0x2c
    24ee:	8b a7       	std	Y+43, r24	; 0x2b
    24f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f2:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <STEPPER_45_Left+0x108>
    24f8:	9c a7       	std	Y+44, r25	; 0x2c
    24fa:	8b a7       	std	Y+43, r24	; 0x2b
  DIO_SetPortValue(STEPPER_PORT, Coil3); // activate coil 3
    24fc:	81 e0       	ldi	r24, 0x01	; 1
    24fe:	64 e0       	ldi	r22, 0x04	; 4
    2500:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    2504:	89 ad       	ldd	r24, Y+57	; 0x39
    2506:	88 2f       	mov	r24, r24
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	a0 e0       	ldi	r26, 0x00	; 0
    250c:	b0 e0       	ldi	r27, 0x00	; 0
    250e:	bc 01       	movw	r22, r24
    2510:	cd 01       	movw	r24, r26
    2512:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8f a3       	std	Y+39, r24	; 0x27
    251c:	98 a7       	std	Y+40, r25	; 0x28
    251e:	a9 a7       	std	Y+41, r26	; 0x29
    2520:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2522:	6f a1       	ldd	r22, Y+39	; 0x27
    2524:	78 a5       	ldd	r23, Y+40	; 0x28
    2526:	89 a5       	ldd	r24, Y+41	; 0x29
    2528:	9a a5       	ldd	r25, Y+42	; 0x2a
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a ef       	ldi	r20, 0xFA	; 250
    2530:	54 e4       	ldi	r21, 0x44	; 68
    2532:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8b a3       	std	Y+35, r24	; 0x23
    253c:	9c a3       	std	Y+36, r25	; 0x24
    253e:	ad a3       	std	Y+37, r26	; 0x25
    2540:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2542:	6b a1       	ldd	r22, Y+35	; 0x23
    2544:	7c a1       	ldd	r23, Y+36	; 0x24
    2546:	8d a1       	ldd	r24, Y+37	; 0x25
    2548:	9e a1       	ldd	r25, Y+38	; 0x26
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	40 e8       	ldi	r20, 0x80	; 128
    2550:	5f e3       	ldi	r21, 0x3F	; 63
    2552:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2556:	88 23       	and	r24, r24
    2558:	2c f4       	brge	.+10     	; 0x2564 <STEPPER_45_Left+0x178>
		__ticks = 1;
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	9a a3       	std	Y+34, r25	; 0x22
    2560:	89 a3       	std	Y+33, r24	; 0x21
    2562:	3f c0       	rjmp	.+126    	; 0x25e2 <STEPPER_45_Left+0x1f6>
	else if (__tmp > 65535)
    2564:	6b a1       	ldd	r22, Y+35	; 0x23
    2566:	7c a1       	ldd	r23, Y+36	; 0x24
    2568:	8d a1       	ldd	r24, Y+37	; 0x25
    256a:	9e a1       	ldd	r25, Y+38	; 0x26
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	3f ef       	ldi	r19, 0xFF	; 255
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	57 e4       	ldi	r21, 0x47	; 71
    2574:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	4c f5       	brge	.+82     	; 0x25ce <STEPPER_45_Left+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    257c:	6f a1       	ldd	r22, Y+39	; 0x27
    257e:	78 a5       	ldd	r23, Y+40	; 0x28
    2580:	89 a5       	ldd	r24, Y+41	; 0x29
    2582:	9a a5       	ldd	r25, Y+42	; 0x2a
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	40 e2       	ldi	r20, 0x20	; 32
    258a:	51 e4       	ldi	r21, 0x41	; 65
    258c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	bc 01       	movw	r22, r24
    2596:	cd 01       	movw	r24, r26
    2598:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259c:	dc 01       	movw	r26, r24
    259e:	cb 01       	movw	r24, r22
    25a0:	9a a3       	std	Y+34, r25	; 0x22
    25a2:	89 a3       	std	Y+33, r24	; 0x21
    25a4:	0f c0       	rjmp	.+30     	; 0x25c4 <STEPPER_45_Left+0x1d8>
    25a6:	88 ec       	ldi	r24, 0xC8	; 200
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	98 a3       	std	Y+32, r25	; 0x20
    25ac:	8f 8f       	std	Y+31, r24	; 0x1f
    25ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b0:	98 a1       	ldd	r25, Y+32	; 0x20
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <STEPPER_45_Left+0x1c6>
    25b6:	98 a3       	std	Y+32, r25	; 0x20
    25b8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ba:	89 a1       	ldd	r24, Y+33	; 0x21
    25bc:	9a a1       	ldd	r25, Y+34	; 0x22
    25be:	01 97       	sbiw	r24, 0x01	; 1
    25c0:	9a a3       	std	Y+34, r25	; 0x22
    25c2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c4:	89 a1       	ldd	r24, Y+33	; 0x21
    25c6:	9a a1       	ldd	r25, Y+34	; 0x22
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	69 f7       	brne	.-38     	; 0x25a6 <STEPPER_45_Left+0x1ba>
    25cc:	14 c0       	rjmp	.+40     	; 0x25f6 <STEPPER_45_Left+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ce:	6b a1       	ldd	r22, Y+35	; 0x23
    25d0:	7c a1       	ldd	r23, Y+36	; 0x24
    25d2:	8d a1       	ldd	r24, Y+37	; 0x25
    25d4:	9e a1       	ldd	r25, Y+38	; 0x26
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9a a3       	std	Y+34, r25	; 0x22
    25e0:	89 a3       	std	Y+33, r24	; 0x21
    25e2:	89 a1       	ldd	r24, Y+33	; 0x21
    25e4:	9a a1       	ldd	r25, Y+34	; 0x22
    25e6:	9e 8f       	std	Y+30, r25	; 0x1e
    25e8:	8d 8f       	std	Y+29, r24	; 0x1d
    25ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ee:	01 97       	sbiw	r24, 0x01	; 1
    25f0:	f1 f7       	brne	.-4      	; 0x25ee <STEPPER_45_Left+0x202>
    25f2:	9e 8f       	std	Y+30, r25	; 0x1e
    25f4:	8d 8f       	std	Y+29, r24	; 0x1d
  DIO_SetPortValue(STEPPER_PORT, Coil2); // activate coil 2
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	62 e0       	ldi	r22, 0x02	; 2
    25fa:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    25fe:	89 ad       	ldd	r24, Y+57	; 0x39
    2600:	88 2f       	mov	r24, r24
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e0       	ldi	r26, 0x00	; 0
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	89 8f       	std	Y+25, r24	; 0x19
    2616:	9a 8f       	std	Y+26, r25	; 0x1a
    2618:	ab 8f       	std	Y+27, r26	; 0x1b
    261a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    261c:	69 8d       	ldd	r22, Y+25	; 0x19
    261e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2620:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2622:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2624:	20 e0       	ldi	r18, 0x00	; 0
    2626:	30 e0       	ldi	r19, 0x00	; 0
    2628:	4a ef       	ldi	r20, 0xFA	; 250
    262a:	54 e4       	ldi	r21, 0x44	; 68
    262c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2630:	dc 01       	movw	r26, r24
    2632:	cb 01       	movw	r24, r22
    2634:	8d 8b       	std	Y+21, r24	; 0x15
    2636:	9e 8b       	std	Y+22, r25	; 0x16
    2638:	af 8b       	std	Y+23, r26	; 0x17
    263a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    263c:	6d 89       	ldd	r22, Y+21	; 0x15
    263e:	7e 89       	ldd	r23, Y+22	; 0x16
    2640:	8f 89       	ldd	r24, Y+23	; 0x17
    2642:	98 8d       	ldd	r25, Y+24	; 0x18
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e8       	ldi	r20, 0x80	; 128
    264a:	5f e3       	ldi	r21, 0x3F	; 63
    264c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2650:	88 23       	and	r24, r24
    2652:	2c f4       	brge	.+10     	; 0x265e <STEPPER_45_Left+0x272>
		__ticks = 1;
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	9c 8b       	std	Y+20, r25	; 0x14
    265a:	8b 8b       	std	Y+19, r24	; 0x13
    265c:	3f c0       	rjmp	.+126    	; 0x26dc <STEPPER_45_Left+0x2f0>
	else if (__tmp > 65535)
    265e:	6d 89       	ldd	r22, Y+21	; 0x15
    2660:	7e 89       	ldd	r23, Y+22	; 0x16
    2662:	8f 89       	ldd	r24, Y+23	; 0x17
    2664:	98 8d       	ldd	r25, Y+24	; 0x18
    2666:	20 e0       	ldi	r18, 0x00	; 0
    2668:	3f ef       	ldi	r19, 0xFF	; 255
    266a:	4f e7       	ldi	r20, 0x7F	; 127
    266c:	57 e4       	ldi	r21, 0x47	; 71
    266e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2672:	18 16       	cp	r1, r24
    2674:	4c f5       	brge	.+82     	; 0x26c8 <STEPPER_45_Left+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2676:	69 8d       	ldd	r22, Y+25	; 0x19
    2678:	7a 8d       	ldd	r23, Y+26	; 0x1a
    267a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    267c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e2       	ldi	r20, 0x20	; 32
    2684:	51 e4       	ldi	r21, 0x41	; 65
    2686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	bc 01       	movw	r22, r24
    2690:	cd 01       	movw	r24, r26
    2692:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2696:	dc 01       	movw	r26, r24
    2698:	cb 01       	movw	r24, r22
    269a:	9c 8b       	std	Y+20, r25	; 0x14
    269c:	8b 8b       	std	Y+19, r24	; 0x13
    269e:	0f c0       	rjmp	.+30     	; 0x26be <STEPPER_45_Left+0x2d2>
    26a0:	88 ec       	ldi	r24, 0xC8	; 200
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	9a 8b       	std	Y+18, r25	; 0x12
    26a6:	89 8b       	std	Y+17, r24	; 0x11
    26a8:	89 89       	ldd	r24, Y+17	; 0x11
    26aa:	9a 89       	ldd	r25, Y+18	; 0x12
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	f1 f7       	brne	.-4      	; 0x26ac <STEPPER_45_Left+0x2c0>
    26b0:	9a 8b       	std	Y+18, r25	; 0x12
    26b2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b4:	8b 89       	ldd	r24, Y+19	; 0x13
    26b6:	9c 89       	ldd	r25, Y+20	; 0x14
    26b8:	01 97       	sbiw	r24, 0x01	; 1
    26ba:	9c 8b       	std	Y+20, r25	; 0x14
    26bc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26be:	8b 89       	ldd	r24, Y+19	; 0x13
    26c0:	9c 89       	ldd	r25, Y+20	; 0x14
    26c2:	00 97       	sbiw	r24, 0x00	; 0
    26c4:	69 f7       	brne	.-38     	; 0x26a0 <STEPPER_45_Left+0x2b4>
    26c6:	14 c0       	rjmp	.+40     	; 0x26f0 <STEPPER_45_Left+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ca:	7e 89       	ldd	r23, Y+22	; 0x16
    26cc:	8f 89       	ldd	r24, Y+23	; 0x17
    26ce:	98 8d       	ldd	r25, Y+24	; 0x18
    26d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26d4:	dc 01       	movw	r26, r24
    26d6:	cb 01       	movw	r24, r22
    26d8:	9c 8b       	std	Y+20, r25	; 0x14
    26da:	8b 8b       	std	Y+19, r24	; 0x13
    26dc:	8b 89       	ldd	r24, Y+19	; 0x13
    26de:	9c 89       	ldd	r25, Y+20	; 0x14
    26e0:	98 8b       	std	Y+16, r25	; 0x10
    26e2:	8f 87       	std	Y+15, r24	; 0x0f
    26e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e6:	98 89       	ldd	r25, Y+16	; 0x10
    26e8:	01 97       	sbiw	r24, 0x01	; 1
    26ea:	f1 f7       	brne	.-4      	; 0x26e8 <STEPPER_45_Left+0x2fc>
    26ec:	98 8b       	std	Y+16, r25	; 0x10
    26ee:	8f 87       	std	Y+15, r24	; 0x0f
  DIO_SetPortValue(STEPPER_PORT, Coil1); // activate coil 1
    26f0:	81 e0       	ldi	r24, 0x01	; 1
    26f2:	61 e0       	ldi	r22, 0x01	; 1
    26f4:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    26f8:	89 ad       	ldd	r24, Y+57	; 0x39
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	a0 e0       	ldi	r26, 0x00	; 0
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	bc 01       	movw	r22, r24
    2704:	cd 01       	movw	r24, r26
    2706:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	8b 87       	std	Y+11, r24	; 0x0b
    2710:	9c 87       	std	Y+12, r25	; 0x0c
    2712:	ad 87       	std	Y+13, r26	; 0x0d
    2714:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2716:	6b 85       	ldd	r22, Y+11	; 0x0b
    2718:	7c 85       	ldd	r23, Y+12	; 0x0c
    271a:	8d 85       	ldd	r24, Y+13	; 0x0d
    271c:	9e 85       	ldd	r25, Y+14	; 0x0e
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	4a ef       	ldi	r20, 0xFA	; 250
    2724:	54 e4       	ldi	r21, 0x44	; 68
    2726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	8f 83       	std	Y+7, r24	; 0x07
    2730:	98 87       	std	Y+8, r25	; 0x08
    2732:	a9 87       	std	Y+9, r26	; 0x09
    2734:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2736:	6f 81       	ldd	r22, Y+7	; 0x07
    2738:	78 85       	ldd	r23, Y+8	; 0x08
    273a:	89 85       	ldd	r24, Y+9	; 0x09
    273c:	9a 85       	ldd	r25, Y+10	; 0x0a
    273e:	20 e0       	ldi	r18, 0x00	; 0
    2740:	30 e0       	ldi	r19, 0x00	; 0
    2742:	40 e8       	ldi	r20, 0x80	; 128
    2744:	5f e3       	ldi	r21, 0x3F	; 63
    2746:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    274a:	88 23       	and	r24, r24
    274c:	2c f4       	brge	.+10     	; 0x2758 <STEPPER_45_Left+0x36c>
		__ticks = 1;
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	9e 83       	std	Y+6, r25	; 0x06
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	3f c0       	rjmp	.+126    	; 0x27d6 <STEPPER_45_Left+0x3ea>
	else if (__tmp > 65535)
    2758:	6f 81       	ldd	r22, Y+7	; 0x07
    275a:	78 85       	ldd	r23, Y+8	; 0x08
    275c:	89 85       	ldd	r24, Y+9	; 0x09
    275e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	3f ef       	ldi	r19, 0xFF	; 255
    2764:	4f e7       	ldi	r20, 0x7F	; 127
    2766:	57 e4       	ldi	r21, 0x47	; 71
    2768:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276c:	18 16       	cp	r1, r24
    276e:	4c f5       	brge	.+82     	; 0x27c2 <STEPPER_45_Left+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2770:	6b 85       	ldd	r22, Y+11	; 0x0b
    2772:	7c 85       	ldd	r23, Y+12	; 0x0c
    2774:	8d 85       	ldd	r24, Y+13	; 0x0d
    2776:	9e 85       	ldd	r25, Y+14	; 0x0e
    2778:	20 e0       	ldi	r18, 0x00	; 0
    277a:	30 e0       	ldi	r19, 0x00	; 0
    277c:	40 e2       	ldi	r20, 0x20	; 32
    277e:	51 e4       	ldi	r21, 0x41	; 65
    2780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2784:	dc 01       	movw	r26, r24
    2786:	cb 01       	movw	r24, r22
    2788:	bc 01       	movw	r22, r24
    278a:	cd 01       	movw	r24, r26
    278c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2790:	dc 01       	movw	r26, r24
    2792:	cb 01       	movw	r24, r22
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <STEPPER_45_Left+0x3cc>
    279a:	88 ec       	ldi	r24, 0xC8	; 200
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	9c 83       	std	Y+4, r25	; 0x04
    27a0:	8b 83       	std	Y+3, r24	; 0x03
    27a2:	8b 81       	ldd	r24, Y+3	; 0x03
    27a4:	9c 81       	ldd	r25, Y+4	; 0x04
    27a6:	01 97       	sbiw	r24, 0x01	; 1
    27a8:	f1 f7       	brne	.-4      	; 0x27a6 <STEPPER_45_Left+0x3ba>
    27aa:	9c 83       	std	Y+4, r25	; 0x04
    27ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ae:	8d 81       	ldd	r24, Y+5	; 0x05
    27b0:	9e 81       	ldd	r25, Y+6	; 0x06
    27b2:	01 97       	sbiw	r24, 0x01	; 1
    27b4:	9e 83       	std	Y+6, r25	; 0x06
    27b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b8:	8d 81       	ldd	r24, Y+5	; 0x05
    27ba:	9e 81       	ldd	r25, Y+6	; 0x06
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	69 f7       	brne	.-38     	; 0x279a <STEPPER_45_Left+0x3ae>
    27c0:	14 c0       	rjmp	.+40     	; 0x27ea <STEPPER_45_Left+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c2:	6f 81       	ldd	r22, Y+7	; 0x07
    27c4:	78 85       	ldd	r23, Y+8	; 0x08
    27c6:	89 85       	ldd	r24, Y+9	; 0x09
    27c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9e 83       	std	Y+6, r25	; 0x06
    27d4:	8d 83       	std	Y+5, r24	; 0x05
    27d6:	8d 81       	ldd	r24, Y+5	; 0x05
    27d8:	9e 81       	ldd	r25, Y+6	; 0x06
    27da:	9a 83       	std	Y+2, r25	; 0x02
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	89 81       	ldd	r24, Y+1	; 0x01
    27e0:	9a 81       	ldd	r25, Y+2	; 0x02
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <STEPPER_45_Left+0x3f6>
    27e6:	9a 83       	std	Y+2, r25	; 0x02
    27e8:	89 83       	std	Y+1, r24	; 0x01
}
    27ea:	e9 96       	adiw	r28, 0x39	; 57
    27ec:	0f b6       	in	r0, 0x3f	; 63
    27ee:	f8 94       	cli
    27f0:	de bf       	out	0x3e, r29	; 62
    27f2:	0f be       	out	0x3f, r0	; 63
    27f4:	cd bf       	out	0x3d, r28	; 61
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <STEPPER_45_Right>:

void STEPPER_45_Right(u8 period) {
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
    2804:	e9 97       	sbiw	r28, 0x39	; 57
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	f8 94       	cli
    280a:	de bf       	out	0x3e, r29	; 62
    280c:	0f be       	out	0x3f, r0	; 63
    280e:	cd bf       	out	0x3d, r28	; 61
    2810:	89 af       	std	Y+57, r24	; 0x39

  DIO_SetPortValue(STEPPER_PORT, Coil1); // activate coil 1
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    281a:	89 ad       	ldd	r24, Y+57	; 0x39
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	a0 e0       	ldi	r26, 0x00	; 0
    2822:	b0 e0       	ldi	r27, 0x00	; 0
    2824:	bc 01       	movw	r22, r24
    2826:	cd 01       	movw	r24, r26
    2828:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    282c:	dc 01       	movw	r26, r24
    282e:	cb 01       	movw	r24, r22
    2830:	8d ab       	std	Y+53, r24	; 0x35
    2832:	9e ab       	std	Y+54, r25	; 0x36
    2834:	af ab       	std	Y+55, r26	; 0x37
    2836:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2838:	6d a9       	ldd	r22, Y+53	; 0x35
    283a:	7e a9       	ldd	r23, Y+54	; 0x36
    283c:	8f a9       	ldd	r24, Y+55	; 0x37
    283e:	98 ad       	ldd	r25, Y+56	; 0x38
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	4a ef       	ldi	r20, 0xFA	; 250
    2846:	54 e4       	ldi	r21, 0x44	; 68
    2848:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	89 ab       	std	Y+49, r24	; 0x31
    2852:	9a ab       	std	Y+50, r25	; 0x32
    2854:	ab ab       	std	Y+51, r26	; 0x33
    2856:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2858:	69 a9       	ldd	r22, Y+49	; 0x31
    285a:	7a a9       	ldd	r23, Y+50	; 0x32
    285c:	8b a9       	ldd	r24, Y+51	; 0x33
    285e:	9c a9       	ldd	r25, Y+52	; 0x34
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e8       	ldi	r20, 0x80	; 128
    2866:	5f e3       	ldi	r21, 0x3F	; 63
    2868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    286c:	88 23       	and	r24, r24
    286e:	2c f4       	brge	.+10     	; 0x287a <STEPPER_45_Right+0x7e>
		__ticks = 1;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	98 ab       	std	Y+48, r25	; 0x30
    2876:	8f a7       	std	Y+47, r24	; 0x2f
    2878:	3f c0       	rjmp	.+126    	; 0x28f8 <STEPPER_45_Right+0xfc>
	else if (__tmp > 65535)
    287a:	69 a9       	ldd	r22, Y+49	; 0x31
    287c:	7a a9       	ldd	r23, Y+50	; 0x32
    287e:	8b a9       	ldd	r24, Y+51	; 0x33
    2880:	9c a9       	ldd	r25, Y+52	; 0x34
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	3f ef       	ldi	r19, 0xFF	; 255
    2886:	4f e7       	ldi	r20, 0x7F	; 127
    2888:	57 e4       	ldi	r21, 0x47	; 71
    288a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    288e:	18 16       	cp	r1, r24
    2890:	4c f5       	brge	.+82     	; 0x28e4 <STEPPER_45_Right+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2892:	6d a9       	ldd	r22, Y+53	; 0x35
    2894:	7e a9       	ldd	r23, Y+54	; 0x36
    2896:	8f a9       	ldd	r24, Y+55	; 0x37
    2898:	98 ad       	ldd	r25, Y+56	; 0x38
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e2       	ldi	r20, 0x20	; 32
    28a0:	51 e4       	ldi	r21, 0x41	; 65
    28a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28a6:	dc 01       	movw	r26, r24
    28a8:	cb 01       	movw	r24, r22
    28aa:	bc 01       	movw	r22, r24
    28ac:	cd 01       	movw	r24, r26
    28ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b2:	dc 01       	movw	r26, r24
    28b4:	cb 01       	movw	r24, r22
    28b6:	98 ab       	std	Y+48, r25	; 0x30
    28b8:	8f a7       	std	Y+47, r24	; 0x2f
    28ba:	0f c0       	rjmp	.+30     	; 0x28da <STEPPER_45_Right+0xde>
    28bc:	88 ec       	ldi	r24, 0xC8	; 200
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9e a7       	std	Y+46, r25	; 0x2e
    28c2:	8d a7       	std	Y+45, r24	; 0x2d
    28c4:	8d a5       	ldd	r24, Y+45	; 0x2d
    28c6:	9e a5       	ldd	r25, Y+46	; 0x2e
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <STEPPER_45_Right+0xcc>
    28cc:	9e a7       	std	Y+46, r25	; 0x2e
    28ce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28d0:	8f a5       	ldd	r24, Y+47	; 0x2f
    28d2:	98 a9       	ldd	r25, Y+48	; 0x30
    28d4:	01 97       	sbiw	r24, 0x01	; 1
    28d6:	98 ab       	std	Y+48, r25	; 0x30
    28d8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28da:	8f a5       	ldd	r24, Y+47	; 0x2f
    28dc:	98 a9       	ldd	r25, Y+48	; 0x30
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	69 f7       	brne	.-38     	; 0x28bc <STEPPER_45_Right+0xc0>
    28e2:	14 c0       	rjmp	.+40     	; 0x290c <STEPPER_45_Right+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28e4:	69 a9       	ldd	r22, Y+49	; 0x31
    28e6:	7a a9       	ldd	r23, Y+50	; 0x32
    28e8:	8b a9       	ldd	r24, Y+51	; 0x33
    28ea:	9c a9       	ldd	r25, Y+52	; 0x34
    28ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	98 ab       	std	Y+48, r25	; 0x30
    28f6:	8f a7       	std	Y+47, r24	; 0x2f
    28f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28fa:	98 a9       	ldd	r25, Y+48	; 0x30
    28fc:	9c a7       	std	Y+44, r25	; 0x2c
    28fe:	8b a7       	std	Y+43, r24	; 0x2b
    2900:	8b a5       	ldd	r24, Y+43	; 0x2b
    2902:	9c a5       	ldd	r25, Y+44	; 0x2c
    2904:	01 97       	sbiw	r24, 0x01	; 1
    2906:	f1 f7       	brne	.-4      	; 0x2904 <STEPPER_45_Right+0x108>
    2908:	9c a7       	std	Y+44, r25	; 0x2c
    290a:	8b a7       	std	Y+43, r24	; 0x2b
  DIO_SetPortValue(STEPPER_PORT, Coil2); // activate coil 2
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	62 e0       	ldi	r22, 0x02	; 2
    2910:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    2914:	89 ad       	ldd	r24, Y+57	; 0x39
    2916:	88 2f       	mov	r24, r24
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	a0 e0       	ldi	r26, 0x00	; 0
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	bc 01       	movw	r22, r24
    2920:	cd 01       	movw	r24, r26
    2922:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	8f a3       	std	Y+39, r24	; 0x27
    292c:	98 a7       	std	Y+40, r25	; 0x28
    292e:	a9 a7       	std	Y+41, r26	; 0x29
    2930:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2932:	6f a1       	ldd	r22, Y+39	; 0x27
    2934:	78 a5       	ldd	r23, Y+40	; 0x28
    2936:	89 a5       	ldd	r24, Y+41	; 0x29
    2938:	9a a5       	ldd	r25, Y+42	; 0x2a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	4a ef       	ldi	r20, 0xFA	; 250
    2940:	54 e4       	ldi	r21, 0x44	; 68
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	8b a3       	std	Y+35, r24	; 0x23
    294c:	9c a3       	std	Y+36, r25	; 0x24
    294e:	ad a3       	std	Y+37, r26	; 0x25
    2950:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2952:	6b a1       	ldd	r22, Y+35	; 0x23
    2954:	7c a1       	ldd	r23, Y+36	; 0x24
    2956:	8d a1       	ldd	r24, Y+37	; 0x25
    2958:	9e a1       	ldd	r25, Y+38	; 0x26
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e8       	ldi	r20, 0x80	; 128
    2960:	5f e3       	ldi	r21, 0x3F	; 63
    2962:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2966:	88 23       	and	r24, r24
    2968:	2c f4       	brge	.+10     	; 0x2974 <STEPPER_45_Right+0x178>
		__ticks = 1;
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	9a a3       	std	Y+34, r25	; 0x22
    2970:	89 a3       	std	Y+33, r24	; 0x21
    2972:	3f c0       	rjmp	.+126    	; 0x29f2 <STEPPER_45_Right+0x1f6>
	else if (__tmp > 65535)
    2974:	6b a1       	ldd	r22, Y+35	; 0x23
    2976:	7c a1       	ldd	r23, Y+36	; 0x24
    2978:	8d a1       	ldd	r24, Y+37	; 0x25
    297a:	9e a1       	ldd	r25, Y+38	; 0x26
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	3f ef       	ldi	r19, 0xFF	; 255
    2980:	4f e7       	ldi	r20, 0x7F	; 127
    2982:	57 e4       	ldi	r21, 0x47	; 71
    2984:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2988:	18 16       	cp	r1, r24
    298a:	4c f5       	brge	.+82     	; 0x29de <STEPPER_45_Right+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298c:	6f a1       	ldd	r22, Y+39	; 0x27
    298e:	78 a5       	ldd	r23, Y+40	; 0x28
    2990:	89 a5       	ldd	r24, Y+41	; 0x29
    2992:	9a a5       	ldd	r25, Y+42	; 0x2a
    2994:	20 e0       	ldi	r18, 0x00	; 0
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	40 e2       	ldi	r20, 0x20	; 32
    299a:	51 e4       	ldi	r21, 0x41	; 65
    299c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29a0:	dc 01       	movw	r26, r24
    29a2:	cb 01       	movw	r24, r22
    29a4:	bc 01       	movw	r22, r24
    29a6:	cd 01       	movw	r24, r26
    29a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ac:	dc 01       	movw	r26, r24
    29ae:	cb 01       	movw	r24, r22
    29b0:	9a a3       	std	Y+34, r25	; 0x22
    29b2:	89 a3       	std	Y+33, r24	; 0x21
    29b4:	0f c0       	rjmp	.+30     	; 0x29d4 <STEPPER_45_Right+0x1d8>
    29b6:	88 ec       	ldi	r24, 0xC8	; 200
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	98 a3       	std	Y+32, r25	; 0x20
    29bc:	8f 8f       	std	Y+31, r24	; 0x1f
    29be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29c0:	98 a1       	ldd	r25, Y+32	; 0x20
    29c2:	01 97       	sbiw	r24, 0x01	; 1
    29c4:	f1 f7       	brne	.-4      	; 0x29c2 <STEPPER_45_Right+0x1c6>
    29c6:	98 a3       	std	Y+32, r25	; 0x20
    29c8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29ca:	89 a1       	ldd	r24, Y+33	; 0x21
    29cc:	9a a1       	ldd	r25, Y+34	; 0x22
    29ce:	01 97       	sbiw	r24, 0x01	; 1
    29d0:	9a a3       	std	Y+34, r25	; 0x22
    29d2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d4:	89 a1       	ldd	r24, Y+33	; 0x21
    29d6:	9a a1       	ldd	r25, Y+34	; 0x22
    29d8:	00 97       	sbiw	r24, 0x00	; 0
    29da:	69 f7       	brne	.-38     	; 0x29b6 <STEPPER_45_Right+0x1ba>
    29dc:	14 c0       	rjmp	.+40     	; 0x2a06 <STEPPER_45_Right+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29de:	6b a1       	ldd	r22, Y+35	; 0x23
    29e0:	7c a1       	ldd	r23, Y+36	; 0x24
    29e2:	8d a1       	ldd	r24, Y+37	; 0x25
    29e4:	9e a1       	ldd	r25, Y+38	; 0x26
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	9a a3       	std	Y+34, r25	; 0x22
    29f0:	89 a3       	std	Y+33, r24	; 0x21
    29f2:	89 a1       	ldd	r24, Y+33	; 0x21
    29f4:	9a a1       	ldd	r25, Y+34	; 0x22
    29f6:	9e 8f       	std	Y+30, r25	; 0x1e
    29f8:	8d 8f       	std	Y+29, r24	; 0x1d
    29fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29fc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29fe:	01 97       	sbiw	r24, 0x01	; 1
    2a00:	f1 f7       	brne	.-4      	; 0x29fe <STEPPER_45_Right+0x202>
    2a02:	9e 8f       	std	Y+30, r25	; 0x1e
    2a04:	8d 8f       	std	Y+29, r24	; 0x1d
  DIO_SetPortValue(STEPPER_PORT, Coil3); // activate coil 3
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	64 e0       	ldi	r22, 0x04	; 4
    2a0a:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    2a0e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a10:	88 2f       	mov	r24, r24
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	a0 e0       	ldi	r26, 0x00	; 0
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	bc 01       	movw	r22, r24
    2a1a:	cd 01       	movw	r24, r26
    2a1c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2a20:	dc 01       	movw	r26, r24
    2a22:	cb 01       	movw	r24, r22
    2a24:	89 8f       	std	Y+25, r24	; 0x19
    2a26:	9a 8f       	std	Y+26, r25	; 0x1a
    2a28:	ab 8f       	std	Y+27, r26	; 0x1b
    2a2a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2a2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a34:	20 e0       	ldi	r18, 0x00	; 0
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	4a ef       	ldi	r20, 0xFA	; 250
    2a3a:	54 e4       	ldi	r21, 0x44	; 68
    2a3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	8d 8b       	std	Y+21, r24	; 0x15
    2a46:	9e 8b       	std	Y+22, r25	; 0x16
    2a48:	af 8b       	std	Y+23, r26	; 0x17
    2a4a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a4c:	6d 89       	ldd	r22, Y+21	; 0x15
    2a4e:	7e 89       	ldd	r23, Y+22	; 0x16
    2a50:	8f 89       	ldd	r24, Y+23	; 0x17
    2a52:	98 8d       	ldd	r25, Y+24	; 0x18
    2a54:	20 e0       	ldi	r18, 0x00	; 0
    2a56:	30 e0       	ldi	r19, 0x00	; 0
    2a58:	40 e8       	ldi	r20, 0x80	; 128
    2a5a:	5f e3       	ldi	r21, 0x3F	; 63
    2a5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a60:	88 23       	and	r24, r24
    2a62:	2c f4       	brge	.+10     	; 0x2a6e <STEPPER_45_Right+0x272>
		__ticks = 1;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	9c 8b       	std	Y+20, r25	; 0x14
    2a6a:	8b 8b       	std	Y+19, r24	; 0x13
    2a6c:	3f c0       	rjmp	.+126    	; 0x2aec <STEPPER_45_Right+0x2f0>
	else if (__tmp > 65535)
    2a6e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a70:	7e 89       	ldd	r23, Y+22	; 0x16
    2a72:	8f 89       	ldd	r24, Y+23	; 0x17
    2a74:	98 8d       	ldd	r25, Y+24	; 0x18
    2a76:	20 e0       	ldi	r18, 0x00	; 0
    2a78:	3f ef       	ldi	r19, 0xFF	; 255
    2a7a:	4f e7       	ldi	r20, 0x7F	; 127
    2a7c:	57 e4       	ldi	r21, 0x47	; 71
    2a7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a82:	18 16       	cp	r1, r24
    2a84:	4c f5       	brge	.+82     	; 0x2ad8 <STEPPER_45_Right+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a86:	69 8d       	ldd	r22, Y+25	; 0x19
    2a88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e2       	ldi	r20, 0x20	; 32
    2a94:	51 e4       	ldi	r21, 0x41	; 65
    2a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9a:	dc 01       	movw	r26, r24
    2a9c:	cb 01       	movw	r24, r22
    2a9e:	bc 01       	movw	r22, r24
    2aa0:	cd 01       	movw	r24, r26
    2aa2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	9c 8b       	std	Y+20, r25	; 0x14
    2aac:	8b 8b       	std	Y+19, r24	; 0x13
    2aae:	0f c0       	rjmp	.+30     	; 0x2ace <STEPPER_45_Right+0x2d2>
    2ab0:	88 ec       	ldi	r24, 0xC8	; 200
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9a 8b       	std	Y+18, r25	; 0x12
    2ab6:	89 8b       	std	Y+17, r24	; 0x11
    2ab8:	89 89       	ldd	r24, Y+17	; 0x11
    2aba:	9a 89       	ldd	r25, Y+18	; 0x12
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <STEPPER_45_Right+0x2c0>
    2ac0:	9a 8b       	std	Y+18, r25	; 0x12
    2ac2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ac6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	9c 8b       	std	Y+20, r25	; 0x14
    2acc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ace:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad2:	00 97       	sbiw	r24, 0x00	; 0
    2ad4:	69 f7       	brne	.-38     	; 0x2ab0 <STEPPER_45_Right+0x2b4>
    2ad6:	14 c0       	rjmp	.+40     	; 0x2b00 <STEPPER_45_Right+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    2ada:	7e 89       	ldd	r23, Y+22	; 0x16
    2adc:	8f 89       	ldd	r24, Y+23	; 0x17
    2ade:	98 8d       	ldd	r25, Y+24	; 0x18
    2ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	cb 01       	movw	r24, r22
    2ae8:	9c 8b       	std	Y+20, r25	; 0x14
    2aea:	8b 8b       	std	Y+19, r24	; 0x13
    2aec:	8b 89       	ldd	r24, Y+19	; 0x13
    2aee:	9c 89       	ldd	r25, Y+20	; 0x14
    2af0:	98 8b       	std	Y+16, r25	; 0x10
    2af2:	8f 87       	std	Y+15, r24	; 0x0f
    2af4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af6:	98 89       	ldd	r25, Y+16	; 0x10
    2af8:	01 97       	sbiw	r24, 0x01	; 1
    2afa:	f1 f7       	brne	.-4      	; 0x2af8 <STEPPER_45_Right+0x2fc>
    2afc:	98 8b       	std	Y+16, r25	; 0x10
    2afe:	8f 87       	std	Y+15, r24	; 0x0f
  DIO_SetPortValue(STEPPER_PORT, Coil4); // activate coil 4
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	68 e0       	ldi	r22, 0x08	; 8
    2b04:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    2b08:	89 ad       	ldd	r24, Y+57	; 0x39
    2b0a:	88 2f       	mov	r24, r24
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	a0 e0       	ldi	r26, 0x00	; 0
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	bc 01       	movw	r22, r24
    2b14:	cd 01       	movw	r24, r26
    2b16:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	cb 01       	movw	r24, r22
    2b1e:	8b 87       	std	Y+11, r24	; 0x0b
    2b20:	9c 87       	std	Y+12, r25	; 0x0c
    2b22:	ad 87       	std	Y+13, r26	; 0x0d
    2b24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b26:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b28:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b2e:	20 e0       	ldi	r18, 0x00	; 0
    2b30:	30 e0       	ldi	r19, 0x00	; 0
    2b32:	4a ef       	ldi	r20, 0xFA	; 250
    2b34:	54 e4       	ldi	r21, 0x44	; 68
    2b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3a:	dc 01       	movw	r26, r24
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	8f 83       	std	Y+7, r24	; 0x07
    2b40:	98 87       	std	Y+8, r25	; 0x08
    2b42:	a9 87       	std	Y+9, r26	; 0x09
    2b44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b46:	6f 81       	ldd	r22, Y+7	; 0x07
    2b48:	78 85       	ldd	r23, Y+8	; 0x08
    2b4a:	89 85       	ldd	r24, Y+9	; 0x09
    2b4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e8       	ldi	r20, 0x80	; 128
    2b54:	5f e3       	ldi	r21, 0x3F	; 63
    2b56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b5a:	88 23       	and	r24, r24
    2b5c:	2c f4       	brge	.+10     	; 0x2b68 <STEPPER_45_Right+0x36c>
		__ticks = 1;
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	9e 83       	std	Y+6, r25	; 0x06
    2b64:	8d 83       	std	Y+5, r24	; 0x05
    2b66:	3f c0       	rjmp	.+126    	; 0x2be6 <STEPPER_45_Right+0x3ea>
	else if (__tmp > 65535)
    2b68:	6f 81       	ldd	r22, Y+7	; 0x07
    2b6a:	78 85       	ldd	r23, Y+8	; 0x08
    2b6c:	89 85       	ldd	r24, Y+9	; 0x09
    2b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b70:	20 e0       	ldi	r18, 0x00	; 0
    2b72:	3f ef       	ldi	r19, 0xFF	; 255
    2b74:	4f e7       	ldi	r20, 0x7F	; 127
    2b76:	57 e4       	ldi	r21, 0x47	; 71
    2b78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b7c:	18 16       	cp	r1, r24
    2b7e:	4c f5       	brge	.+82     	; 0x2bd2 <STEPPER_45_Right+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b88:	20 e0       	ldi	r18, 0x00	; 0
    2b8a:	30 e0       	ldi	r19, 0x00	; 0
    2b8c:	40 e2       	ldi	r20, 0x20	; 32
    2b8e:	51 e4       	ldi	r21, 0x41	; 65
    2b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	bc 01       	movw	r22, r24
    2b9a:	cd 01       	movw	r24, r26
    2b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	9e 83       	std	Y+6, r25	; 0x06
    2ba6:	8d 83       	std	Y+5, r24	; 0x05
    2ba8:	0f c0       	rjmp	.+30     	; 0x2bc8 <STEPPER_45_Right+0x3cc>
    2baa:	88 ec       	ldi	r24, 0xC8	; 200
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	9c 83       	std	Y+4, r25	; 0x04
    2bb0:	8b 83       	std	Y+3, r24	; 0x03
    2bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2bb6:	01 97       	sbiw	r24, 0x01	; 1
    2bb8:	f1 f7       	brne	.-4      	; 0x2bb6 <STEPPER_45_Right+0x3ba>
    2bba:	9c 83       	std	Y+4, r25	; 0x04
    2bbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	9e 83       	std	Y+6, r25	; 0x06
    2bc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bca:	9e 81       	ldd	r25, Y+6	; 0x06
    2bcc:	00 97       	sbiw	r24, 0x00	; 0
    2bce:	69 f7       	brne	.-38     	; 0x2baa <STEPPER_45_Right+0x3ae>
    2bd0:	14 c0       	rjmp	.+40     	; 0x2bfa <STEPPER_45_Right+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2bd4:	78 85       	ldd	r23, Y+8	; 0x08
    2bd6:	89 85       	ldd	r24, Y+9	; 0x09
    2bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bde:	dc 01       	movw	r26, r24
    2be0:	cb 01       	movw	r24, r22
    2be2:	9e 83       	std	Y+6, r25	; 0x06
    2be4:	8d 83       	std	Y+5, r24	; 0x05
    2be6:	8d 81       	ldd	r24, Y+5	; 0x05
    2be8:	9e 81       	ldd	r25, Y+6	; 0x06
    2bea:	9a 83       	std	Y+2, r25	; 0x02
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	89 81       	ldd	r24, Y+1	; 0x01
    2bf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	f1 f7       	brne	.-4      	; 0x2bf2 <STEPPER_45_Right+0x3f6>
    2bf6:	9a 83       	std	Y+2, r25	; 0x02
    2bf8:	89 83       	std	Y+1, r24	; 0x01
}
    2bfa:	e9 96       	adiw	r28, 0x39	; 57
    2bfc:	0f b6       	in	r0, 0x3f	; 63
    2bfe:	f8 94       	cli
    2c00:	de bf       	out	0x3e, r29	; 62
    2c02:	0f be       	out	0x3f, r0	; 63
    2c04:	cd bf       	out	0x3d, r28	; 61
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <STEPPER_90_Left>:
void STEPPER_90_Left(u8 period) {
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	cd b7       	in	r28, 0x3d	; 61
    2c12:	de b7       	in	r29, 0x3e	; 62
    2c14:	e9 97       	sbiw	r28, 0x39	; 57
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	89 af       	std	Y+57, r24	; 0x39

  DIO_SetPortValue(STEPPER_PORT, Coil1+Coil4); // activate coil 1 and coil 4
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	69 e0       	ldi	r22, 0x09	; 9
    2c26:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    2c2a:	89 ad       	ldd	r24, Y+57	; 0x39
    2c2c:	88 2f       	mov	r24, r24
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	a0 e0       	ldi	r26, 0x00	; 0
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	8d ab       	std	Y+53, r24	; 0x35
    2c42:	9e ab       	std	Y+54, r25	; 0x36
    2c44:	af ab       	std	Y+55, r26	; 0x37
    2c46:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c48:	6d a9       	ldd	r22, Y+53	; 0x35
    2c4a:	7e a9       	ldd	r23, Y+54	; 0x36
    2c4c:	8f a9       	ldd	r24, Y+55	; 0x37
    2c4e:	98 ad       	ldd	r25, Y+56	; 0x38
    2c50:	20 e0       	ldi	r18, 0x00	; 0
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	4a ef       	ldi	r20, 0xFA	; 250
    2c56:	54 e4       	ldi	r21, 0x44	; 68
    2c58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5c:	dc 01       	movw	r26, r24
    2c5e:	cb 01       	movw	r24, r22
    2c60:	89 ab       	std	Y+49, r24	; 0x31
    2c62:	9a ab       	std	Y+50, r25	; 0x32
    2c64:	ab ab       	std	Y+51, r26	; 0x33
    2c66:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2c68:	69 a9       	ldd	r22, Y+49	; 0x31
    2c6a:	7a a9       	ldd	r23, Y+50	; 0x32
    2c6c:	8b a9       	ldd	r24, Y+51	; 0x33
    2c6e:	9c a9       	ldd	r25, Y+52	; 0x34
    2c70:	20 e0       	ldi	r18, 0x00	; 0
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	40 e8       	ldi	r20, 0x80	; 128
    2c76:	5f e3       	ldi	r21, 0x3F	; 63
    2c78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c7c:	88 23       	and	r24, r24
    2c7e:	2c f4       	brge	.+10     	; 0x2c8a <STEPPER_90_Left+0x7e>
		__ticks = 1;
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	98 ab       	std	Y+48, r25	; 0x30
    2c86:	8f a7       	std	Y+47, r24	; 0x2f
    2c88:	3f c0       	rjmp	.+126    	; 0x2d08 <STEPPER_90_Left+0xfc>
	else if (__tmp > 65535)
    2c8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2c8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2c8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2c90:	9c a9       	ldd	r25, Y+52	; 0x34
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	3f ef       	ldi	r19, 0xFF	; 255
    2c96:	4f e7       	ldi	r20, 0x7F	; 127
    2c98:	57 e4       	ldi	r21, 0x47	; 71
    2c9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c9e:	18 16       	cp	r1, r24
    2ca0:	4c f5       	brge	.+82     	; 0x2cf4 <STEPPER_90_Left+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ca4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ca6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ca8:	98 ad       	ldd	r25, Y+56	; 0x38
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	40 e2       	ldi	r20, 0x20	; 32
    2cb0:	51 e4       	ldi	r21, 0x41	; 65
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	bc 01       	movw	r22, r24
    2cbc:	cd 01       	movw	r24, r26
    2cbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc2:	dc 01       	movw	r26, r24
    2cc4:	cb 01       	movw	r24, r22
    2cc6:	98 ab       	std	Y+48, r25	; 0x30
    2cc8:	8f a7       	std	Y+47, r24	; 0x2f
    2cca:	0f c0       	rjmp	.+30     	; 0x2cea <STEPPER_90_Left+0xde>
    2ccc:	88 ec       	ldi	r24, 0xC8	; 200
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	9e a7       	std	Y+46, r25	; 0x2e
    2cd2:	8d a7       	std	Y+45, r24	; 0x2d
    2cd4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2cd6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	f1 f7       	brne	.-4      	; 0x2cd8 <STEPPER_90_Left+0xcc>
    2cdc:	9e a7       	std	Y+46, r25	; 0x2e
    2cde:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ce2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ce4:	01 97       	sbiw	r24, 0x01	; 1
    2ce6:	98 ab       	std	Y+48, r25	; 0x30
    2ce8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cea:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cec:	98 a9       	ldd	r25, Y+48	; 0x30
    2cee:	00 97       	sbiw	r24, 0x00	; 0
    2cf0:	69 f7       	brne	.-38     	; 0x2ccc <STEPPER_90_Left+0xc0>
    2cf2:	14 c0       	rjmp	.+40     	; 0x2d1c <STEPPER_90_Left+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf4:	69 a9       	ldd	r22, Y+49	; 0x31
    2cf6:	7a a9       	ldd	r23, Y+50	; 0x32
    2cf8:	8b a9       	ldd	r24, Y+51	; 0x33
    2cfa:	9c a9       	ldd	r25, Y+52	; 0x34
    2cfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d00:	dc 01       	movw	r26, r24
    2d02:	cb 01       	movw	r24, r22
    2d04:	98 ab       	std	Y+48, r25	; 0x30
    2d06:	8f a7       	std	Y+47, r24	; 0x2f
    2d08:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d0a:	98 a9       	ldd	r25, Y+48	; 0x30
    2d0c:	9c a7       	std	Y+44, r25	; 0x2c
    2d0e:	8b a7       	std	Y+43, r24	; 0x2b
    2d10:	8b a5       	ldd	r24, Y+43	; 0x2b
    2d12:	9c a5       	ldd	r25, Y+44	; 0x2c
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <STEPPER_90_Left+0x108>
    2d18:	9c a7       	std	Y+44, r25	; 0x2c
    2d1a:	8b a7       	std	Y+43, r24	; 0x2b
  DIO_SetPortValue(STEPPER_PORT, Coil4+Coil3); // activate coil 4 and coil 3
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	6c e0       	ldi	r22, 0x0C	; 12
    2d20:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    2d24:	89 ad       	ldd	r24, Y+57	; 0x39
    2d26:	88 2f       	mov	r24, r24
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	a0 e0       	ldi	r26, 0x00	; 0
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	bc 01       	movw	r22, r24
    2d30:	cd 01       	movw	r24, r26
    2d32:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2d36:	dc 01       	movw	r26, r24
    2d38:	cb 01       	movw	r24, r22
    2d3a:	8f a3       	std	Y+39, r24	; 0x27
    2d3c:	98 a7       	std	Y+40, r25	; 0x28
    2d3e:	a9 a7       	std	Y+41, r26	; 0x29
    2d40:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d42:	6f a1       	ldd	r22, Y+39	; 0x27
    2d44:	78 a5       	ldd	r23, Y+40	; 0x28
    2d46:	89 a5       	ldd	r24, Y+41	; 0x29
    2d48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2d4a:	20 e0       	ldi	r18, 0x00	; 0
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	4a ef       	ldi	r20, 0xFA	; 250
    2d50:	54 e4       	ldi	r21, 0x44	; 68
    2d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	8b a3       	std	Y+35, r24	; 0x23
    2d5c:	9c a3       	std	Y+36, r25	; 0x24
    2d5e:	ad a3       	std	Y+37, r26	; 0x25
    2d60:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2d62:	6b a1       	ldd	r22, Y+35	; 0x23
    2d64:	7c a1       	ldd	r23, Y+36	; 0x24
    2d66:	8d a1       	ldd	r24, Y+37	; 0x25
    2d68:	9e a1       	ldd	r25, Y+38	; 0x26
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	40 e8       	ldi	r20, 0x80	; 128
    2d70:	5f e3       	ldi	r21, 0x3F	; 63
    2d72:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d76:	88 23       	and	r24, r24
    2d78:	2c f4       	brge	.+10     	; 0x2d84 <STEPPER_90_Left+0x178>
		__ticks = 1;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	9a a3       	std	Y+34, r25	; 0x22
    2d80:	89 a3       	std	Y+33, r24	; 0x21
    2d82:	3f c0       	rjmp	.+126    	; 0x2e02 <STEPPER_90_Left+0x1f6>
	else if (__tmp > 65535)
    2d84:	6b a1       	ldd	r22, Y+35	; 0x23
    2d86:	7c a1       	ldd	r23, Y+36	; 0x24
    2d88:	8d a1       	ldd	r24, Y+37	; 0x25
    2d8a:	9e a1       	ldd	r25, Y+38	; 0x26
    2d8c:	20 e0       	ldi	r18, 0x00	; 0
    2d8e:	3f ef       	ldi	r19, 0xFF	; 255
    2d90:	4f e7       	ldi	r20, 0x7F	; 127
    2d92:	57 e4       	ldi	r21, 0x47	; 71
    2d94:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d98:	18 16       	cp	r1, r24
    2d9a:	4c f5       	brge	.+82     	; 0x2dee <STEPPER_90_Left+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d9c:	6f a1       	ldd	r22, Y+39	; 0x27
    2d9e:	78 a5       	ldd	r23, Y+40	; 0x28
    2da0:	89 a5       	ldd	r24, Y+41	; 0x29
    2da2:	9a a5       	ldd	r25, Y+42	; 0x2a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	30 e0       	ldi	r19, 0x00	; 0
    2da8:	40 e2       	ldi	r20, 0x20	; 32
    2daa:	51 e4       	ldi	r21, 0x41	; 65
    2dac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db0:	dc 01       	movw	r26, r24
    2db2:	cb 01       	movw	r24, r22
    2db4:	bc 01       	movw	r22, r24
    2db6:	cd 01       	movw	r24, r26
    2db8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9a a3       	std	Y+34, r25	; 0x22
    2dc2:	89 a3       	std	Y+33, r24	; 0x21
    2dc4:	0f c0       	rjmp	.+30     	; 0x2de4 <STEPPER_90_Left+0x1d8>
    2dc6:	88 ec       	ldi	r24, 0xC8	; 200
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	98 a3       	std	Y+32, r25	; 0x20
    2dcc:	8f 8f       	std	Y+31, r24	; 0x1f
    2dce:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2dd0:	98 a1       	ldd	r25, Y+32	; 0x20
    2dd2:	01 97       	sbiw	r24, 0x01	; 1
    2dd4:	f1 f7       	brne	.-4      	; 0x2dd2 <STEPPER_90_Left+0x1c6>
    2dd6:	98 a3       	std	Y+32, r25	; 0x20
    2dd8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	89 a1       	ldd	r24, Y+33	; 0x21
    2ddc:	9a a1       	ldd	r25, Y+34	; 0x22
    2dde:	01 97       	sbiw	r24, 0x01	; 1
    2de0:	9a a3       	std	Y+34, r25	; 0x22
    2de2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2de4:	89 a1       	ldd	r24, Y+33	; 0x21
    2de6:	9a a1       	ldd	r25, Y+34	; 0x22
    2de8:	00 97       	sbiw	r24, 0x00	; 0
    2dea:	69 f7       	brne	.-38     	; 0x2dc6 <STEPPER_90_Left+0x1ba>
    2dec:	14 c0       	rjmp	.+40     	; 0x2e16 <STEPPER_90_Left+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dee:	6b a1       	ldd	r22, Y+35	; 0x23
    2df0:	7c a1       	ldd	r23, Y+36	; 0x24
    2df2:	8d a1       	ldd	r24, Y+37	; 0x25
    2df4:	9e a1       	ldd	r25, Y+38	; 0x26
    2df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dfa:	dc 01       	movw	r26, r24
    2dfc:	cb 01       	movw	r24, r22
    2dfe:	9a a3       	std	Y+34, r25	; 0x22
    2e00:	89 a3       	std	Y+33, r24	; 0x21
    2e02:	89 a1       	ldd	r24, Y+33	; 0x21
    2e04:	9a a1       	ldd	r25, Y+34	; 0x22
    2e06:	9e 8f       	std	Y+30, r25	; 0x1e
    2e08:	8d 8f       	std	Y+29, r24	; 0x1d
    2e0a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e0c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <STEPPER_90_Left+0x202>
    2e12:	9e 8f       	std	Y+30, r25	; 0x1e
    2e14:	8d 8f       	std	Y+29, r24	; 0x1d
  DIO_SetPortValue(STEPPER_PORT, Coil3+Coil2); // activate coil 3 and coil 2
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	66 e0       	ldi	r22, 0x06	; 6
    2e1a:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    2e1e:	89 ad       	ldd	r24, Y+57	; 0x39
    2e20:	88 2f       	mov	r24, r24
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	a0 e0       	ldi	r26, 0x00	; 0
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	89 8f       	std	Y+25, r24	; 0x19
    2e36:	9a 8f       	std	Y+26, r25	; 0x1a
    2e38:	ab 8f       	std	Y+27, r26	; 0x1b
    2e3a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e3c:	69 8d       	ldd	r22, Y+25	; 0x19
    2e3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e44:	20 e0       	ldi	r18, 0x00	; 0
    2e46:	30 e0       	ldi	r19, 0x00	; 0
    2e48:	4a ef       	ldi	r20, 0xFA	; 250
    2e4a:	54 e4       	ldi	r21, 0x44	; 68
    2e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e50:	dc 01       	movw	r26, r24
    2e52:	cb 01       	movw	r24, r22
    2e54:	8d 8b       	std	Y+21, r24	; 0x15
    2e56:	9e 8b       	std	Y+22, r25	; 0x16
    2e58:	af 8b       	std	Y+23, r26	; 0x17
    2e5a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2e5c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e5e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e60:	8f 89       	ldd	r24, Y+23	; 0x17
    2e62:	98 8d       	ldd	r25, Y+24	; 0x18
    2e64:	20 e0       	ldi	r18, 0x00	; 0
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	40 e8       	ldi	r20, 0x80	; 128
    2e6a:	5f e3       	ldi	r21, 0x3F	; 63
    2e6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e70:	88 23       	and	r24, r24
    2e72:	2c f4       	brge	.+10     	; 0x2e7e <STEPPER_90_Left+0x272>
		__ticks = 1;
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	9c 8b       	std	Y+20, r25	; 0x14
    2e7a:	8b 8b       	std	Y+19, r24	; 0x13
    2e7c:	3f c0       	rjmp	.+126    	; 0x2efc <STEPPER_90_Left+0x2f0>
	else if (__tmp > 65535)
    2e7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e80:	7e 89       	ldd	r23, Y+22	; 0x16
    2e82:	8f 89       	ldd	r24, Y+23	; 0x17
    2e84:	98 8d       	ldd	r25, Y+24	; 0x18
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	3f ef       	ldi	r19, 0xFF	; 255
    2e8a:	4f e7       	ldi	r20, 0x7F	; 127
    2e8c:	57 e4       	ldi	r21, 0x47	; 71
    2e8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e92:	18 16       	cp	r1, r24
    2e94:	4c f5       	brge	.+82     	; 0x2ee8 <STEPPER_90_Left+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e96:	69 8d       	ldd	r22, Y+25	; 0x19
    2e98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	40 e2       	ldi	r20, 0x20	; 32
    2ea4:	51 e4       	ldi	r21, 0x41	; 65
    2ea6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb6:	dc 01       	movw	r26, r24
    2eb8:	cb 01       	movw	r24, r22
    2eba:	9c 8b       	std	Y+20, r25	; 0x14
    2ebc:	8b 8b       	std	Y+19, r24	; 0x13
    2ebe:	0f c0       	rjmp	.+30     	; 0x2ede <STEPPER_90_Left+0x2d2>
    2ec0:	88 ec       	ldi	r24, 0xC8	; 200
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	9a 8b       	std	Y+18, r25	; 0x12
    2ec6:	89 8b       	std	Y+17, r24	; 0x11
    2ec8:	89 89       	ldd	r24, Y+17	; 0x11
    2eca:	9a 89       	ldd	r25, Y+18	; 0x12
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	f1 f7       	brne	.-4      	; 0x2ecc <STEPPER_90_Left+0x2c0>
    2ed0:	9a 8b       	std	Y+18, r25	; 0x12
    2ed2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ed6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	9c 8b       	std	Y+20, r25	; 0x14
    2edc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ede:	8b 89       	ldd	r24, Y+19	; 0x13
    2ee0:	9c 89       	ldd	r25, Y+20	; 0x14
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	69 f7       	brne	.-38     	; 0x2ec0 <STEPPER_90_Left+0x2b4>
    2ee6:	14 c0       	rjmp	.+40     	; 0x2f10 <STEPPER_90_Left+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee8:	6d 89       	ldd	r22, Y+21	; 0x15
    2eea:	7e 89       	ldd	r23, Y+22	; 0x16
    2eec:	8f 89       	ldd	r24, Y+23	; 0x17
    2eee:	98 8d       	ldd	r25, Y+24	; 0x18
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	9c 8b       	std	Y+20, r25	; 0x14
    2efa:	8b 8b       	std	Y+19, r24	; 0x13
    2efc:	8b 89       	ldd	r24, Y+19	; 0x13
    2efe:	9c 89       	ldd	r25, Y+20	; 0x14
    2f00:	98 8b       	std	Y+16, r25	; 0x10
    2f02:	8f 87       	std	Y+15, r24	; 0x0f
    2f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f06:	98 89       	ldd	r25, Y+16	; 0x10
    2f08:	01 97       	sbiw	r24, 0x01	; 1
    2f0a:	f1 f7       	brne	.-4      	; 0x2f08 <STEPPER_90_Left+0x2fc>
    2f0c:	98 8b       	std	Y+16, r25	; 0x10
    2f0e:	8f 87       	std	Y+15, r24	; 0x0f
  DIO_SetPortValue(STEPPER_PORT, Coil2+Coil1); // activate coil 2 and coil 1
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	63 e0       	ldi	r22, 0x03	; 3
    2f14:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    2f18:	89 ad       	ldd	r24, Y+57	; 0x39
    2f1a:	88 2f       	mov	r24, r24
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	a0 e0       	ldi	r26, 0x00	; 0
    2f20:	b0 e0       	ldi	r27, 0x00	; 0
    2f22:	bc 01       	movw	r22, r24
    2f24:	cd 01       	movw	r24, r26
    2f26:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	8b 87       	std	Y+11, r24	; 0x0b
    2f30:	9c 87       	std	Y+12, r25	; 0x0c
    2f32:	ad 87       	std	Y+13, r26	; 0x0d
    2f34:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f36:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f38:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f3a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f3c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	4a ef       	ldi	r20, 0xFA	; 250
    2f44:	54 e4       	ldi	r21, 0x44	; 68
    2f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	8f 83       	std	Y+7, r24	; 0x07
    2f50:	98 87       	std	Y+8, r25	; 0x08
    2f52:	a9 87       	std	Y+9, r26	; 0x09
    2f54:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f56:	6f 81       	ldd	r22, Y+7	; 0x07
    2f58:	78 85       	ldd	r23, Y+8	; 0x08
    2f5a:	89 85       	ldd	r24, Y+9	; 0x09
    2f5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e8       	ldi	r20, 0x80	; 128
    2f64:	5f e3       	ldi	r21, 0x3F	; 63
    2f66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f6a:	88 23       	and	r24, r24
    2f6c:	2c f4       	brge	.+10     	; 0x2f78 <STEPPER_90_Left+0x36c>
		__ticks = 1;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9e 83       	std	Y+6, r25	; 0x06
    2f74:	8d 83       	std	Y+5, r24	; 0x05
    2f76:	3f c0       	rjmp	.+126    	; 0x2ff6 <STEPPER_90_Left+0x3ea>
	else if (__tmp > 65535)
    2f78:	6f 81       	ldd	r22, Y+7	; 0x07
    2f7a:	78 85       	ldd	r23, Y+8	; 0x08
    2f7c:	89 85       	ldd	r24, Y+9	; 0x09
    2f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	3f ef       	ldi	r19, 0xFF	; 255
    2f84:	4f e7       	ldi	r20, 0x7F	; 127
    2f86:	57 e4       	ldi	r21, 0x47	; 71
    2f88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f8c:	18 16       	cp	r1, r24
    2f8e:	4c f5       	brge	.+82     	; 0x2fe2 <STEPPER_90_Left+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f90:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f92:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f94:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f96:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e2       	ldi	r20, 0x20	; 32
    2f9e:	51 e4       	ldi	r21, 0x41	; 65
    2fa0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	bc 01       	movw	r22, r24
    2faa:	cd 01       	movw	r24, r26
    2fac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	9e 83       	std	Y+6, r25	; 0x06
    2fb6:	8d 83       	std	Y+5, r24	; 0x05
    2fb8:	0f c0       	rjmp	.+30     	; 0x2fd8 <STEPPER_90_Left+0x3cc>
    2fba:	88 ec       	ldi	r24, 0xC8	; 200
    2fbc:	90 e0       	ldi	r25, 0x00	; 0
    2fbe:	9c 83       	std	Y+4, r25	; 0x04
    2fc0:	8b 83       	std	Y+3, r24	; 0x03
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <STEPPER_90_Left+0x3ba>
    2fca:	9c 83       	std	Y+4, r25	; 0x04
    2fcc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fce:	8d 81       	ldd	r24, Y+5	; 0x05
    2fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	9e 83       	std	Y+6, r25	; 0x06
    2fd6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    2fda:	9e 81       	ldd	r25, Y+6	; 0x06
    2fdc:	00 97       	sbiw	r24, 0x00	; 0
    2fde:	69 f7       	brne	.-38     	; 0x2fba <STEPPER_90_Left+0x3ae>
    2fe0:	14 c0       	rjmp	.+40     	; 0x300a <STEPPER_90_Left+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fe2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fe4:	78 85       	ldd	r23, Y+8	; 0x08
    2fe6:	89 85       	ldd	r24, Y+9	; 0x09
    2fe8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	9e 83       	std	Y+6, r25	; 0x06
    2ff4:	8d 83       	std	Y+5, r24	; 0x05
    2ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    2ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    2ffa:	9a 83       	std	Y+2, r25	; 0x02
    2ffc:	89 83       	std	Y+1, r24	; 0x01
    2ffe:	89 81       	ldd	r24, Y+1	; 0x01
    3000:	9a 81       	ldd	r25, Y+2	; 0x02
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	f1 f7       	brne	.-4      	; 0x3002 <STEPPER_90_Left+0x3f6>
    3006:	9a 83       	std	Y+2, r25	; 0x02
    3008:	89 83       	std	Y+1, r24	; 0x01
}
    300a:	e9 96       	adiw	r28, 0x39	; 57
    300c:	0f b6       	in	r0, 0x3f	; 63
    300e:	f8 94       	cli
    3010:	de bf       	out	0x3e, r29	; 62
    3012:	0f be       	out	0x3f, r0	; 63
    3014:	cd bf       	out	0x3d, r28	; 61
    3016:	cf 91       	pop	r28
    3018:	df 91       	pop	r29
    301a:	08 95       	ret

0000301c <STEPPER_90_Right>:

void STEPPER_90_Right(u8 period) {
    301c:	df 93       	push	r29
    301e:	cf 93       	push	r28
    3020:	cd b7       	in	r28, 0x3d	; 61
    3022:	de b7       	in	r29, 0x3e	; 62
    3024:	e9 97       	sbiw	r28, 0x39	; 57
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	89 af       	std	Y+57, r24	; 0x39

  DIO_SetPortValue(STEPPER_PORT, Coil1+Coil2); // activate coil 1 and coil 2
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	63 e0       	ldi	r22, 0x03	; 3
    3036:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    303a:	89 ad       	ldd	r24, Y+57	; 0x39
    303c:	88 2f       	mov	r24, r24
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	a0 e0       	ldi	r26, 0x00	; 0
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	bc 01       	movw	r22, r24
    3046:	cd 01       	movw	r24, r26
    3048:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	8d ab       	std	Y+53, r24	; 0x35
    3052:	9e ab       	std	Y+54, r25	; 0x36
    3054:	af ab       	std	Y+55, r26	; 0x37
    3056:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3058:	6d a9       	ldd	r22, Y+53	; 0x35
    305a:	7e a9       	ldd	r23, Y+54	; 0x36
    305c:	8f a9       	ldd	r24, Y+55	; 0x37
    305e:	98 ad       	ldd	r25, Y+56	; 0x38
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	30 e0       	ldi	r19, 0x00	; 0
    3064:	4a ef       	ldi	r20, 0xFA	; 250
    3066:	54 e4       	ldi	r21, 0x44	; 68
    3068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	89 ab       	std	Y+49, r24	; 0x31
    3072:	9a ab       	std	Y+50, r25	; 0x32
    3074:	ab ab       	std	Y+51, r26	; 0x33
    3076:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3078:	69 a9       	ldd	r22, Y+49	; 0x31
    307a:	7a a9       	ldd	r23, Y+50	; 0x32
    307c:	8b a9       	ldd	r24, Y+51	; 0x33
    307e:	9c a9       	ldd	r25, Y+52	; 0x34
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	40 e8       	ldi	r20, 0x80	; 128
    3086:	5f e3       	ldi	r21, 0x3F	; 63
    3088:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    308c:	88 23       	and	r24, r24
    308e:	2c f4       	brge	.+10     	; 0x309a <STEPPER_90_Right+0x7e>
		__ticks = 1;
    3090:	81 e0       	ldi	r24, 0x01	; 1
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	98 ab       	std	Y+48, r25	; 0x30
    3096:	8f a7       	std	Y+47, r24	; 0x2f
    3098:	3f c0       	rjmp	.+126    	; 0x3118 <STEPPER_90_Right+0xfc>
	else if (__tmp > 65535)
    309a:	69 a9       	ldd	r22, Y+49	; 0x31
    309c:	7a a9       	ldd	r23, Y+50	; 0x32
    309e:	8b a9       	ldd	r24, Y+51	; 0x33
    30a0:	9c a9       	ldd	r25, Y+52	; 0x34
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	3f ef       	ldi	r19, 0xFF	; 255
    30a6:	4f e7       	ldi	r20, 0x7F	; 127
    30a8:	57 e4       	ldi	r21, 0x47	; 71
    30aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30ae:	18 16       	cp	r1, r24
    30b0:	4c f5       	brge	.+82     	; 0x3104 <STEPPER_90_Right+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b2:	6d a9       	ldd	r22, Y+53	; 0x35
    30b4:	7e a9       	ldd	r23, Y+54	; 0x36
    30b6:	8f a9       	ldd	r24, Y+55	; 0x37
    30b8:	98 ad       	ldd	r25, Y+56	; 0x38
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	40 e2       	ldi	r20, 0x20	; 32
    30c0:	51 e4       	ldi	r21, 0x41	; 65
    30c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c6:	dc 01       	movw	r26, r24
    30c8:	cb 01       	movw	r24, r22
    30ca:	bc 01       	movw	r22, r24
    30cc:	cd 01       	movw	r24, r26
    30ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d2:	dc 01       	movw	r26, r24
    30d4:	cb 01       	movw	r24, r22
    30d6:	98 ab       	std	Y+48, r25	; 0x30
    30d8:	8f a7       	std	Y+47, r24	; 0x2f
    30da:	0f c0       	rjmp	.+30     	; 0x30fa <STEPPER_90_Right+0xde>
    30dc:	88 ec       	ldi	r24, 0xC8	; 200
    30de:	90 e0       	ldi	r25, 0x00	; 0
    30e0:	9e a7       	std	Y+46, r25	; 0x2e
    30e2:	8d a7       	std	Y+45, r24	; 0x2d
    30e4:	8d a5       	ldd	r24, Y+45	; 0x2d
    30e6:	9e a5       	ldd	r25, Y+46	; 0x2e
    30e8:	01 97       	sbiw	r24, 0x01	; 1
    30ea:	f1 f7       	brne	.-4      	; 0x30e8 <STEPPER_90_Right+0xcc>
    30ec:	9e a7       	std	Y+46, r25	; 0x2e
    30ee:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f0:	8f a5       	ldd	r24, Y+47	; 0x2f
    30f2:	98 a9       	ldd	r25, Y+48	; 0x30
    30f4:	01 97       	sbiw	r24, 0x01	; 1
    30f6:	98 ab       	std	Y+48, r25	; 0x30
    30f8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    30fc:	98 a9       	ldd	r25, Y+48	; 0x30
    30fe:	00 97       	sbiw	r24, 0x00	; 0
    3100:	69 f7       	brne	.-38     	; 0x30dc <STEPPER_90_Right+0xc0>
    3102:	14 c0       	rjmp	.+40     	; 0x312c <STEPPER_90_Right+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3104:	69 a9       	ldd	r22, Y+49	; 0x31
    3106:	7a a9       	ldd	r23, Y+50	; 0x32
    3108:	8b a9       	ldd	r24, Y+51	; 0x33
    310a:	9c a9       	ldd	r25, Y+52	; 0x34
    310c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	98 ab       	std	Y+48, r25	; 0x30
    3116:	8f a7       	std	Y+47, r24	; 0x2f
    3118:	8f a5       	ldd	r24, Y+47	; 0x2f
    311a:	98 a9       	ldd	r25, Y+48	; 0x30
    311c:	9c a7       	std	Y+44, r25	; 0x2c
    311e:	8b a7       	std	Y+43, r24	; 0x2b
    3120:	8b a5       	ldd	r24, Y+43	; 0x2b
    3122:	9c a5       	ldd	r25, Y+44	; 0x2c
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <STEPPER_90_Right+0x108>
    3128:	9c a7       	std	Y+44, r25	; 0x2c
    312a:	8b a7       	std	Y+43, r24	; 0x2b
  DIO_SetPortValue(STEPPER_PORT, Coil2+Coil3); // activate coil 2 and coil 3
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	66 e0       	ldi	r22, 0x06	; 6
    3130:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    3134:	89 ad       	ldd	r24, Y+57	; 0x39
    3136:	88 2f       	mov	r24, r24
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	a0 e0       	ldi	r26, 0x00	; 0
    313c:	b0 e0       	ldi	r27, 0x00	; 0
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3146:	dc 01       	movw	r26, r24
    3148:	cb 01       	movw	r24, r22
    314a:	8f a3       	std	Y+39, r24	; 0x27
    314c:	98 a7       	std	Y+40, r25	; 0x28
    314e:	a9 a7       	std	Y+41, r26	; 0x29
    3150:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3152:	6f a1       	ldd	r22, Y+39	; 0x27
    3154:	78 a5       	ldd	r23, Y+40	; 0x28
    3156:	89 a5       	ldd	r24, Y+41	; 0x29
    3158:	9a a5       	ldd	r25, Y+42	; 0x2a
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	4a ef       	ldi	r20, 0xFA	; 250
    3160:	54 e4       	ldi	r21, 0x44	; 68
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	8b a3       	std	Y+35, r24	; 0x23
    316c:	9c a3       	std	Y+36, r25	; 0x24
    316e:	ad a3       	std	Y+37, r26	; 0x25
    3170:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3172:	6b a1       	ldd	r22, Y+35	; 0x23
    3174:	7c a1       	ldd	r23, Y+36	; 0x24
    3176:	8d a1       	ldd	r24, Y+37	; 0x25
    3178:	9e a1       	ldd	r25, Y+38	; 0x26
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e8       	ldi	r20, 0x80	; 128
    3180:	5f e3       	ldi	r21, 0x3F	; 63
    3182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3186:	88 23       	and	r24, r24
    3188:	2c f4       	brge	.+10     	; 0x3194 <STEPPER_90_Right+0x178>
		__ticks = 1;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	9a a3       	std	Y+34, r25	; 0x22
    3190:	89 a3       	std	Y+33, r24	; 0x21
    3192:	3f c0       	rjmp	.+126    	; 0x3212 <STEPPER_90_Right+0x1f6>
	else if (__tmp > 65535)
    3194:	6b a1       	ldd	r22, Y+35	; 0x23
    3196:	7c a1       	ldd	r23, Y+36	; 0x24
    3198:	8d a1       	ldd	r24, Y+37	; 0x25
    319a:	9e a1       	ldd	r25, Y+38	; 0x26
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	3f ef       	ldi	r19, 0xFF	; 255
    31a0:	4f e7       	ldi	r20, 0x7F	; 127
    31a2:	57 e4       	ldi	r21, 0x47	; 71
    31a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a8:	18 16       	cp	r1, r24
    31aa:	4c f5       	brge	.+82     	; 0x31fe <STEPPER_90_Right+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ac:	6f a1       	ldd	r22, Y+39	; 0x27
    31ae:	78 a5       	ldd	r23, Y+40	; 0x28
    31b0:	89 a5       	ldd	r24, Y+41	; 0x29
    31b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	51 e4       	ldi	r21, 0x41	; 65
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9a a3       	std	Y+34, r25	; 0x22
    31d2:	89 a3       	std	Y+33, r24	; 0x21
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <STEPPER_90_Right+0x1d8>
    31d6:	88 ec       	ldi	r24, 0xC8	; 200
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	98 a3       	std	Y+32, r25	; 0x20
    31dc:	8f 8f       	std	Y+31, r24	; 0x1f
    31de:	8f 8d       	ldd	r24, Y+31	; 0x1f
    31e0:	98 a1       	ldd	r25, Y+32	; 0x20
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <STEPPER_90_Right+0x1c6>
    31e6:	98 a3       	std	Y+32, r25	; 0x20
    31e8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ea:	89 a1       	ldd	r24, Y+33	; 0x21
    31ec:	9a a1       	ldd	r25, Y+34	; 0x22
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	9a a3       	std	Y+34, r25	; 0x22
    31f2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	89 a1       	ldd	r24, Y+33	; 0x21
    31f6:	9a a1       	ldd	r25, Y+34	; 0x22
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f7       	brne	.-38     	; 0x31d6 <STEPPER_90_Right+0x1ba>
    31fc:	14 c0       	rjmp	.+40     	; 0x3226 <STEPPER_90_Right+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	6b a1       	ldd	r22, Y+35	; 0x23
    3200:	7c a1       	ldd	r23, Y+36	; 0x24
    3202:	8d a1       	ldd	r24, Y+37	; 0x25
    3204:	9e a1       	ldd	r25, Y+38	; 0x26
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	9a a3       	std	Y+34, r25	; 0x22
    3210:	89 a3       	std	Y+33, r24	; 0x21
    3212:	89 a1       	ldd	r24, Y+33	; 0x21
    3214:	9a a1       	ldd	r25, Y+34	; 0x22
    3216:	9e 8f       	std	Y+30, r25	; 0x1e
    3218:	8d 8f       	std	Y+29, r24	; 0x1d
    321a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    321c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <STEPPER_90_Right+0x202>
    3222:	9e 8f       	std	Y+30, r25	; 0x1e
    3224:	8d 8f       	std	Y+29, r24	; 0x1d
  DIO_SetPortValue(STEPPER_PORT, Coil3+Coil4); // activate coil 3 and coil 4
    3226:	81 e0       	ldi	r24, 0x01	; 1
    3228:	6c e0       	ldi	r22, 0x0C	; 12
    322a:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    322e:	89 ad       	ldd	r24, Y+57	; 0x39
    3230:	88 2f       	mov	r24, r24
    3232:	90 e0       	ldi	r25, 0x00	; 0
    3234:	a0 e0       	ldi	r26, 0x00	; 0
    3236:	b0 e0       	ldi	r27, 0x00	; 0
    3238:	bc 01       	movw	r22, r24
    323a:	cd 01       	movw	r24, r26
    323c:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    3240:	dc 01       	movw	r26, r24
    3242:	cb 01       	movw	r24, r22
    3244:	89 8f       	std	Y+25, r24	; 0x19
    3246:	9a 8f       	std	Y+26, r25	; 0x1a
    3248:	ab 8f       	std	Y+27, r26	; 0x1b
    324a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    324c:	69 8d       	ldd	r22, Y+25	; 0x19
    324e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3250:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3252:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	4a ef       	ldi	r20, 0xFA	; 250
    325a:	54 e4       	ldi	r21, 0x44	; 68
    325c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3260:	dc 01       	movw	r26, r24
    3262:	cb 01       	movw	r24, r22
    3264:	8d 8b       	std	Y+21, r24	; 0x15
    3266:	9e 8b       	std	Y+22, r25	; 0x16
    3268:	af 8b       	std	Y+23, r26	; 0x17
    326a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    326c:	6d 89       	ldd	r22, Y+21	; 0x15
    326e:	7e 89       	ldd	r23, Y+22	; 0x16
    3270:	8f 89       	ldd	r24, Y+23	; 0x17
    3272:	98 8d       	ldd	r25, Y+24	; 0x18
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e8       	ldi	r20, 0x80	; 128
    327a:	5f e3       	ldi	r21, 0x3F	; 63
    327c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3280:	88 23       	and	r24, r24
    3282:	2c f4       	brge	.+10     	; 0x328e <STEPPER_90_Right+0x272>
		__ticks = 1;
    3284:	81 e0       	ldi	r24, 0x01	; 1
    3286:	90 e0       	ldi	r25, 0x00	; 0
    3288:	9c 8b       	std	Y+20, r25	; 0x14
    328a:	8b 8b       	std	Y+19, r24	; 0x13
    328c:	3f c0       	rjmp	.+126    	; 0x330c <STEPPER_90_Right+0x2f0>
	else if (__tmp > 65535)
    328e:	6d 89       	ldd	r22, Y+21	; 0x15
    3290:	7e 89       	ldd	r23, Y+22	; 0x16
    3292:	8f 89       	ldd	r24, Y+23	; 0x17
    3294:	98 8d       	ldd	r25, Y+24	; 0x18
    3296:	20 e0       	ldi	r18, 0x00	; 0
    3298:	3f ef       	ldi	r19, 0xFF	; 255
    329a:	4f e7       	ldi	r20, 0x7F	; 127
    329c:	57 e4       	ldi	r21, 0x47	; 71
    329e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32a2:	18 16       	cp	r1, r24
    32a4:	4c f5       	brge	.+82     	; 0x32f8 <STEPPER_90_Right+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32a6:	69 8d       	ldd	r22, Y+25	; 0x19
    32a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    32aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    32ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    32ae:	20 e0       	ldi	r18, 0x00	; 0
    32b0:	30 e0       	ldi	r19, 0x00	; 0
    32b2:	40 e2       	ldi	r20, 0x20	; 32
    32b4:	51 e4       	ldi	r21, 0x41	; 65
    32b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ba:	dc 01       	movw	r26, r24
    32bc:	cb 01       	movw	r24, r22
    32be:	bc 01       	movw	r22, r24
    32c0:	cd 01       	movw	r24, r26
    32c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32c6:	dc 01       	movw	r26, r24
    32c8:	cb 01       	movw	r24, r22
    32ca:	9c 8b       	std	Y+20, r25	; 0x14
    32cc:	8b 8b       	std	Y+19, r24	; 0x13
    32ce:	0f c0       	rjmp	.+30     	; 0x32ee <STEPPER_90_Right+0x2d2>
    32d0:	88 ec       	ldi	r24, 0xC8	; 200
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	9a 8b       	std	Y+18, r25	; 0x12
    32d6:	89 8b       	std	Y+17, r24	; 0x11
    32d8:	89 89       	ldd	r24, Y+17	; 0x11
    32da:	9a 89       	ldd	r25, Y+18	; 0x12
    32dc:	01 97       	sbiw	r24, 0x01	; 1
    32de:	f1 f7       	brne	.-4      	; 0x32dc <STEPPER_90_Right+0x2c0>
    32e0:	9a 8b       	std	Y+18, r25	; 0x12
    32e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32e4:	8b 89       	ldd	r24, Y+19	; 0x13
    32e6:	9c 89       	ldd	r25, Y+20	; 0x14
    32e8:	01 97       	sbiw	r24, 0x01	; 1
    32ea:	9c 8b       	std	Y+20, r25	; 0x14
    32ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ee:	8b 89       	ldd	r24, Y+19	; 0x13
    32f0:	9c 89       	ldd	r25, Y+20	; 0x14
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	69 f7       	brne	.-38     	; 0x32d0 <STEPPER_90_Right+0x2b4>
    32f6:	14 c0       	rjmp	.+40     	; 0x3320 <STEPPER_90_Right+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32f8:	6d 89       	ldd	r22, Y+21	; 0x15
    32fa:	7e 89       	ldd	r23, Y+22	; 0x16
    32fc:	8f 89       	ldd	r24, Y+23	; 0x17
    32fe:	98 8d       	ldd	r25, Y+24	; 0x18
    3300:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3304:	dc 01       	movw	r26, r24
    3306:	cb 01       	movw	r24, r22
    3308:	9c 8b       	std	Y+20, r25	; 0x14
    330a:	8b 8b       	std	Y+19, r24	; 0x13
    330c:	8b 89       	ldd	r24, Y+19	; 0x13
    330e:	9c 89       	ldd	r25, Y+20	; 0x14
    3310:	98 8b       	std	Y+16, r25	; 0x10
    3312:	8f 87       	std	Y+15, r24	; 0x0f
    3314:	8f 85       	ldd	r24, Y+15	; 0x0f
    3316:	98 89       	ldd	r25, Y+16	; 0x10
    3318:	01 97       	sbiw	r24, 0x01	; 1
    331a:	f1 f7       	brne	.-4      	; 0x3318 <STEPPER_90_Right+0x2fc>
    331c:	98 8b       	std	Y+16, r25	; 0x10
    331e:	8f 87       	std	Y+15, r24	; 0x0f
  DIO_SetPortValue(STEPPER_PORT, Coil4+Coil1); // activate coil 4 and coil 1
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	69 e0       	ldi	r22, 0x09	; 9
    3324:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
  _delay_ms(period);
    3328:	89 ad       	ldd	r24, Y+57	; 0x39
    332a:	88 2f       	mov	r24, r24
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	a0 e0       	ldi	r26, 0x00	; 0
    3330:	b0 e0       	ldi	r27, 0x00	; 0
    3332:	bc 01       	movw	r22, r24
    3334:	cd 01       	movw	r24, r26
    3336:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__floatunsisf>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	8b 87       	std	Y+11, r24	; 0x0b
    3340:	9c 87       	std	Y+12, r25	; 0x0c
    3342:	ad 87       	std	Y+13, r26	; 0x0d
    3344:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3346:	6b 85       	ldd	r22, Y+11	; 0x0b
    3348:	7c 85       	ldd	r23, Y+12	; 0x0c
    334a:	8d 85       	ldd	r24, Y+13	; 0x0d
    334c:	9e 85       	ldd	r25, Y+14	; 0x0e
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	4a ef       	ldi	r20, 0xFA	; 250
    3354:	54 e4       	ldi	r21, 0x44	; 68
    3356:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    335a:	dc 01       	movw	r26, r24
    335c:	cb 01       	movw	r24, r22
    335e:	8f 83       	std	Y+7, r24	; 0x07
    3360:	98 87       	std	Y+8, r25	; 0x08
    3362:	a9 87       	std	Y+9, r26	; 0x09
    3364:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3366:	6f 81       	ldd	r22, Y+7	; 0x07
    3368:	78 85       	ldd	r23, Y+8	; 0x08
    336a:	89 85       	ldd	r24, Y+9	; 0x09
    336c:	9a 85       	ldd	r25, Y+10	; 0x0a
    336e:	20 e0       	ldi	r18, 0x00	; 0
    3370:	30 e0       	ldi	r19, 0x00	; 0
    3372:	40 e8       	ldi	r20, 0x80	; 128
    3374:	5f e3       	ldi	r21, 0x3F	; 63
    3376:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    337a:	88 23       	and	r24, r24
    337c:	2c f4       	brge	.+10     	; 0x3388 <STEPPER_90_Right+0x36c>
		__ticks = 1;
    337e:	81 e0       	ldi	r24, 0x01	; 1
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	9e 83       	std	Y+6, r25	; 0x06
    3384:	8d 83       	std	Y+5, r24	; 0x05
    3386:	3f c0       	rjmp	.+126    	; 0x3406 <STEPPER_90_Right+0x3ea>
	else if (__tmp > 65535)
    3388:	6f 81       	ldd	r22, Y+7	; 0x07
    338a:	78 85       	ldd	r23, Y+8	; 0x08
    338c:	89 85       	ldd	r24, Y+9	; 0x09
    338e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	3f ef       	ldi	r19, 0xFF	; 255
    3394:	4f e7       	ldi	r20, 0x7F	; 127
    3396:	57 e4       	ldi	r21, 0x47	; 71
    3398:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    339c:	18 16       	cp	r1, r24
    339e:	4c f5       	brge	.+82     	; 0x33f2 <STEPPER_90_Right+0x3d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    33a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    33a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    33a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	40 e2       	ldi	r20, 0x20	; 32
    33ae:	51 e4       	ldi	r21, 0x41	; 65
    33b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	bc 01       	movw	r22, r24
    33ba:	cd 01       	movw	r24, r26
    33bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	9e 83       	std	Y+6, r25	; 0x06
    33c6:	8d 83       	std	Y+5, r24	; 0x05
    33c8:	0f c0       	rjmp	.+30     	; 0x33e8 <STEPPER_90_Right+0x3cc>
    33ca:	88 ec       	ldi	r24, 0xC8	; 200
    33cc:	90 e0       	ldi	r25, 0x00	; 0
    33ce:	9c 83       	std	Y+4, r25	; 0x04
    33d0:	8b 83       	std	Y+3, r24	; 0x03
    33d2:	8b 81       	ldd	r24, Y+3	; 0x03
    33d4:	9c 81       	ldd	r25, Y+4	; 0x04
    33d6:	01 97       	sbiw	r24, 0x01	; 1
    33d8:	f1 f7       	brne	.-4      	; 0x33d6 <STEPPER_90_Right+0x3ba>
    33da:	9c 83       	std	Y+4, r25	; 0x04
    33dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33de:	8d 81       	ldd	r24, Y+5	; 0x05
    33e0:	9e 81       	ldd	r25, Y+6	; 0x06
    33e2:	01 97       	sbiw	r24, 0x01	; 1
    33e4:	9e 83       	std	Y+6, r25	; 0x06
    33e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33e8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ea:	9e 81       	ldd	r25, Y+6	; 0x06
    33ec:	00 97       	sbiw	r24, 0x00	; 0
    33ee:	69 f7       	brne	.-38     	; 0x33ca <STEPPER_90_Right+0x3ae>
    33f0:	14 c0       	rjmp	.+40     	; 0x341a <STEPPER_90_Right+0x3fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33f2:	6f 81       	ldd	r22, Y+7	; 0x07
    33f4:	78 85       	ldd	r23, Y+8	; 0x08
    33f6:	89 85       	ldd	r24, Y+9	; 0x09
    33f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33fe:	dc 01       	movw	r26, r24
    3400:	cb 01       	movw	r24, r22
    3402:	9e 83       	std	Y+6, r25	; 0x06
    3404:	8d 83       	std	Y+5, r24	; 0x05
    3406:	8d 81       	ldd	r24, Y+5	; 0x05
    3408:	9e 81       	ldd	r25, Y+6	; 0x06
    340a:	9a 83       	std	Y+2, r25	; 0x02
    340c:	89 83       	std	Y+1, r24	; 0x01
    340e:	89 81       	ldd	r24, Y+1	; 0x01
    3410:	9a 81       	ldd	r25, Y+2	; 0x02
    3412:	01 97       	sbiw	r24, 0x01	; 1
    3414:	f1 f7       	brne	.-4      	; 0x3412 <STEPPER_90_Right+0x3f6>
    3416:	9a 83       	std	Y+2, r25	; 0x02
    3418:	89 83       	std	Y+1, r24	; 0x01
}
    341a:	e9 96       	adiw	r28, 0x39	; 57
    341c:	0f b6       	in	r0, 0x3f	; 63
    341e:	f8 94       	cli
    3420:	de bf       	out	0x3e, r29	; 62
    3422:	0f be       	out	0x3f, r0	; 63
    3424:	cd bf       	out	0x3d, r28	; 61
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <STEPPER_Stop>:

void STEPPER_Stop(void) {
    342c:	df 93       	push	r29
    342e:	cf 93       	push	r28
    3430:	cd b7       	in	r28, 0x3d	; 61
    3432:	de b7       	in	r29, 0x3e	; 62

  DIO_SetPortValue(STEPPER_PORT, CoilsOff); // trun off all the coils
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	60 e0       	ldi	r22, 0x00	; 0
    3438:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <DIO_SetPortValue>
}
    343c:	cf 91       	pop	r28
    343e:	df 91       	pop	r29
    3440:	08 95       	ret

00003442 <TIMER0_Init>:
#include "stdio.h"
#include "TIMER.h"
void (*TIMER0_pvCallBackFunc)(void) =NULL;


void TIMER0_Init(void){
    3442:	df 93       	push	r29
    3444:	cf 93       	push	r28
    3446:	cd b7       	in	r28, 0x3d	; 61
    3448:	de b7       	in	r29, 0x3e	; 62
	// wave generation : CTC mode
	CLR_BIT(TCCR0 , TCCR0_WGM00);
    344a:	a3 e5       	ldi	r26, 0x53	; 83
    344c:	b0 e0       	ldi	r27, 0x00	; 0
    344e:	e3 e5       	ldi	r30, 0x53	; 83
    3450:	f0 e0       	ldi	r31, 0x00	; 0
    3452:	80 81       	ld	r24, Z
    3454:	8f 7b       	andi	r24, 0xBF	; 191
    3456:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_WGM01);
    3458:	a3 e5       	ldi	r26, 0x53	; 83
    345a:	b0 e0       	ldi	r27, 0x00	; 0
    345c:	e3 e5       	ldi	r30, 0x53	; 83
    345e:	f0 e0       	ldi	r31, 0x00	; 0
    3460:	80 81       	ld	r24, Z
    3462:	88 60       	ori	r24, 0x08	; 8
    3464:	8c 93       	st	X, r24

	//Enable PIE of Compare Match interrupt
	SET_BIT(TIMSK , TIMSK_OCIE0);
    3466:	a9 e5       	ldi	r26, 0x59	; 89
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e9 e5       	ldi	r30, 0x59	; 89
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	82 60       	ori	r24, 0x02	; 2
    3472:	8c 93       	st	X, r24

	//Set compare match value
	OCR0=125;
    3474:	ec e5       	ldi	r30, 0x5C	; 92
    3476:	f0 e0       	ldi	r31, 0x00	; 0
    3478:	8d e7       	ldi	r24, 0x7D	; 125
    347a:	80 83       	st	Z, r24

	// prescaler 64
	SET_BIT(TCCR0 , TCCR0_CS00);
    347c:	a3 e5       	ldi	r26, 0x53	; 83
    347e:	b0 e0       	ldi	r27, 0x00	; 0
    3480:	e3 e5       	ldi	r30, 0x53	; 83
    3482:	f0 e0       	ldi	r31, 0x00	; 0
    3484:	80 81       	ld	r24, Z
    3486:	81 60       	ori	r24, 0x01	; 1
    3488:	8c 93       	st	X, r24
	SET_BIT(TCCR0 , TCCR0_CS01);
    348a:	a3 e5       	ldi	r26, 0x53	; 83
    348c:	b0 e0       	ldi	r27, 0x00	; 0
    348e:	e3 e5       	ldi	r30, 0x53	; 83
    3490:	f0 e0       	ldi	r31, 0x00	; 0
    3492:	80 81       	ld	r24, Z
    3494:	82 60       	ori	r24, 0x02	; 2
    3496:	8c 93       	st	X, r24
	CLR_BIT(TCCR0 , TCCR0_CS02);
    3498:	a3 e5       	ldi	r26, 0x53	; 83
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	e3 e5       	ldi	r30, 0x53	; 83
    349e:	f0 e0       	ldi	r31, 0x00	; 0
    34a0:	80 81       	ld	r24, Z
    34a2:	8b 7f       	andi	r24, 0xFB	; 251
    34a4:	8c 93       	st	X, r24

}
    34a6:	cf 91       	pop	r28
    34a8:	df 91       	pop	r29
    34aa:	08 95       	ret

000034ac <TIMER0_u8SetCallBack>:

u8   TIMER0_u8SetCallBack(void ( *Copy_pvCallBackFunc)(void)){
    34ac:	df 93       	push	r29
    34ae:	cf 93       	push	r28
    34b0:	00 d0       	rcall	.+0      	; 0x34b2 <TIMER0_u8SetCallBack+0x6>
    34b2:	0f 92       	push	r0
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	9b 83       	std	Y+3, r25	; 0x03
    34ba:	8a 83       	std	Y+2, r24	; 0x02

	u8 u8ErrorStstus_Local = OK;
    34bc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pvCallBackFunc != NULL){
    34be:	8a 81       	ldd	r24, Y+2	; 0x02
    34c0:	9b 81       	ldd	r25, Y+3	; 0x03
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	39 f0       	breq	.+14     	; 0x34d4 <TIMER0_u8SetCallBack+0x28>
		TIMER0_pvCallBackFunc = Copy_pvCallBackFunc;
    34c6:	8a 81       	ldd	r24, Y+2	; 0x02
    34c8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ca:	90 93 44 02 	sts	0x0244, r25
    34ce:	80 93 43 02 	sts	0x0243, r24
    34d2:	02 c0       	rjmp	.+4      	; 0x34d8 <TIMER0_u8SetCallBack+0x2c>
	}
	else{
		u8ErrorStstus_Local = NOK;
    34d4:	81 e0       	ldi	r24, 0x01	; 1
    34d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return u8ErrorStstus_Local;
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    34da:	0f 90       	pop	r0
    34dc:	0f 90       	pop	r0
    34de:	0f 90       	pop	r0
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	08 95       	ret

000034e6 <__vector_10>:


/* Actual ISR */
void __vector_10 (void) __attribute__((signal));
void __vector_10 (void){
    34e6:	1f 92       	push	r1
    34e8:	0f 92       	push	r0
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	0f 92       	push	r0
    34ee:	11 24       	eor	r1, r1
    34f0:	2f 93       	push	r18
    34f2:	3f 93       	push	r19
    34f4:	4f 93       	push	r20
    34f6:	5f 93       	push	r21
    34f8:	6f 93       	push	r22
    34fa:	7f 93       	push	r23
    34fc:	8f 93       	push	r24
    34fe:	9f 93       	push	r25
    3500:	af 93       	push	r26
    3502:	bf 93       	push	r27
    3504:	ef 93       	push	r30
    3506:	ff 93       	push	r31
    3508:	df 93       	push	r29
    350a:	cf 93       	push	r28
    350c:	cd b7       	in	r28, 0x3d	; 61
    350e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER0_pvCallBackFunc != NULL){
    3510:	80 91 43 02 	lds	r24, 0x0243
    3514:	90 91 44 02 	lds	r25, 0x0244
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	29 f0       	breq	.+10     	; 0x3526 <__vector_10+0x40>
		TIMER0_pvCallBackFunc();
    351c:	e0 91 43 02 	lds	r30, 0x0243
    3520:	f0 91 44 02 	lds	r31, 0x0244
    3524:	09 95       	icall
	}
}
    3526:	cf 91       	pop	r28
    3528:	df 91       	pop	r29
    352a:	ff 91       	pop	r31
    352c:	ef 91       	pop	r30
    352e:	bf 91       	pop	r27
    3530:	af 91       	pop	r26
    3532:	9f 91       	pop	r25
    3534:	8f 91       	pop	r24
    3536:	7f 91       	pop	r23
    3538:	6f 91       	pop	r22
    353a:	5f 91       	pop	r21
    353c:	4f 91       	pop	r20
    353e:	3f 91       	pop	r19
    3540:	2f 91       	pop	r18
    3542:	0f 90       	pop	r0
    3544:	0f be       	out	0x3f, r0	; 63
    3546:	0f 90       	pop	r0
    3548:	1f 90       	pop	r1
    354a:	18 95       	reti

0000354c <USART_Init>:
#include "stdio.h"
#include "string.h"
#include "USART.h"

void USART_Init(void)
{
    354c:	df 93       	push	r29
    354e:	cf 93       	push	r28
    3550:	cd b7       	in	r28, 0x3d	; 61
    3552:	de b7       	in	r29, 0x3e	; 62
	//set baud rate 96600
	UBRRL = 51;
    3554:	e9 e2       	ldi	r30, 0x29	; 41
    3556:	f0 e0       	ldi	r31, 0x00	; 0
    3558:	83 e3       	ldi	r24, 0x33	; 51
    355a:	80 83       	st	Z, r24
	UBRRH = 0;
    355c:	e0 e4       	ldi	r30, 0x40	; 64
    355e:	f0 e0       	ldi	r31, 0x00	; 0
    3560:	10 82       	st	Z, r1
	//frame format
	SET_BIT(UCSRC , USART_URSEL);
    3562:	a0 e4       	ldi	r26, 0x40	; 64
    3564:	b0 e0       	ldi	r27, 0x00	; 0
    3566:	e0 e4       	ldi	r30, 0x40	; 64
    3568:	f0 e0       	ldi	r31, 0x00	; 0
    356a:	80 81       	ld	r24, Z
    356c:	80 68       	ori	r24, 0x80	; 128
    356e:	8c 93       	st	X, r24
	//  Word Size [8 bits], By default = 8 bits
	SET_BIT(UCSRC , USART_UCSZ0);
    3570:	a0 e4       	ldi	r26, 0x40	; 64
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	e0 e4       	ldi	r30, 0x40	; 64
    3576:	f0 e0       	ldi	r31, 0x00	; 0
    3578:	80 81       	ld	r24, Z
    357a:	82 60       	ori	r24, 0x02	; 2
    357c:	8c 93       	st	X, r24
	SET_BIT(UCSRC , USART_UCSZ1);
    357e:	a0 e4       	ldi	r26, 0x40	; 64
    3580:	b0 e0       	ldi	r27, 0x00	; 0
    3582:	e0 e4       	ldi	r30, 0x40	; 64
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	80 81       	ld	r24, Z
    3588:	84 60       	ori	r24, 0x04	; 4
    358a:	8c 93       	st	X, r24
	CLR_BIT(UCSRB , USART_UCSZ2);
    358c:	aa e2       	ldi	r26, 0x2A	; 42
    358e:	b0 e0       	ldi	r27, 0x00	; 0
    3590:	ea e2       	ldi	r30, 0x2A	; 42
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	80 81       	ld	r24, Z
    3596:	8b 7f       	andi	r24, 0xFB	; 251
    3598:	8c 93       	st	X, r24
	//Disable Parity
	CLR_BIT(UCSRC , USART_UPM0);
    359a:	a0 e4       	ldi	r26, 0x40	; 64
    359c:	b0 e0       	ldi	r27, 0x00	; 0
    359e:	e0 e4       	ldi	r30, 0x40	; 64
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	8f 7e       	andi	r24, 0xEF	; 239
    35a6:	8c 93       	st	X, r24
	CLR_BIT(UCSRC , USART_UPM1);
    35a8:	a0 e4       	ldi	r26, 0x40	; 64
    35aa:	b0 e0       	ldi	r27, 0x00	; 0
    35ac:	e0 e4       	ldi	r30, 0x40	; 64
    35ae:	f0 e0       	ldi	r31, 0x00	; 0
    35b0:	80 81       	ld	r24, Z
    35b2:	8f 7d       	andi	r24, 0xDF	; 223
    35b4:	8c 93       	st	X, r24
	//Stop bit --> 1 bit
	CLR_BIT(UCSRC , USART_USBS);
    35b6:	a0 e4       	ldi	r26, 0x40	; 64
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	e0 e4       	ldi	r30, 0x40	; 64
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	87 7f       	andi	r24, 0xF7	; 247
    35c2:	8c 93       	st	X, r24
	//Enable TX ,RX
	SET_BIT(UCSRB , USART_TXEN);
    35c4:	aa e2       	ldi	r26, 0x2A	; 42
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	ea e2       	ldi	r30, 0x2A	; 42
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	88 60       	ori	r24, 0x08	; 8
    35d0:	8c 93       	st	X, r24
	SET_BIT(UCSRB , USART_RXEN);
    35d2:	aa e2       	ldi	r26, 0x2A	; 42
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	ea e2       	ldi	r30, 0x2A	; 42
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	80 61       	ori	r24, 0x10	; 16
    35de:	8c 93       	st	X, r24

}
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

000035e6 <USART_Send_Char>:

void USART_Send_Char(u8 U8Char_Copy)
{
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
    35ee:	2f 97       	sbiw	r28, 0x0f	; 15
    35f0:	0f b6       	in	r0, 0x3f	; 63
    35f2:	f8 94       	cli
    35f4:	de bf       	out	0x3e, r29	; 62
    35f6:	0f be       	out	0x3f, r0	; 63
    35f8:	cd bf       	out	0x3d, r28	; 61
    35fa:	8f 87       	std	Y+15, r24	; 0x0f
	while(GET_BIT(UCSRA , USART_UDRE )==0);
    35fc:	eb e2       	ldi	r30, 0x2B	; 43
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
    3602:	82 95       	swap	r24
    3604:	86 95       	lsr	r24
    3606:	87 70       	andi	r24, 0x07	; 7
    3608:	88 2f       	mov	r24, r24
    360a:	90 e0       	ldi	r25, 0x00	; 0
    360c:	81 70       	andi	r24, 0x01	; 1
    360e:	90 70       	andi	r25, 0x00	; 0
    3610:	00 97       	sbiw	r24, 0x00	; 0
    3612:	a1 f3       	breq	.-24     	; 0x35fc <USART_Send_Char+0x16>
	UDR = U8Char_Copy;
    3614:	ec e2       	ldi	r30, 0x2C	; 44
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	8f 85       	ldd	r24, Y+15	; 0x0f
    361a:	80 83       	st	Z, r24
    361c:	80 e0       	ldi	r24, 0x00	; 0
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	a0 e8       	ldi	r26, 0x80	; 128
    3622:	bf e3       	ldi	r27, 0x3F	; 63
    3624:	8b 87       	std	Y+11, r24	; 0x0b
    3626:	9c 87       	std	Y+12, r25	; 0x0c
    3628:	ad 87       	std	Y+13, r26	; 0x0d
    362a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    362c:	6b 85       	ldd	r22, Y+11	; 0x0b
    362e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3630:	8d 85       	ldd	r24, Y+13	; 0x0d
    3632:	9e 85       	ldd	r25, Y+14	; 0x0e
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	4a ef       	ldi	r20, 0xFA	; 250
    363a:	54 e4       	ldi	r21, 0x44	; 68
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	8f 83       	std	Y+7, r24	; 0x07
    3646:	98 87       	std	Y+8, r25	; 0x08
    3648:	a9 87       	std	Y+9, r26	; 0x09
    364a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    364c:	6f 81       	ldd	r22, Y+7	; 0x07
    364e:	78 85       	ldd	r23, Y+8	; 0x08
    3650:	89 85       	ldd	r24, Y+9	; 0x09
    3652:	9a 85       	ldd	r25, Y+10	; 0x0a
    3654:	20 e0       	ldi	r18, 0x00	; 0
    3656:	30 e0       	ldi	r19, 0x00	; 0
    3658:	40 e8       	ldi	r20, 0x80	; 128
    365a:	5f e3       	ldi	r21, 0x3F	; 63
    365c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3660:	88 23       	and	r24, r24
    3662:	2c f4       	brge	.+10     	; 0x366e <USART_Send_Char+0x88>
		__ticks = 1;
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	9e 83       	std	Y+6, r25	; 0x06
    366a:	8d 83       	std	Y+5, r24	; 0x05
    366c:	3f c0       	rjmp	.+126    	; 0x36ec <USART_Send_Char+0x106>
	else if (__tmp > 65535)
    366e:	6f 81       	ldd	r22, Y+7	; 0x07
    3670:	78 85       	ldd	r23, Y+8	; 0x08
    3672:	89 85       	ldd	r24, Y+9	; 0x09
    3674:	9a 85       	ldd	r25, Y+10	; 0x0a
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	3f ef       	ldi	r19, 0xFF	; 255
    367a:	4f e7       	ldi	r20, 0x7F	; 127
    367c:	57 e4       	ldi	r21, 0x47	; 71
    367e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3682:	18 16       	cp	r1, r24
    3684:	4c f5       	brge	.+82     	; 0x36d8 <USART_Send_Char+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3686:	6b 85       	ldd	r22, Y+11	; 0x0b
    3688:	7c 85       	ldd	r23, Y+12	; 0x0c
    368a:	8d 85       	ldd	r24, Y+13	; 0x0d
    368c:	9e 85       	ldd	r25, Y+14	; 0x0e
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e0       	ldi	r19, 0x00	; 0
    3692:	40 e2       	ldi	r20, 0x20	; 32
    3694:	51 e4       	ldi	r21, 0x41	; 65
    3696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	bc 01       	movw	r22, r24
    36a0:	cd 01       	movw	r24, r26
    36a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a6:	dc 01       	movw	r26, r24
    36a8:	cb 01       	movw	r24, r22
    36aa:	9e 83       	std	Y+6, r25	; 0x06
    36ac:	8d 83       	std	Y+5, r24	; 0x05
    36ae:	0f c0       	rjmp	.+30     	; 0x36ce <USART_Send_Char+0xe8>
    36b0:	88 ec       	ldi	r24, 0xC8	; 200
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	9c 83       	std	Y+4, r25	; 0x04
    36b6:	8b 83       	std	Y+3, r24	; 0x03
    36b8:	8b 81       	ldd	r24, Y+3	; 0x03
    36ba:	9c 81       	ldd	r25, Y+4	; 0x04
    36bc:	01 97       	sbiw	r24, 0x01	; 1
    36be:	f1 f7       	brne	.-4      	; 0x36bc <USART_Send_Char+0xd6>
    36c0:	9c 83       	std	Y+4, r25	; 0x04
    36c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c4:	8d 81       	ldd	r24, Y+5	; 0x05
    36c6:	9e 81       	ldd	r25, Y+6	; 0x06
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	9e 83       	std	Y+6, r25	; 0x06
    36cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	9e 81       	ldd	r25, Y+6	; 0x06
    36d2:	00 97       	sbiw	r24, 0x00	; 0
    36d4:	69 f7       	brne	.-38     	; 0x36b0 <USART_Send_Char+0xca>
    36d6:	14 c0       	rjmp	.+40     	; 0x3700 <USART_Send_Char+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d8:	6f 81       	ldd	r22, Y+7	; 0x07
    36da:	78 85       	ldd	r23, Y+8	; 0x08
    36dc:	89 85       	ldd	r24, Y+9	; 0x09
    36de:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	9e 83       	std	Y+6, r25	; 0x06
    36ea:	8d 83       	std	Y+5, r24	; 0x05
    36ec:	8d 81       	ldd	r24, Y+5	; 0x05
    36ee:	9e 81       	ldd	r25, Y+6	; 0x06
    36f0:	9a 83       	std	Y+2, r25	; 0x02
    36f2:	89 83       	std	Y+1, r24	; 0x01
    36f4:	89 81       	ldd	r24, Y+1	; 0x01
    36f6:	9a 81       	ldd	r25, Y+2	; 0x02
    36f8:	01 97       	sbiw	r24, 0x01	; 1
    36fa:	f1 f7       	brne	.-4      	; 0x36f8 <USART_Send_Char+0x112>
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    3700:	2f 96       	adiw	r28, 0x0f	; 15
    3702:	0f b6       	in	r0, 0x3f	; 63
    3704:	f8 94       	cli
    3706:	de bf       	out	0x3e, r29	; 62
    3708:	0f be       	out	0x3f, r0	; 63
    370a:	cd bf       	out	0x3d, r28	; 61
    370c:	cf 91       	pop	r28
    370e:	df 91       	pop	r29
    3710:	08 95       	ret

00003712 <USART_Receive_Char>:

u8 USART_Receive_Char(void)
{
    3712:	df 93       	push	r29
    3714:	cf 93       	push	r28
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	2e 97       	sbiw	r28, 0x0e	; 14
    371c:	0f b6       	in	r0, 0x3f	; 63
    371e:	f8 94       	cli
    3720:	de bf       	out	0x3e, r29	; 62
    3722:	0f be       	out	0x3f, r0	; 63
    3724:	cd bf       	out	0x3d, r28	; 61
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
    372a:	a0 e0       	ldi	r26, 0x00	; 0
    372c:	b0 e4       	ldi	r27, 0x40	; 64
    372e:	8b 87       	std	Y+11, r24	; 0x0b
    3730:	9c 87       	std	Y+12, r25	; 0x0c
    3732:	ad 87       	std	Y+13, r26	; 0x0d
    3734:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3736:	6b 85       	ldd	r22, Y+11	; 0x0b
    3738:	7c 85       	ldd	r23, Y+12	; 0x0c
    373a:	8d 85       	ldd	r24, Y+13	; 0x0d
    373c:	9e 85       	ldd	r25, Y+14	; 0x0e
    373e:	20 e0       	ldi	r18, 0x00	; 0
    3740:	30 e0       	ldi	r19, 0x00	; 0
    3742:	4a ef       	ldi	r20, 0xFA	; 250
    3744:	54 e4       	ldi	r21, 0x44	; 68
    3746:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    374a:	dc 01       	movw	r26, r24
    374c:	cb 01       	movw	r24, r22
    374e:	8f 83       	std	Y+7, r24	; 0x07
    3750:	98 87       	std	Y+8, r25	; 0x08
    3752:	a9 87       	std	Y+9, r26	; 0x09
    3754:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3756:	6f 81       	ldd	r22, Y+7	; 0x07
    3758:	78 85       	ldd	r23, Y+8	; 0x08
    375a:	89 85       	ldd	r24, Y+9	; 0x09
    375c:	9a 85       	ldd	r25, Y+10	; 0x0a
    375e:	20 e0       	ldi	r18, 0x00	; 0
    3760:	30 e0       	ldi	r19, 0x00	; 0
    3762:	40 e8       	ldi	r20, 0x80	; 128
    3764:	5f e3       	ldi	r21, 0x3F	; 63
    3766:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    376a:	88 23       	and	r24, r24
    376c:	2c f4       	brge	.+10     	; 0x3778 <USART_Receive_Char+0x66>
		__ticks = 1;
    376e:	81 e0       	ldi	r24, 0x01	; 1
    3770:	90 e0       	ldi	r25, 0x00	; 0
    3772:	9e 83       	std	Y+6, r25	; 0x06
    3774:	8d 83       	std	Y+5, r24	; 0x05
    3776:	3f c0       	rjmp	.+126    	; 0x37f6 <USART_Receive_Char+0xe4>
	else if (__tmp > 65535)
    3778:	6f 81       	ldd	r22, Y+7	; 0x07
    377a:	78 85       	ldd	r23, Y+8	; 0x08
    377c:	89 85       	ldd	r24, Y+9	; 0x09
    377e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3780:	20 e0       	ldi	r18, 0x00	; 0
    3782:	3f ef       	ldi	r19, 0xFF	; 255
    3784:	4f e7       	ldi	r20, 0x7F	; 127
    3786:	57 e4       	ldi	r21, 0x47	; 71
    3788:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    378c:	18 16       	cp	r1, r24
    378e:	4c f5       	brge	.+82     	; 0x37e2 <USART_Receive_Char+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3790:	6b 85       	ldd	r22, Y+11	; 0x0b
    3792:	7c 85       	ldd	r23, Y+12	; 0x0c
    3794:	8d 85       	ldd	r24, Y+13	; 0x0d
    3796:	9e 85       	ldd	r25, Y+14	; 0x0e
    3798:	20 e0       	ldi	r18, 0x00	; 0
    379a:	30 e0       	ldi	r19, 0x00	; 0
    379c:	40 e2       	ldi	r20, 0x20	; 32
    379e:	51 e4       	ldi	r21, 0x41	; 65
    37a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37a4:	dc 01       	movw	r26, r24
    37a6:	cb 01       	movw	r24, r22
    37a8:	bc 01       	movw	r22, r24
    37aa:	cd 01       	movw	r24, r26
    37ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37b0:	dc 01       	movw	r26, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	9e 83       	std	Y+6, r25	; 0x06
    37b6:	8d 83       	std	Y+5, r24	; 0x05
    37b8:	0f c0       	rjmp	.+30     	; 0x37d8 <USART_Receive_Char+0xc6>
    37ba:	88 ec       	ldi	r24, 0xC8	; 200
    37bc:	90 e0       	ldi	r25, 0x00	; 0
    37be:	9c 83       	std	Y+4, r25	; 0x04
    37c0:	8b 83       	std	Y+3, r24	; 0x03
    37c2:	8b 81       	ldd	r24, Y+3	; 0x03
    37c4:	9c 81       	ldd	r25, Y+4	; 0x04
    37c6:	01 97       	sbiw	r24, 0x01	; 1
    37c8:	f1 f7       	brne	.-4      	; 0x37c6 <USART_Receive_Char+0xb4>
    37ca:	9c 83       	std	Y+4, r25	; 0x04
    37cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ce:	8d 81       	ldd	r24, Y+5	; 0x05
    37d0:	9e 81       	ldd	r25, Y+6	; 0x06
    37d2:	01 97       	sbiw	r24, 0x01	; 1
    37d4:	9e 83       	std	Y+6, r25	; 0x06
    37d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37d8:	8d 81       	ldd	r24, Y+5	; 0x05
    37da:	9e 81       	ldd	r25, Y+6	; 0x06
    37dc:	00 97       	sbiw	r24, 0x00	; 0
    37de:	69 f7       	brne	.-38     	; 0x37ba <USART_Receive_Char+0xa8>
    37e0:	14 c0       	rjmp	.+40     	; 0x380a <USART_Receive_Char+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37e2:	6f 81       	ldd	r22, Y+7	; 0x07
    37e4:	78 85       	ldd	r23, Y+8	; 0x08
    37e6:	89 85       	ldd	r24, Y+9	; 0x09
    37e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37ee:	dc 01       	movw	r26, r24
    37f0:	cb 01       	movw	r24, r22
    37f2:	9e 83       	std	Y+6, r25	; 0x06
    37f4:	8d 83       	std	Y+5, r24	; 0x05
    37f6:	8d 81       	ldd	r24, Y+5	; 0x05
    37f8:	9e 81       	ldd	r25, Y+6	; 0x06
    37fa:	9a 83       	std	Y+2, r25	; 0x02
    37fc:	89 83       	std	Y+1, r24	; 0x01
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
    3800:	9a 81       	ldd	r25, Y+2	; 0x02
    3802:	01 97       	sbiw	r24, 0x01	; 1
    3804:	f1 f7       	brne	.-4      	; 0x3802 <USART_Receive_Char+0xf0>
    3806:	9a 83       	std	Y+2, r25	; 0x02
    3808:	89 83       	std	Y+1, r24	; 0x01
	//wait for flag RXC ==0
	_delay_ms(2);

	while(GET_BIT(UCSRA , USART_RXC )==0);
    380a:	eb e2       	ldi	r30, 0x2B	; 43
    380c:	f0 e0       	ldi	r31, 0x00	; 0
    380e:	80 81       	ld	r24, Z
    3810:	88 23       	and	r24, r24
    3812:	dc f7       	brge	.-10     	; 0x380a <USART_Receive_Char+0xf8>
	//return Received
	return UDR;
    3814:	ec e2       	ldi	r30, 0x2C	; 44
    3816:	f0 e0       	ldi	r31, 0x00	; 0
    3818:	80 81       	ld	r24, Z

}
    381a:	2e 96       	adiw	r28, 0x0e	; 14
    381c:	0f b6       	in	r0, 0x3f	; 63
    381e:	f8 94       	cli
    3820:	de bf       	out	0x3e, r29	; 62
    3822:	0f be       	out	0x3f, r0	; 63
    3824:	cd bf       	out	0x3d, r28	; 61
    3826:	cf 91       	pop	r28
    3828:	df 91       	pop	r29
    382a:	08 95       	ret

0000382c <USART_Send_String>:

void USART_Send_String(u8* PU8Data_Copy)
{
    382c:	0f 93       	push	r16
    382e:	1f 93       	push	r17
    3830:	df 93       	push	r29
    3832:	cf 93       	push	r28
    3834:	00 d0       	rcall	.+0      	; 0x3836 <USART_Send_String+0xa>
    3836:	0f 92       	push	r0
    3838:	cd b7       	in	r28, 0x3d	; 61
    383a:	de b7       	in	r29, 0x3e	; 62
    383c:	9b 83       	std	Y+3, r25	; 0x03
    383e:	8a 83       	std	Y+2, r24	; 0x02
	u8 index=0;
    3840:	19 82       	std	Y+1, r1	; 0x01
    3842:	0e c0       	rjmp	.+28     	; 0x3860 <USART_Send_String+0x34>
	while(index<strlen(PU8Data_Copy))
	{
		USART_Send_Char(*(PU8Data_Copy+index));
    3844:	89 81       	ldd	r24, Y+1	; 0x01
    3846:	28 2f       	mov	r18, r24
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	8a 81       	ldd	r24, Y+2	; 0x02
    384c:	9b 81       	ldd	r25, Y+3	; 0x03
    384e:	fc 01       	movw	r30, r24
    3850:	e2 0f       	add	r30, r18
    3852:	f3 1f       	adc	r31, r19
    3854:	80 81       	ld	r24, Z
    3856:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <USART_Send_Char>
		index++;
    385a:	89 81       	ldd	r24, Y+1	; 0x01
    385c:	8f 5f       	subi	r24, 0xFF	; 255
    385e:	89 83       	std	Y+1, r24	; 0x01
}

void USART_Send_String(u8* PU8Data_Copy)
{
	u8 index=0;
	while(index<strlen(PU8Data_Copy))
    3860:	89 81       	ldd	r24, Y+1	; 0x01
    3862:	08 2f       	mov	r16, r24
    3864:	10 e0       	ldi	r17, 0x00	; 0
    3866:	8a 81       	ldd	r24, Y+2	; 0x02
    3868:	9b 81       	ldd	r25, Y+3	; 0x03
    386a:	0e 94 77 1e 	call	0x3cee	; 0x3cee <strlen>
    386e:	08 17       	cp	r16, r24
    3870:	19 07       	cpc	r17, r25
    3872:	40 f3       	brcs	.-48     	; 0x3844 <USART_Send_String+0x18>
	{
		USART_Send_Char(*(PU8Data_Copy+index));
		index++;
	}

}
    3874:	0f 90       	pop	r0
    3876:	0f 90       	pop	r0
    3878:	0f 90       	pop	r0
    387a:	cf 91       	pop	r28
    387c:	df 91       	pop	r29
    387e:	1f 91       	pop	r17
    3880:	0f 91       	pop	r16
    3882:	08 95       	ret

00003884 <USART_Receive_String>:
u8* USART_Receive_String(void)
{
    3884:	0f 93       	push	r16
    3886:	1f 93       	push	r17
    3888:	df 93       	push	r29
    388a:	cf 93       	push	r28
    388c:	00 d0       	rcall	.+0      	; 0x388e <USART_Receive_String+0xa>
    388e:	cd b7       	in	r28, 0x3d	; 61
    3890:	de b7       	in	r29, 0x3e	; 62
	static u8 EnteredPassword[PasswordSize];
	u8 index = 0;
    3892:	1a 82       	std	Y+2, r1	; 0x02
    3894:	1d c0       	rjmp	.+58     	; 0x38d0 <USART_Receive_String+0x4c>
	u8 EnteredChar;
	while (index < PasswordSize ) // Receive up to PasswordSize characters
	{
		EnteredPassword[index]=USART_Receive_Char();
    3896:	8a 81       	ldd	r24, Y+2	; 0x02
    3898:	08 2f       	mov	r16, r24
    389a:	10 e0       	ldi	r17, 0x00	; 0
    389c:	0e 94 89 1b 	call	0x3712	; 0x3712 <USART_Receive_Char>
    38a0:	f8 01       	movw	r30, r16
    38a2:	eb 5b       	subi	r30, 0xBB	; 187
    38a4:	fd 4f       	sbci	r31, 0xFD	; 253
    38a6:	80 83       	st	Z, r24
		// Check for newline character (Enter key) to terminate input
		if (EnteredPassword[index] == '\r')
    38a8:	8a 81       	ldd	r24, Y+2	; 0x02
    38aa:	88 2f       	mov	r24, r24
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	fc 01       	movw	r30, r24
    38b0:	eb 5b       	subi	r30, 0xBB	; 187
    38b2:	fd 4f       	sbci	r31, 0xFD	; 253
    38b4:	80 81       	ld	r24, Z
    38b6:	8d 30       	cpi	r24, 0x0D	; 13
    38b8:	41 f4       	brne	.+16     	; 0x38ca <USART_Receive_String+0x46>
		{
			EnteredPassword[index] = '\0'; // Null-terminate the string
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	88 2f       	mov	r24, r24
    38be:	90 e0       	ldi	r25, 0x00	; 0
    38c0:	fc 01       	movw	r30, r24
    38c2:	eb 5b       	subi	r30, 0xBB	; 187
    38c4:	fd 4f       	sbci	r31, 0xFD	; 253
    38c6:	10 82       	st	Z, r1
    38c8:	06 c0       	rjmp	.+12     	; 0x38d6 <USART_Receive_String+0x52>
			break;
		}

		index++;
    38ca:	8a 81       	ldd	r24, Y+2	; 0x02
    38cc:	8f 5f       	subi	r24, 0xFF	; 255
    38ce:	8a 83       	std	Y+2, r24	; 0x02
u8* USART_Receive_String(void)
{
	static u8 EnteredPassword[PasswordSize];
	u8 index = 0;
	u8 EnteredChar;
	while (index < PasswordSize ) // Receive up to PasswordSize characters
    38d0:	8a 81       	ldd	r24, Y+2	; 0x02
    38d2:	84 30       	cpi	r24, 0x04	; 4
    38d4:	00 f3       	brcs	.-64     	; 0x3896 <USART_Receive_String+0x12>
		}

		index++;
	}

	return EnteredPassword;
    38d6:	85 e4       	ldi	r24, 0x45	; 69
    38d8:	92 e0       	ldi	r25, 0x02	; 2
}
    38da:	0f 90       	pop	r0
    38dc:	0f 90       	pop	r0
    38de:	cf 91       	pop	r28
    38e0:	df 91       	pop	r29
    38e2:	1f 91       	pop	r17
    38e4:	0f 91       	pop	r16
    38e6:	08 95       	ret

000038e8 <main>:

void Timer0ISR(void);
void EXternalInit0ISR(void);
void EnteringPassword(void);
void main(void)
{
    38e8:	df 93       	push	r29
    38ea:	cf 93       	push	r28
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
	//initiate LCD
	CLCD_void_Init();
    38f0:	0e 94 75 07 	call	0xeea	; 0xeea <CLCD_void_Init>
	//initiate Exit button
	ExitButtonInit();
    38f4:	0e 94 d6 0f 	call	0x1fac	; 0x1fac <ExitButtonInit>
	//initiate IR Sensor
	IR_Init();
    38f8:	0e 94 bb 11 	call	0x2376	; 0x2376 <IR_Init>
	// print welcome
	LCD_Welcome();
    38fc:	0e 94 2d 10 	call	0x205a	; 0x205a <LCD_Welcome>
	//Enable general interrupt
	GIE_Enable();
    3900:	0e 94 06 10 	call	0x200c	; 0x200c <GIE_Enable>
	//initiate USART
	USART_Init();
    3904:	0e 94 a6 1a 	call	0x354c	; 0x354c <USART_Init>
	//timer1 Initialization on mode-> CTC & prescaler->64 & OCR->125
	TIMER0_Init();
    3908:	0e 94 21 1a 	call	0x3442	; 0x3442 <TIMER0_Init>
	//calling back the interrupt
	TIMER0_u8SetCallBack(Timer0ISR);
    390c:	88 ea       	ldi	r24, 0xA8	; 168
    390e:	9c e1       	ldi	r25, 0x1C	; 28
    3910:	0e 94 56 1a 	call	0x34ac	; 0x34ac <TIMER0_u8SetCallBack>
	//__vector_10();
	//External interrupt
	EXTI_void_Int0Init();
    3914:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <EXTI_void_Int0Init>
	EXTI_u8Int0SetCallBack(&EXternalInit0ISR);
    3918:	87 ef       	ldi	r24, 0xF7	; 247
    391a:	9c e1       	ldi	r25, 0x1C	; 28
    391c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <EXTI_u8Int0SetCallBack>
	//__vector_1();
	while(1)
	{
		if(GetGateState()==ClosedGate)
    3920:	0e 94 64 11 	call	0x22c8	; 0x22c8 <GetGateState>
    3924:	88 23       	and	r24, r24
    3926:	69 f4       	brne	.+26     	; 0x3942 <main+0x5a>
		{
			USART_Send_String("\rEnter Your Password :\r");
    3928:	82 e0       	ldi	r24, 0x02	; 2
    392a:	91 e0       	ldi	r25, 0x01	; 1
    392c:	0e 94 16 1c 	call	0x382c	; 0x382c <USART_Send_String>
			EnteringPassword();
    3930:	0e 94 00 1d 	call	0x3a00	; 0x3a00 <EnteringPassword>
			if(GetPasswordState()==PasswordMatches)
    3934:	0e 94 db 10 	call	0x21b6	; 0x21b6 <GetPasswordState>
    3938:	81 30       	cpi	r24, 0x01	; 1
    393a:	91 f7       	brne	.-28     	; 0x3920 <main+0x38>
				OpenGate();
    393c:	0e 94 6d 11 	call	0x22da	; 0x22da <OpenGate>
    3940:	ef cf       	rjmp	.-34     	; 0x3920 <main+0x38>
		}
		else if (GetWaitingTimeState()==TimeOut)
    3942:	0e 94 17 11 	call	0x222e	; 0x222e <GetWaitingTimeState>
    3946:	8f 3f       	cpi	r24, 0xFF	; 255
    3948:	59 f7       	brne	.-42     	; 0x3920 <main+0x38>
			CloseGate();
    394a:	0e 94 8c 11 	call	0x2318	; 0x2318 <CloseGate>
    394e:	e8 cf       	rjmp	.-48     	; 0x3920 <main+0x38>

00003950 <Timer0ISR>:
	}
}
void Timer0ISR(void)
{
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
	static u16 TempWaitingTime;
    if (GetGateState() == OpenedGate && GetWaitingTimeState() == Waiting)
    3958:	0e 94 64 11 	call	0x22c8	; 0x22c8 <GetGateState>
    395c:	81 30       	cpi	r24, 0x01	; 1
    395e:	09 f0       	breq	.+2      	; 0x3962 <Timer0ISR+0x12>
    3960:	43 c0       	rjmp	.+134    	; 0x39e8 <Timer0ISR+0x98>
    3962:	0e 94 17 11 	call	0x222e	; 0x222e <GetWaitingTimeState>
    3966:	88 23       	and	r24, r24
    3968:	09 f0       	breq	.+2      	; 0x396c <Timer0ISR+0x1c>
    396a:	3e c0       	rjmp	.+124    	; 0x39e8 <Timer0ISR+0x98>
    {
    	TempWaitingTime=GetWaitingTime();
    396c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <GetWaitingTime>
    3970:	90 93 4a 02 	sts	0x024A, r25
    3974:	80 93 49 02 	sts	0x0249, r24
        if (TempWaitingTime > 0)
    3978:	80 91 49 02 	lds	r24, 0x0249
    397c:	90 91 4a 02 	lds	r25, 0x024A
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	79 f1       	breq	.+94     	; 0x39e2 <Timer0ISR+0x92>
        {
        	SetWaitingTime(TempWaitingTime - 1);
    3984:	80 91 49 02 	lds	r24, 0x0249
    3988:	90 91 4a 02 	lds	r25, 0x024A
    398c:	01 97       	sbiw	r24, 0x01	; 1
    398e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <SetWaitingTime>
        	if (TempWaitingTime==DefaultWaitingTime)
    3992:	80 91 49 02 	lds	r24, 0x0249
    3996:	90 91 4a 02 	lds	r25, 0x024A
    399a:	25 e0       	ldi	r18, 0x05	; 5
    399c:	8c 3d       	cpi	r24, 0xDC	; 220
    399e:	92 07       	cpc	r25, r18
    39a0:	39 f4       	brne	.+14     	; 0x39b0 <Timer0ISR+0x60>
        	{
        		CLCD_void_SendCommand(CLCD_INIT_DisplayClear);
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <CLCD_void_SendCommand>
        		CLCD_void_SendStringData("Closing after:");
    39a8:	8a e1       	ldi	r24, 0x1A	; 26
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	0e 94 2e 07 	call	0xe5c	; 0xe5c <CLCD_void_SendStringData>
        	}
        	if(TempWaitingTime%500==0)
    39b0:	80 91 49 02 	lds	r24, 0x0249
    39b4:	90 91 4a 02 	lds	r25, 0x024A
    39b8:	24 ef       	ldi	r18, 0xF4	; 244
    39ba:	31 e0       	ldi	r19, 0x01	; 1
    39bc:	b9 01       	movw	r22, r18
    39be:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__udivmodhi4>
    39c2:	00 97       	sbiw	r24, 0x00	; 0
    39c4:	89 f4       	brne	.+34     	; 0x39e8 <Timer0ISR+0x98>
            	LCD_CLosingCounter(((u8)(TempWaitingTime/500))+48);//numbers in ASCII is between 48 & 57 --> 0 : 9
    39c6:	80 91 49 02 	lds	r24, 0x0249
    39ca:	90 91 4a 02 	lds	r25, 0x024A
    39ce:	24 ef       	ldi	r18, 0xF4	; 244
    39d0:	31 e0       	ldi	r19, 0x01	; 1
    39d2:	b9 01       	movw	r22, r18
    39d4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <__udivmodhi4>
    39d8:	cb 01       	movw	r24, r22
    39da:	80 5d       	subi	r24, 0xD0	; 208
    39dc:	0e 94 5d 10 	call	0x20ba	; 0x20ba <LCD_CLosingCounter>
    39e0:	03 c0       	rjmp	.+6      	; 0x39e8 <Timer0ISR+0x98>
        }
        else
        {
            // Waiting time has expired, but gate remains open
            SetWaitingTimeState(TimeOut);
    39e2:	8f ef       	ldi	r24, 0xFF	; 255
    39e4:	0e 94 01 11 	call	0x2202	; 0x2202 <SetWaitingTimeState>
        }
    }
}
    39e8:	cf 91       	pop	r28
    39ea:	df 91       	pop	r29
    39ec:	08 95       	ret

000039ee <EXternalInit0ISR>:

void EXternalInit0ISR(void)
{
    39ee:	df 93       	push	r29
    39f0:	cf 93       	push	r28
    39f2:	cd b7       	in	r28, 0x3d	; 61
    39f4:	de b7       	in	r29, 0x3e	; 62
	ExitGarage();
    39f6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <ExitGarage>
}
    39fa:	cf 91       	pop	r28
    39fc:	df 91       	pop	r29
    39fe:	08 95       	ret

00003a00 <EnteringPassword>:
void EnteringPassword(void)
{
    3a00:	df 93       	push	r29
    3a02:	cf 93       	push	r28
    3a04:	00 d0       	rcall	.+0      	; 0x3a06 <EnteringPassword+0x6>
    3a06:	cd b7       	in	r28, 0x3d	; 61
    3a08:	de b7       	in	r29, 0x3e	; 62
	if(GetPasswordState()==PasswordNotMatches)
    3a0a:	0e 94 db 10 	call	0x21b6	; 0x21b6 <GetPasswordState>
    3a0e:	88 23       	and	r24, r24
    3a10:	c9 f4       	brne	.+50     	; 0x3a44 <EnteringPassword+0x44>
	{
		u8* EnteredPassword;
		EnteredPassword = USART_Receive_String();
    3a12:	0e 94 42 1c 	call	0x3884	; 0x3884 <USART_Receive_String>
    3a16:	9a 83       	std	Y+2, r25	; 0x02
    3a18:	89 83       	std	Y+1, r24	; 0x01

		if (CheckPassword(EnteredPassword) == PasswordNotMatches)
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	0e 94 20 11 	call	0x2240	; 0x2240 <CheckPassword>
    3a22:	88 23       	and	r24, r24
    3a24:	31 f4       	brne	.+12     	; 0x3a32 <EnteringPassword+0x32>
		{
			SetPasswordState(PasswordNotMatches);
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	0e 94 c5 10 	call	0x218a	; 0x218a <SetPasswordState>
			LCD_WrongPassword();
    3a2c:	0e 94 84 10 	call	0x2108	; 0x2108 <LCD_WrongPassword>
    3a30:	05 c0       	rjmp	.+10     	; 0x3a3c <EnteringPassword+0x3c>
		}
		else
		{
			SetPasswordState(PasswordMatches);
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	0e 94 c5 10 	call	0x218a	; 0x218a <SetPasswordState>
			LCD_Entered();
    3a38:	0e 94 47 10 	call	0x208e	; 0x208e <LCD_Entered>
		}
		free(EnteredPassword); // Free the dynamically allocated memory
    3a3c:	89 81       	ldd	r24, Y+1	; 0x01
    3a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3a40:	0e 94 1f 1e 	call	0x3c3e	; 0x3c3e <free>

	}
}
    3a44:	0f 90       	pop	r0
    3a46:	0f 90       	pop	r0
    3a48:	cf 91       	pop	r28
    3a4a:	df 91       	pop	r29
    3a4c:	08 95       	ret

00003a4e <__udivmodhi4>:
    3a4e:	aa 1b       	sub	r26, r26
    3a50:	bb 1b       	sub	r27, r27
    3a52:	51 e1       	ldi	r21, 0x11	; 17
    3a54:	07 c0       	rjmp	.+14     	; 0x3a64 <__udivmodhi4_ep>

00003a56 <__udivmodhi4_loop>:
    3a56:	aa 1f       	adc	r26, r26
    3a58:	bb 1f       	adc	r27, r27
    3a5a:	a6 17       	cp	r26, r22
    3a5c:	b7 07       	cpc	r27, r23
    3a5e:	10 f0       	brcs	.+4      	; 0x3a64 <__udivmodhi4_ep>
    3a60:	a6 1b       	sub	r26, r22
    3a62:	b7 0b       	sbc	r27, r23

00003a64 <__udivmodhi4_ep>:
    3a64:	88 1f       	adc	r24, r24
    3a66:	99 1f       	adc	r25, r25
    3a68:	5a 95       	dec	r21
    3a6a:	a9 f7       	brne	.-22     	; 0x3a56 <__udivmodhi4_loop>
    3a6c:	80 95       	com	r24
    3a6e:	90 95       	com	r25
    3a70:	bc 01       	movw	r22, r24
    3a72:	cd 01       	movw	r24, r26
    3a74:	08 95       	ret

00003a76 <__prologue_saves__>:
    3a76:	2f 92       	push	r2
    3a78:	3f 92       	push	r3
    3a7a:	4f 92       	push	r4
    3a7c:	5f 92       	push	r5
    3a7e:	6f 92       	push	r6
    3a80:	7f 92       	push	r7
    3a82:	8f 92       	push	r8
    3a84:	9f 92       	push	r9
    3a86:	af 92       	push	r10
    3a88:	bf 92       	push	r11
    3a8a:	cf 92       	push	r12
    3a8c:	df 92       	push	r13
    3a8e:	ef 92       	push	r14
    3a90:	ff 92       	push	r15
    3a92:	0f 93       	push	r16
    3a94:	1f 93       	push	r17
    3a96:	cf 93       	push	r28
    3a98:	df 93       	push	r29
    3a9a:	cd b7       	in	r28, 0x3d	; 61
    3a9c:	de b7       	in	r29, 0x3e	; 62
    3a9e:	ca 1b       	sub	r28, r26
    3aa0:	db 0b       	sbc	r29, r27
    3aa2:	0f b6       	in	r0, 0x3f	; 63
    3aa4:	f8 94       	cli
    3aa6:	de bf       	out	0x3e, r29	; 62
    3aa8:	0f be       	out	0x3f, r0	; 63
    3aaa:	cd bf       	out	0x3d, r28	; 61
    3aac:	09 94       	ijmp

00003aae <__epilogue_restores__>:
    3aae:	2a 88       	ldd	r2, Y+18	; 0x12
    3ab0:	39 88       	ldd	r3, Y+17	; 0x11
    3ab2:	48 88       	ldd	r4, Y+16	; 0x10
    3ab4:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ab6:	6e 84       	ldd	r6, Y+14	; 0x0e
    3ab8:	7d 84       	ldd	r7, Y+13	; 0x0d
    3aba:	8c 84       	ldd	r8, Y+12	; 0x0c
    3abc:	9b 84       	ldd	r9, Y+11	; 0x0b
    3abe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3ac0:	b9 84       	ldd	r11, Y+9	; 0x09
    3ac2:	c8 84       	ldd	r12, Y+8	; 0x08
    3ac4:	df 80       	ldd	r13, Y+7	; 0x07
    3ac6:	ee 80       	ldd	r14, Y+6	; 0x06
    3ac8:	fd 80       	ldd	r15, Y+5	; 0x05
    3aca:	0c 81       	ldd	r16, Y+4	; 0x04
    3acc:	1b 81       	ldd	r17, Y+3	; 0x03
    3ace:	aa 81       	ldd	r26, Y+2	; 0x02
    3ad0:	b9 81       	ldd	r27, Y+1	; 0x01
    3ad2:	ce 0f       	add	r28, r30
    3ad4:	d1 1d       	adc	r29, r1
    3ad6:	0f b6       	in	r0, 0x3f	; 63
    3ad8:	f8 94       	cli
    3ada:	de bf       	out	0x3e, r29	; 62
    3adc:	0f be       	out	0x3f, r0	; 63
    3ade:	cd bf       	out	0x3d, r28	; 61
    3ae0:	ed 01       	movw	r28, r26
    3ae2:	08 95       	ret

00003ae4 <malloc>:
    3ae4:	cf 93       	push	r28
    3ae6:	df 93       	push	r29
    3ae8:	bc 01       	movw	r22, r24
    3aea:	82 30       	cpi	r24, 0x02	; 2
    3aec:	91 05       	cpc	r25, r1
    3aee:	10 f4       	brcc	.+4      	; 0x3af4 <malloc+0x10>
    3af0:	62 e0       	ldi	r22, 0x02	; 2
    3af2:	70 e0       	ldi	r23, 0x00	; 0
    3af4:	a0 91 4d 02 	lds	r26, 0x024D
    3af8:	b0 91 4e 02 	lds	r27, 0x024E
    3afc:	ed 01       	movw	r28, r26
    3afe:	e0 e0       	ldi	r30, 0x00	; 0
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	50 e0       	ldi	r21, 0x00	; 0
    3b06:	21 c0       	rjmp	.+66     	; 0x3b4a <malloc+0x66>
    3b08:	88 81       	ld	r24, Y
    3b0a:	99 81       	ldd	r25, Y+1	; 0x01
    3b0c:	86 17       	cp	r24, r22
    3b0e:	97 07       	cpc	r25, r23
    3b10:	69 f4       	brne	.+26     	; 0x3b2c <malloc+0x48>
    3b12:	8a 81       	ldd	r24, Y+2	; 0x02
    3b14:	9b 81       	ldd	r25, Y+3	; 0x03
    3b16:	30 97       	sbiw	r30, 0x00	; 0
    3b18:	19 f0       	breq	.+6      	; 0x3b20 <malloc+0x3c>
    3b1a:	93 83       	std	Z+3, r25	; 0x03
    3b1c:	82 83       	std	Z+2, r24	; 0x02
    3b1e:	04 c0       	rjmp	.+8      	; 0x3b28 <malloc+0x44>
    3b20:	90 93 4e 02 	sts	0x024E, r25
    3b24:	80 93 4d 02 	sts	0x024D, r24
    3b28:	fe 01       	movw	r30, r28
    3b2a:	34 c0       	rjmp	.+104    	; 0x3b94 <malloc+0xb0>
    3b2c:	68 17       	cp	r22, r24
    3b2e:	79 07       	cpc	r23, r25
    3b30:	38 f4       	brcc	.+14     	; 0x3b40 <malloc+0x5c>
    3b32:	41 15       	cp	r20, r1
    3b34:	51 05       	cpc	r21, r1
    3b36:	19 f0       	breq	.+6      	; 0x3b3e <malloc+0x5a>
    3b38:	84 17       	cp	r24, r20
    3b3a:	95 07       	cpc	r25, r21
    3b3c:	08 f4       	brcc	.+2      	; 0x3b40 <malloc+0x5c>
    3b3e:	ac 01       	movw	r20, r24
    3b40:	fe 01       	movw	r30, r28
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	9b 81       	ldd	r25, Y+3	; 0x03
    3b46:	9c 01       	movw	r18, r24
    3b48:	e9 01       	movw	r28, r18
    3b4a:	20 97       	sbiw	r28, 0x00	; 0
    3b4c:	e9 f6       	brne	.-70     	; 0x3b08 <malloc+0x24>
    3b4e:	41 15       	cp	r20, r1
    3b50:	51 05       	cpc	r21, r1
    3b52:	a9 f1       	breq	.+106    	; 0x3bbe <malloc+0xda>
    3b54:	ca 01       	movw	r24, r20
    3b56:	86 1b       	sub	r24, r22
    3b58:	97 0b       	sbc	r25, r23
    3b5a:	04 97       	sbiw	r24, 0x04	; 4
    3b5c:	08 f4       	brcc	.+2      	; 0x3b60 <malloc+0x7c>
    3b5e:	ba 01       	movw	r22, r20
    3b60:	e0 e0       	ldi	r30, 0x00	; 0
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	2a c0       	rjmp	.+84     	; 0x3bba <malloc+0xd6>
    3b66:	8d 91       	ld	r24, X+
    3b68:	9c 91       	ld	r25, X
    3b6a:	11 97       	sbiw	r26, 0x01	; 1
    3b6c:	84 17       	cp	r24, r20
    3b6e:	95 07       	cpc	r25, r21
    3b70:	f9 f4       	brne	.+62     	; 0x3bb0 <malloc+0xcc>
    3b72:	64 17       	cp	r22, r20
    3b74:	75 07       	cpc	r23, r21
    3b76:	81 f4       	brne	.+32     	; 0x3b98 <malloc+0xb4>
    3b78:	12 96       	adiw	r26, 0x02	; 2
    3b7a:	8d 91       	ld	r24, X+
    3b7c:	9c 91       	ld	r25, X
    3b7e:	13 97       	sbiw	r26, 0x03	; 3
    3b80:	30 97       	sbiw	r30, 0x00	; 0
    3b82:	19 f0       	breq	.+6      	; 0x3b8a <malloc+0xa6>
    3b84:	93 83       	std	Z+3, r25	; 0x03
    3b86:	82 83       	std	Z+2, r24	; 0x02
    3b88:	04 c0       	rjmp	.+8      	; 0x3b92 <malloc+0xae>
    3b8a:	90 93 4e 02 	sts	0x024E, r25
    3b8e:	80 93 4d 02 	sts	0x024D, r24
    3b92:	fd 01       	movw	r30, r26
    3b94:	32 96       	adiw	r30, 0x02	; 2
    3b96:	4f c0       	rjmp	.+158    	; 0x3c36 <malloc+0x152>
    3b98:	ca 01       	movw	r24, r20
    3b9a:	86 1b       	sub	r24, r22
    3b9c:	97 0b       	sbc	r25, r23
    3b9e:	fd 01       	movw	r30, r26
    3ba0:	e8 0f       	add	r30, r24
    3ba2:	f9 1f       	adc	r31, r25
    3ba4:	61 93       	st	Z+, r22
    3ba6:	71 93       	st	Z+, r23
    3ba8:	02 97       	sbiw	r24, 0x02	; 2
    3baa:	8d 93       	st	X+, r24
    3bac:	9c 93       	st	X, r25
    3bae:	43 c0       	rjmp	.+134    	; 0x3c36 <malloc+0x152>
    3bb0:	fd 01       	movw	r30, r26
    3bb2:	82 81       	ldd	r24, Z+2	; 0x02
    3bb4:	93 81       	ldd	r25, Z+3	; 0x03
    3bb6:	9c 01       	movw	r18, r24
    3bb8:	d9 01       	movw	r26, r18
    3bba:	10 97       	sbiw	r26, 0x00	; 0
    3bbc:	a1 f6       	brne	.-88     	; 0x3b66 <malloc+0x82>
    3bbe:	80 91 4b 02 	lds	r24, 0x024B
    3bc2:	90 91 4c 02 	lds	r25, 0x024C
    3bc6:	89 2b       	or	r24, r25
    3bc8:	41 f4       	brne	.+16     	; 0x3bda <malloc+0xf6>
    3bca:	80 91 33 02 	lds	r24, 0x0233
    3bce:	90 91 34 02 	lds	r25, 0x0234
    3bd2:	90 93 4c 02 	sts	0x024C, r25
    3bd6:	80 93 4b 02 	sts	0x024B, r24
    3bda:	40 91 35 02 	lds	r20, 0x0235
    3bde:	50 91 36 02 	lds	r21, 0x0236
    3be2:	41 15       	cp	r20, r1
    3be4:	51 05       	cpc	r21, r1
    3be6:	41 f4       	brne	.+16     	; 0x3bf8 <malloc+0x114>
    3be8:	4d b7       	in	r20, 0x3d	; 61
    3bea:	5e b7       	in	r21, 0x3e	; 62
    3bec:	80 91 31 02 	lds	r24, 0x0231
    3bf0:	90 91 32 02 	lds	r25, 0x0232
    3bf4:	48 1b       	sub	r20, r24
    3bf6:	59 0b       	sbc	r21, r25
    3bf8:	20 91 4b 02 	lds	r18, 0x024B
    3bfc:	30 91 4c 02 	lds	r19, 0x024C
    3c00:	24 17       	cp	r18, r20
    3c02:	35 07       	cpc	r19, r21
    3c04:	b0 f4       	brcc	.+44     	; 0x3c32 <malloc+0x14e>
    3c06:	ca 01       	movw	r24, r20
    3c08:	82 1b       	sub	r24, r18
    3c0a:	93 0b       	sbc	r25, r19
    3c0c:	86 17       	cp	r24, r22
    3c0e:	97 07       	cpc	r25, r23
    3c10:	80 f0       	brcs	.+32     	; 0x3c32 <malloc+0x14e>
    3c12:	ab 01       	movw	r20, r22
    3c14:	4e 5f       	subi	r20, 0xFE	; 254
    3c16:	5f 4f       	sbci	r21, 0xFF	; 255
    3c18:	84 17       	cp	r24, r20
    3c1a:	95 07       	cpc	r25, r21
    3c1c:	50 f0       	brcs	.+20     	; 0x3c32 <malloc+0x14e>
    3c1e:	42 0f       	add	r20, r18
    3c20:	53 1f       	adc	r21, r19
    3c22:	50 93 4c 02 	sts	0x024C, r21
    3c26:	40 93 4b 02 	sts	0x024B, r20
    3c2a:	f9 01       	movw	r30, r18
    3c2c:	61 93       	st	Z+, r22
    3c2e:	71 93       	st	Z+, r23
    3c30:	02 c0       	rjmp	.+4      	; 0x3c36 <malloc+0x152>
    3c32:	e0 e0       	ldi	r30, 0x00	; 0
    3c34:	f0 e0       	ldi	r31, 0x00	; 0
    3c36:	cf 01       	movw	r24, r30
    3c38:	df 91       	pop	r29
    3c3a:	cf 91       	pop	r28
    3c3c:	08 95       	ret

00003c3e <free>:
    3c3e:	cf 93       	push	r28
    3c40:	df 93       	push	r29
    3c42:	00 97       	sbiw	r24, 0x00	; 0
    3c44:	09 f4       	brne	.+2      	; 0x3c48 <free+0xa>
    3c46:	50 c0       	rjmp	.+160    	; 0x3ce8 <free+0xaa>
    3c48:	ec 01       	movw	r28, r24
    3c4a:	22 97       	sbiw	r28, 0x02	; 2
    3c4c:	1b 82       	std	Y+3, r1	; 0x03
    3c4e:	1a 82       	std	Y+2, r1	; 0x02
    3c50:	a0 91 4d 02 	lds	r26, 0x024D
    3c54:	b0 91 4e 02 	lds	r27, 0x024E
    3c58:	10 97       	sbiw	r26, 0x00	; 0
    3c5a:	09 f1       	breq	.+66     	; 0x3c9e <free+0x60>
    3c5c:	40 e0       	ldi	r20, 0x00	; 0
    3c5e:	50 e0       	ldi	r21, 0x00	; 0
    3c60:	ac 17       	cp	r26, r28
    3c62:	bd 07       	cpc	r27, r29
    3c64:	08 f1       	brcs	.+66     	; 0x3ca8 <free+0x6a>
    3c66:	bb 83       	std	Y+3, r27	; 0x03
    3c68:	aa 83       	std	Y+2, r26	; 0x02
    3c6a:	fe 01       	movw	r30, r28
    3c6c:	21 91       	ld	r18, Z+
    3c6e:	31 91       	ld	r19, Z+
    3c70:	e2 0f       	add	r30, r18
    3c72:	f3 1f       	adc	r31, r19
    3c74:	ae 17       	cp	r26, r30
    3c76:	bf 07       	cpc	r27, r31
    3c78:	79 f4       	brne	.+30     	; 0x3c98 <free+0x5a>
    3c7a:	8d 91       	ld	r24, X+
    3c7c:	9c 91       	ld	r25, X
    3c7e:	11 97       	sbiw	r26, 0x01	; 1
    3c80:	28 0f       	add	r18, r24
    3c82:	39 1f       	adc	r19, r25
    3c84:	2e 5f       	subi	r18, 0xFE	; 254
    3c86:	3f 4f       	sbci	r19, 0xFF	; 255
    3c88:	39 83       	std	Y+1, r19	; 0x01
    3c8a:	28 83       	st	Y, r18
    3c8c:	12 96       	adiw	r26, 0x02	; 2
    3c8e:	8d 91       	ld	r24, X+
    3c90:	9c 91       	ld	r25, X
    3c92:	13 97       	sbiw	r26, 0x03	; 3
    3c94:	9b 83       	std	Y+3, r25	; 0x03
    3c96:	8a 83       	std	Y+2, r24	; 0x02
    3c98:	41 15       	cp	r20, r1
    3c9a:	51 05       	cpc	r21, r1
    3c9c:	71 f4       	brne	.+28     	; 0x3cba <free+0x7c>
    3c9e:	d0 93 4e 02 	sts	0x024E, r29
    3ca2:	c0 93 4d 02 	sts	0x024D, r28
    3ca6:	20 c0       	rjmp	.+64     	; 0x3ce8 <free+0xaa>
    3ca8:	12 96       	adiw	r26, 0x02	; 2
    3caa:	8d 91       	ld	r24, X+
    3cac:	9c 91       	ld	r25, X
    3cae:	13 97       	sbiw	r26, 0x03	; 3
    3cb0:	ad 01       	movw	r20, r26
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	11 f0       	breq	.+4      	; 0x3cba <free+0x7c>
    3cb6:	dc 01       	movw	r26, r24
    3cb8:	d3 cf       	rjmp	.-90     	; 0x3c60 <free+0x22>
    3cba:	fa 01       	movw	r30, r20
    3cbc:	d3 83       	std	Z+3, r29	; 0x03
    3cbe:	c2 83       	std	Z+2, r28	; 0x02
    3cc0:	21 91       	ld	r18, Z+
    3cc2:	31 91       	ld	r19, Z+
    3cc4:	e2 0f       	add	r30, r18
    3cc6:	f3 1f       	adc	r31, r19
    3cc8:	ce 17       	cp	r28, r30
    3cca:	df 07       	cpc	r29, r31
    3ccc:	69 f4       	brne	.+26     	; 0x3ce8 <free+0xaa>
    3cce:	88 81       	ld	r24, Y
    3cd0:	99 81       	ldd	r25, Y+1	; 0x01
    3cd2:	28 0f       	add	r18, r24
    3cd4:	39 1f       	adc	r19, r25
    3cd6:	2e 5f       	subi	r18, 0xFE	; 254
    3cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    3cda:	fa 01       	movw	r30, r20
    3cdc:	31 83       	std	Z+1, r19	; 0x01
    3cde:	20 83       	st	Z, r18
    3ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ce4:	93 83       	std	Z+3, r25	; 0x03
    3ce6:	82 83       	std	Z+2, r24	; 0x02
    3ce8:	df 91       	pop	r29
    3cea:	cf 91       	pop	r28
    3cec:	08 95       	ret

00003cee <strlen>:
    3cee:	fc 01       	movw	r30, r24
    3cf0:	01 90       	ld	r0, Z+
    3cf2:	00 20       	and	r0, r0
    3cf4:	e9 f7       	brne	.-6      	; 0x3cf0 <strlen+0x2>
    3cf6:	80 95       	com	r24
    3cf8:	90 95       	com	r25
    3cfa:	8e 0f       	add	r24, r30
    3cfc:	9f 1f       	adc	r25, r31
    3cfe:	08 95       	ret

00003d00 <_exit>:
    3d00:	f8 94       	cli

00003d02 <__stop_program>:
    3d02:	ff cf       	rjmp	.-2      	; 0x3d02 <__stop_program>
